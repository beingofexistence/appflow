{"version":3,"sources":["vs/platform/userDataSync/common/userDataSyncMachines.ts"],"names":[],"mappings":"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","file":"userDataSyncMachines.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isAndroid, isChrome, isEdge, isFirefox, isSafari, isWeb, Platform, platform, PlatformToString } from 'vs/base/common/platform';\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\nimport { localize } from 'vs/nls';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { getServiceMachineId } from 'vs/platform/externalServices/common/serviceMachineId';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IUserData, IUserDataManifest, IUserDataSyncLogService, IUserDataSyncStoreService } from 'vs/platform/userDataSync/common/userDataSync';\n\nexport interface IMachineData {\n\tid: string;\n\tname: string;\n\tdisabled?: boolean;\n\tplatform?: string;\n}\n\nexport interface IMachinesData {\n\tversion: number;\n\tmachines: IMachineData[];\n}\n\nexport type IUserDataSyncMachine = Readonly<IMachineData> & { readonly isCurrent: boolean };\n\nexport const IUserDataSyncMachinesService = createDecorator<IUserDataSyncMachinesService>('IUserDataSyncMachinesService');\nexport interface IUserDataSyncMachinesService {\n\t_serviceBrand: any;\n\n\treadonly onDidChange: Event<void>;\n\n\tgetMachines(manifest?: IUserDataManifest): Promise<IUserDataSyncMachine[]>;\n\n\taddCurrentMachine(manifest?: IUserDataManifest): Promise<void>;\n\tremoveCurrentMachine(manifest?: IUserDataManifest): Promise<void>;\n\trenameMachine(machineId: string, name: string): Promise<void>;\n\tsetEnablements(enbalements: [string, boolean][]): Promise<void>;\n}\n\nconst currentMachineNameKey = 'sync.currentMachineName';\n\nconst Safari = 'Safari';\nconst Chrome = 'Chrome';\nconst Edge = 'Edge';\nconst Firefox = 'Firefox';\nconst Android = 'Android';\n\nexport function isWebPlatform(platform: string) {\n\tswitch (platform) {\n\t\tcase Safari:\n\t\tcase Chrome:\n\t\tcase Edge:\n\t\tcase Firefox:\n\t\tcase Android:\n\t\tcase PlatformToString(Platform.Web):\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction getPlatformName(): string {\n\tif (isSafari) { return Safari; }\n\tif (isChrome) { return Chrome; }\n\tif (isEdge) { return Edge; }\n\tif (isFirefox) { return Firefox; }\n\tif (isAndroid) { return Android; }\n\treturn PlatformToString(isWeb ? Platform.Web : platform);\n}\n\nexport class UserDataSyncMachinesService extends Disposable implements IUserDataSyncMachinesService {\n\n\tprivate static readonly VERSION = 1;\n\tprivate static readonly RESOURCE = 'machines';\n\n\t_serviceBrand: any;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate readonly currentMachineIdPromise: Promise<string>;\n\tprivate userData: IUserData | null = null;\n\n\tconstructor(\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUserDataSyncStoreService private readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tsuper();\n\t\tthis.currentMachineIdPromise = getServiceMachineId(environmentService, fileService, storageService);\n\t}\n\n\tasync getMachines(manifest?: IUserDataManifest): Promise<IUserDataSyncMachine[]> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\treturn machineData.machines.map<IUserDataSyncMachine>(machine => ({ ...machine, ...{ isCurrent: machine.id === currentMachineId } }));\n\t}\n\n\tasync addCurrentMachine(manifest?: IUserDataManifest): Promise<void> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tif (!machineData.machines.some(({ id }) => id === currentMachineId)) {\n\t\t\tmachineData.machines.push({ id: currentMachineId, name: this.computeCurrentMachineName(machineData.machines), platform: getPlatformName() });\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t}\n\t}\n\n\tasync removeCurrentMachine(manifest?: IUserDataManifest): Promise<void> {\n\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tconst updatedMachines = machineData.machines.filter(({ id }) => id !== currentMachineId);\n\t\tif (updatedMachines.length !== machineData.machines.length) {\n\t\t\tmachineData.machines = updatedMachines;\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t}\n\t}\n\n\tasync renameMachine(machineId: string, name: string, manifest?: IUserDataManifest): Promise<void> {\n\t\tconst machineData = await this.readMachinesData(manifest);\n\t\tconst machine = machineData.machines.find(({ id }) => id === machineId);\n\t\tif (machine) {\n\t\t\tmachine.name = name;\n\t\t\tawait this.writeMachinesData(machineData);\n\t\t\tconst currentMachineId = await this.currentMachineIdPromise;\n\t\t\tif (machineId === currentMachineId) {\n\t\t\t\tthis.storageService.store(currentMachineNameKey, name, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync setEnablements(enablements: [string, boolean][]): Promise<void> {\n\t\tconst machineData = await this.readMachinesData();\n\t\tfor (const [machineId, enabled] of enablements) {\n\t\t\tconst machine = machineData.machines.find(machine => machine.id === machineId);\n\t\t\tif (machine) {\n\t\t\t\tmachine.disabled = enabled ? undefined : true;\n\t\t\t}\n\t\t}\n\t\tawait this.writeMachinesData(machineData);\n\t}\n\n\tprivate computeCurrentMachineName(machines: IMachineData[]): string {\n\t\tconst previousName = this.storageService.get(currentMachineNameKey, StorageScope.APPLICATION);\n\t\tif (previousName) {\n\t\t\treturn previousName;\n\t\t}\n\n\t\tconst namePrefix = `${this.productService.embedderIdentifier ? `${this.productService.embedderIdentifier} - ` : ''}${getPlatformName()} (${this.productService.nameShort})`;\n\t\tconst nameRegEx = new RegExp(`${escapeRegExpCharacters(namePrefix)}\\\\s#(\\\\d+)`);\n\t\tlet nameIndex = 0;\n\t\tfor (const machine of machines) {\n\t\t\tconst matches = nameRegEx.exec(machine.name);\n\t\t\tconst index = matches ? parseInt(matches[1]) : 0;\n\t\t\tnameIndex = index > nameIndex ? index : nameIndex;\n\t\t}\n\t\treturn `${namePrefix} #${nameIndex + 1}`;\n\t}\n\n\tprivate async readMachinesData(manifest?: IUserDataManifest): Promise<IMachinesData> {\n\t\tthis.userData = await this.readUserData(manifest);\n\t\tconst machinesData = this.parse(this.userData);\n\t\tif (machinesData.version !== UserDataSyncMachinesService.VERSION) {\n\t\t\tthrow new Error(localize('error incompatible', \"Cannot read machines data as the current version is incompatible. Please update {0} and try again.\", this.productService.nameLong));\n\t\t}\n\t\treturn machinesData;\n\t}\n\n\tprivate async writeMachinesData(machinesData: IMachinesData): Promise<void> {\n\t\tconst content = JSON.stringify(machinesData);\n\t\tconst ref = await this.userDataSyncStoreService.writeResource(UserDataSyncMachinesService.RESOURCE, content, this.userData?.ref || null);\n\t\tthis.userData = { ref, content };\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate async readUserData(manifest?: IUserDataManifest): Promise<IUserData> {\n\t\tif (this.userData) {\n\n\t\t\tconst latestRef = manifest && manifest.latest ? manifest.latest[UserDataSyncMachinesService.RESOURCE] : undefined;\n\n\t\t\t// Last time synced resource and latest resource on server are same\n\t\t\tif (this.userData.ref === latestRef) {\n\t\t\t\treturn this.userData;\n\t\t\t}\n\n\t\t\t// There is no resource on server and last time it was synced with no resource\n\t\t\tif (latestRef === undefined && this.userData.content === null) {\n\t\t\t\treturn this.userData;\n\t\t\t}\n\t\t}\n\n\t\treturn this.userDataSyncStoreService.readResource(UserDataSyncMachinesService.RESOURCE, this.userData);\n\t}\n\n\tprivate parse(userData: IUserData): IMachinesData {\n\t\tif (userData.content !== null) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(userData.content);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tversion: UserDataSyncMachinesService.VERSION,\n\t\t\tmachines: []\n\t\t};\n\t}\n}\n"]}