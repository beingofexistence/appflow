{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataSync/common/globalStateMerge.ts"],"names":[],"mappings":"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","file":"globalStateMerge.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport * as objects from 'vs/base/common/objects';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IStorageValue, SYNC_SERVICE_URL_TYPE } from 'vs/platform/userDataSync/common/userDataSync';\n\nexport interface IMergeResult {\n\tlocal: { added: IStringDictionary<IStorageValue>; removed: string[]; updated: IStringDictionary<IStorageValue> };\n\tremote: { added: string[]; removed: string[]; updated: string[]; all: IStringDictionary<IStorageValue> | null };\n}\n\nexport function merge(localStorage: IStringDictionary<IStorageValue>, remoteStorage: IStringDictionary<IStorageValue> | null, baseStorage: IStringDictionary<IStorageValue> | null, storageKeys: { machine: ReadonlyArray<string>; unregistered: ReadonlyArray<string> }, logService: ILogService): IMergeResult {\n\tif (!remoteStorage) {\n\t\treturn { remote: { added: Object.keys(localStorage), removed: [], updated: [], all: Object.keys(localStorage).length > 0 ? localStorage : null }, local: { added: {}, removed: [], updated: {} } };\n\t}\n\n\tconst localToRemote = compare(localStorage, remoteStorage);\n\tif (localToRemote.added.size === 0 && localToRemote.removed.size === 0 && localToRemote.updated.size === 0) {\n\t\t// No changes found between local and remote.\n\t\treturn { remote: { added: [], removed: [], updated: [], all: null }, local: { added: {}, removed: [], updated: {} } };\n\t}\n\n\tconst baseToRemote = baseStorage ? compare(baseStorage, remoteStorage) : { added: Object.keys(remoteStorage).reduce((r, k) => { r.add(k); return r; }, new Set<string>()), removed: new Set<string>(), updated: new Set<string>() };\n\tconst baseToLocal = baseStorage ? compare(baseStorage, localStorage) : { added: Object.keys(localStorage).reduce((r, k) => { r.add(k); return r; }, new Set<string>()), removed: new Set<string>(), updated: new Set<string>() };\n\n\tconst local: { added: IStringDictionary<IStorageValue>; removed: string[]; updated: IStringDictionary<IStorageValue> } = { added: {}, removed: [], updated: {} };\n\tconst remote: IStringDictionary<IStorageValue> = objects.deepClone(remoteStorage);\n\n\tconst isFirstTimeSync = !baseStorage;\n\n\t// Added in local\n\tfor (const key of baseToLocal.added.values()) {\n\t\t// If syncing for first time remote value gets precedence always,\n\t\t// except for sync service type key - local value takes precedence for this key\n\t\tif (key !== SYNC_SERVICE_URL_TYPE && isFirstTimeSync && baseToRemote.added.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tremote[key] = localStorage[key];\n\t}\n\n\t// Updated in local\n\tfor (const key of baseToLocal.updated.values()) {\n\t\tremote[key] = localStorage[key];\n\t}\n\n\t// Removed in local\n\tfor (const key of baseToLocal.removed.values()) {\n\t\t// Do not remove from remote if key is not registered.\n\t\tif (storageKeys.unregistered.includes(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tdelete remote[key];\n\t}\n\n\t// Added in remote\n\tfor (const key of baseToRemote.added.values()) {\n\t\tconst remoteValue = remoteStorage[key];\n\t\tif (storageKeys.machine.includes(key)) {\n\t\t\tlogService.info(`GlobalState: Skipped adding ${key} in local storage because it is declared as machine scoped.`);\n\t\t\tcontinue;\n\t\t}\n\t\t// Skip if the value is also added in local from the time it is last synced\n\t\tif (baseStorage && baseToLocal.added.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst localValue = localStorage[key];\n\t\tif (localValue && localValue.value === remoteValue.value) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Local sync service type value takes precedence if syncing for first time\n\t\tif (key === SYNC_SERVICE_URL_TYPE && isFirstTimeSync && baseToLocal.added.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (localValue) {\n\t\t\tlocal.updated[key] = remoteValue;\n\t\t} else {\n\t\t\tlocal.added[key] = remoteValue;\n\t\t}\n\t}\n\n\t// Updated in Remote\n\tfor (const key of baseToRemote.updated.values()) {\n\t\tconst remoteValue = remoteStorage[key];\n\t\tif (storageKeys.machine.includes(key)) {\n\t\t\tlogService.info(`GlobalState: Skipped updating ${key} in local storage because it is declared as machine scoped.`);\n\t\t\tcontinue;\n\t\t}\n\t\t// Skip if the value is also updated or removed in local\n\t\tif (baseToLocal.updated.has(key) || baseToLocal.removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst localValue = localStorage[key];\n\t\tif (localValue && localValue.value === remoteValue.value) {\n\t\t\tcontinue;\n\t\t}\n\t\tlocal.updated[key] = remoteValue;\n\t}\n\n\t// Removed in remote\n\tfor (const key of baseToRemote.removed.values()) {\n\t\tif (storageKeys.machine.includes(key)) {\n\t\t\tlogService.trace(`GlobalState: Skipped removing ${key} in local storage because it is declared as machine scoped.`);\n\t\t\tcontinue;\n\t\t}\n\t\t// Skip if the value is also updated or removed in local\n\t\tif (baseToLocal.updated.has(key) || baseToLocal.removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tlocal.removed.push(key);\n\t}\n\n\tconst result = compare(remoteStorage, remote);\n\treturn { local, remote: { added: [...result.added], updated: [...result.updated], removed: [...result.removed], all: result.added.size === 0 && result.removed.size === 0 && result.updated.size === 0 ? null : remote } };\n}\n\nfunction compare(from: IStringDictionary<any>, to: IStringDictionary<any>): { added: Set<string>; removed: Set<string>; updated: Set<string> } {\n\tconst fromKeys = Object.keys(from);\n\tconst toKeys = Object.keys(to);\n\tconst added = toKeys.filter(key => !fromKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst removed = fromKeys.filter(key => !toKeys.includes(key)).reduce((r, key) => { r.add(key); return r; }, new Set<string>());\n\tconst updated: Set<string> = new Set<string>();\n\n\tfor (const key of fromKeys) {\n\t\tif (removed.has(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst value1 = from[key];\n\t\tconst value2 = to[key];\n\t\tif (!objects.equals(value1, value2)) {\n\t\t\tupdated.add(key);\n\t\t}\n\t}\n\n\treturn { added, removed, updated };\n}\n"]}