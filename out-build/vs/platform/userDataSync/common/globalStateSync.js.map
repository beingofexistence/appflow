{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataSync/common/globalStateSync.ts"],"names":[],"mappings":"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","file":"globalStateSync.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { Event } from 'vs/base/common/event';\nimport { parse } from 'vs/base/common/json';\nimport { toFormattedString } from 'vs/base/common/jsonFormatter';\nimport { isWeb } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IHeaders } from 'vs/base/parts/request/common/request';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { getServiceMachineId } from 'vs/platform/externalServices/common/serviceMachineId';\nimport { IStorageEntry, IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { AbstractInitializer, AbstractSynchroniser, getSyncResourceLogLabel, IAcceptResult, IMergeResult, IResourcePreview, isSyncData } from 'vs/platform/userDataSync/common/abstractSynchronizer';\nimport { edit } from 'vs/platform/userDataSync/common/content';\nimport { merge } from 'vs/platform/userDataSync/common/globalStateMerge';\nimport { ALL_SYNC_RESOURCES, Change, createSyncHeaders, getEnablementKey, IGlobalState, IRemoteUserData, IStorageValue, ISyncData, IUserData, IUserDataSyncLocalStoreService, IUserDataSynchroniser, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncStoreService, SyncResource, SYNC_SERVICE_URL_TYPE, UserDataSyncError, UserDataSyncErrorCode, UserDataSyncStoreType, USER_DATA_SYNC_SCHEME } from 'vs/platform/userDataSync/common/userDataSync';\nimport { UserDataSyncStoreClient } from 'vs/platform/userDataSync/common/userDataSyncStoreService';\nimport { IUserDataProfile, IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IUserDataProfileStorageService } from 'vs/platform/userDataProfile/common/userDataProfileStorageService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\n\nconst argvStoragePrefx = 'globalState.argv.';\nconst argvProperties: string[] = ['locale'];\n\ntype StorageKeys = { machine: string[]; user: string[]; unregistered: string[] };\n\ninterface IGlobalStateResourceMergeResult extends IAcceptResult {\n\treadonly local: { added: IStringDictionary<IStorageValue>; removed: string[]; updated: IStringDictionary<IStorageValue> };\n\treadonly remote: { added: string[]; removed: string[]; updated: string[]; all: IStringDictionary<IStorageValue> | null };\n}\n\ninterface IGlobalStateResourcePreview extends IResourcePreview {\n\treadonly localUserData: IGlobalState;\n\treadonly previewResult: IGlobalStateResourceMergeResult;\n\treadonly storageKeys: StorageKeys;\n}\n\nexport function stringify(globalState: IGlobalState, format: boolean): string {\n\tconst storageKeys = globalState.storage ? Object.keys(globalState.storage).sort() : [];\n\tconst storage: IStringDictionary<IStorageValue> = {};\n\tstorageKeys.forEach(key => storage[key] = globalState.storage[key]);\n\tglobalState.storage = storage;\n\treturn format ? toFormattedString(globalState, {}) : JSON.stringify(globalState);\n}\n\nconst GLOBAL_STATE_DATA_VERSION = 1;\n\n/**\n * Synchronises global state that includes\n * \t- Global storage with user scope\n * \t- Locale from argv properties\n *\n * Global storage is synced without checking version just like other resources (settings, keybindings).\n * If there is a change in format of the value of a storage key which requires migration then\n * \t\tOwner of that key should remove that key from user scope and replace that with new user scoped key.\n */\nexport class GlobalStateSynchroniser extends AbstractSynchroniser implements IUserDataSynchroniser {\n\n\tprotected readonly version: number = GLOBAL_STATE_DATA_VERSION;\n\tprivate readonly previewResource: URI = this.extUri.joinPath(this.syncPreviewFolder, 'globalState.json');\n\tprivate readonly baseResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'base' });\n\tprivate readonly localResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'local' });\n\tprivate readonly remoteResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'remote' });\n\tprivate readonly acceptedResource: URI = this.previewResource.with({ scheme: USER_DATA_SYNC_SCHEME, authority: 'accepted' });\n\n\tprivate readonly localGlobalStateProvider: LocalGlobalStateProvider;\n\n\tconstructor(\n\t\tprofile: IUserDataProfile,\n\t\tcollection: string | undefined,\n\t\t@IUserDataProfileStorageService private readonly userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLocalStoreService userDataSyncLocalStoreService: IUserDataSyncLocalStoreService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper({ syncResource: SyncResource.GlobalState, profile }, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, configurationService, uriIdentityService);\n\t\tthis.localGlobalStateProvider = instantiationService.createInstance(LocalGlobalStateProvider);\n\t\tthis._register(fileService.watch(this.extUri.dirname(this.environmentService.argvResource)));\n\t\tthis._register(\n\t\t\tEvent.any(\n\t\t\t\t/* Locale change */\n\t\t\t\tEvent.filter(fileService.onDidFilesChange, e => e.contains(this.environmentService.argvResource)),\n\t\t\t\tEvent.filter(userDataProfileStorageService.onDidChange, e => {\n\t\t\t\t\t/* StorageTarget has changed in profile storage */\n\t\t\t\t\tif (e.targetChanges.some(profile => this.syncResource.profile.id === profile.id)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t/* User storage data has changed in profile storage */\n\t\t\t\t\tif (e.valueChanges.some(({ profile, changes }) => this.syncResource.profile.id === profile.id && changes.some(change => change.target === StorageTarget.USER))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}),\n\t\t\t)((() => this.triggerLocalChange()))\n\t\t);\n\t}\n\n\tprotected async generateSyncPreview(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, isRemoteDataFromCurrentMachine: boolean): Promise<IGlobalStateResourcePreview[]> {\n\t\tconst remoteGlobalState: IGlobalState = remoteUserData.syncData ? JSON.parse(remoteUserData.syncData.content) : null;\n\n\t\t// Use remote data as last sync data if last sync data does not exist and remote data is from same machine\n\t\tlastSyncUserData = lastSyncUserData === null && isRemoteDataFromCurrentMachine ? remoteUserData : lastSyncUserData;\n\t\tconst lastSyncGlobalState: IGlobalState | null = lastSyncUserData && lastSyncUserData.syncData ? JSON.parse(lastSyncUserData.syncData.content) : null;\n\n\t\tconst localGlobalState = await this.localGlobalStateProvider.getLocalGlobalState(this.syncResource.profile);\n\n\t\tif (remoteGlobalState) {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Merging remote ui state with local ui state...`);\n\t\t} else {\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Remote ui state does not exist. Synchronizing ui state for the first time.`);\n\t\t}\n\n\t\tconst storageKeys = await this.getStorageKeys(lastSyncGlobalState);\n\t\tconst { local, remote } = merge(localGlobalState.storage, remoteGlobalState ? remoteGlobalState.storage : null, lastSyncGlobalState ? lastSyncGlobalState.storage : null, storageKeys, this.logService);\n\t\tconst previewResult: IGlobalStateResourceMergeResult = {\n\t\t\tcontent: null,\n\t\t\tlocal,\n\t\t\tremote,\n\t\t\tlocalChange: Object.keys(local.added).length > 0 || Object.keys(local.updated).length > 0 || local.removed.length > 0 ? Change.Modified : Change.None,\n\t\t\tremoteChange: remote.all !== null ? Change.Modified : Change.None,\n\t\t};\n\n\t\tconst localContent = stringify(localGlobalState, false);\n\t\treturn [{\n\t\t\tbaseResource: this.baseResource,\n\t\t\tbaseContent: lastSyncGlobalState ? stringify(lastSyncGlobalState, false) : localContent,\n\t\t\tlocalResource: this.localResource,\n\t\t\tlocalContent,\n\t\t\tlocalUserData: localGlobalState,\n\t\t\tremoteResource: this.remoteResource,\n\t\t\tremoteContent: remoteGlobalState ? stringify(remoteGlobalState, false) : null,\n\t\t\tpreviewResource: this.previewResource,\n\t\t\tpreviewResult,\n\t\t\tlocalChange: previewResult.localChange,\n\t\t\tremoteChange: previewResult.remoteChange,\n\t\t\tacceptedResource: this.acceptedResource,\n\t\t\tstorageKeys\n\t\t}];\n\t}\n\n\tprotected async hasRemoteChanged(lastSyncUserData: IRemoteUserData): Promise<boolean> {\n\t\tconst lastSyncGlobalState: IGlobalState | null = lastSyncUserData.syncData ? JSON.parse(lastSyncUserData.syncData.content) : null;\n\t\tif (lastSyncGlobalState === null) {\n\t\t\treturn true;\n\t\t}\n\t\tconst localGlobalState = await this.localGlobalStateProvider.getLocalGlobalState(this.syncResource.profile);\n\t\tconst storageKeys = await this.getStorageKeys(lastSyncGlobalState);\n\t\tconst { remote } = merge(localGlobalState.storage, lastSyncGlobalState.storage, lastSyncGlobalState.storage, storageKeys, this.logService);\n\t\treturn remote.all !== null;\n\t}\n\n\tprotected async getMergeResult(resourcePreview: IGlobalStateResourcePreview, token: CancellationToken): Promise<IMergeResult> {\n\t\treturn { ...resourcePreview.previewResult, hasConflicts: false };\n\t}\n\n\tprotected async getAcceptResult(resourcePreview: IGlobalStateResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IGlobalStateResourceMergeResult> {\n\n\t\t/* Accept local resource */\n\t\tif (this.extUri.isEqual(resource, this.localResource)) {\n\t\t\treturn this.acceptLocal(resourcePreview);\n\t\t}\n\n\t\t/* Accept remote resource */\n\t\tif (this.extUri.isEqual(resource, this.remoteResource)) {\n\t\t\treturn this.acceptRemote(resourcePreview);\n\t\t}\n\n\t\t/* Accept preview resource */\n\t\tif (this.extUri.isEqual(resource, this.previewResource)) {\n\t\t\treturn resourcePreview.previewResult;\n\t\t}\n\n\t\tthrow new Error(`Invalid Resource: ${resource.toString()}`);\n\t}\n\n\tprivate async acceptLocal(resourcePreview: IGlobalStateResourcePreview): Promise<IGlobalStateResourceMergeResult> {\n\t\treturn {\n\t\t\tcontent: resourcePreview.localContent,\n\t\t\tlocal: { added: {}, removed: [], updated: {} },\n\t\t\tremote: { added: Object.keys(resourcePreview.localUserData.storage), removed: [], updated: [], all: resourcePreview.localUserData.storage },\n\t\t\tlocalChange: Change.None,\n\t\t\tremoteChange: Change.Modified,\n\t\t};\n\t}\n\n\tprivate async acceptRemote(resourcePreview: IGlobalStateResourcePreview): Promise<IGlobalStateResourceMergeResult> {\n\t\tif (resourcePreview.remoteContent !== null) {\n\t\t\tconst remoteGlobalState: IGlobalState = JSON.parse(resourcePreview.remoteContent);\n\t\t\tconst { local, remote } = merge(resourcePreview.localUserData.storage, remoteGlobalState.storage, null, resourcePreview.storageKeys, this.logService);\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocal,\n\t\t\t\tremote,\n\t\t\t\tlocalChange: Object.keys(local.added).length > 0 || Object.keys(local.updated).length > 0 || local.removed.length > 0 ? Change.Modified : Change.None,\n\t\t\t\tremoteChange: remote !== null ? Change.Modified : Change.None,\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcontent: resourcePreview.remoteContent,\n\t\t\t\tlocal: { added: {}, removed: [], updated: {} },\n\t\t\t\tremote: { added: [], removed: [], updated: [], all: null },\n\t\t\t\tlocalChange: Change.None,\n\t\t\t\tremoteChange: Change.None,\n\t\t\t};\n\t\t}\n\t}\n\n\tprotected async applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, resourcePreviews: [IGlobalStateResourcePreview, IGlobalStateResourceMergeResult][], force: boolean): Promise<void> {\n\t\tconst { localUserData } = resourcePreviews[0][0];\n\t\tconst { local, remote, localChange, remoteChange } = resourcePreviews[0][1];\n\n\t\tif (localChange === Change.None && remoteChange === Change.None) {\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing ui state.`);\n\t\t}\n\n\t\tif (localChange !== Change.None) {\n\t\t\t// update local\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating local ui state...`);\n\t\t\tawait this.backupLocal(JSON.stringify(localUserData));\n\t\t\tawait this.localGlobalStateProvider.writeLocalGlobalState(local, this.syncResource.profile);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated local ui state`);\n\t\t}\n\n\t\tif (remoteChange !== Change.None) {\n\t\t\t// update remote\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating remote ui state...`);\n\t\t\tconst content = JSON.stringify(<IGlobalState>{ storage: remote.all });\n\t\t\tremoteUserData = await this.updateRemoteUserData(content, force ? null : remoteUserData.ref);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated remote ui state.${remote.added.length ? ` Added: ${remote.added}.` : ''}${remote.updated.length ? ` Updated: ${remote.updated}.` : ''}${remote.removed.length ? ` Removed: ${remote.removed}.` : ''}`);\n\t\t}\n\n\t\tif (lastSyncUserData?.ref !== remoteUserData.ref) {\n\t\t\t// update last sync\n\t\t\tthis.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized ui state...`);\n\t\t\tawait this.updateLastSyncUserData(remoteUserData);\n\t\t\tthis.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized ui state`);\n\t\t}\n\t}\n\n\tasync resolveContent(uri: URI): Promise<string | null> {\n\t\tif (this.extUri.isEqual(this.remoteResource, uri)\n\t\t\t|| this.extUri.isEqual(this.baseResource, uri)\n\t\t\t|| this.extUri.isEqual(this.localResource, uri)\n\t\t\t|| this.extUri.isEqual(this.acceptedResource, uri)\n\t\t) {\n\t\t\tconst content = await this.resolvePreviewContent(uri);\n\t\t\treturn content ? stringify(JSON.parse(content), true) : content;\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync hasLocalData(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst { storage } = await this.localGlobalStateProvider.getLocalGlobalState(this.syncResource.profile);\n\t\t\tif (Object.keys(storage).length > 1 || storage[`${argvStoragePrefx}.locale`]?.value !== 'en') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* ignore error */\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async getStorageKeys(lastSyncGlobalState: IGlobalState | null): Promise<StorageKeys> {\n\t\tconst storageData = await this.userDataProfileStorageService.readStorageData(this.syncResource.profile);\n\t\tconst user: string[] = [], machine: string[] = [];\n\t\tfor (const [key, value] of storageData) {\n\t\t\tif (value.target === StorageTarget.USER) {\n\t\t\t\tuser.push(key);\n\t\t\t} else if (value.target === StorageTarget.MACHINE) {\n\t\t\t\tmachine.push(key);\n\t\t\t}\n\t\t}\n\t\tconst registered = [...user, ...machine];\n\t\tconst unregistered = lastSyncGlobalState?.storage ? Object.keys(lastSyncGlobalState.storage).filter(key => !key.startsWith(argvStoragePrefx) && !registered.includes(key) && storageData.get(key) !== undefined) : [];\n\n\t\tif (!isWeb) {\n\t\t\t// Following keys are synced only in web. Do not sync these keys in other platforms\n\t\t\tconst keysSyncedOnlyInWeb = [...ALL_SYNC_RESOURCES.map(resource => getEnablementKey(resource)), SYNC_SERVICE_URL_TYPE];\n\t\t\tunregistered.push(...keysSyncedOnlyInWeb);\n\t\t\tmachine.push(...keysSyncedOnlyInWeb);\n\t\t}\n\n\t\treturn { user, machine, unregistered };\n\t}\n}\n\nexport class LocalGlobalStateProvider {\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IUserDataProfileStorageService private readonly userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService\n\t) { }\n\n\tasync getLocalGlobalState(profile: IUserDataProfile): Promise<IGlobalState> {\n\t\tconst storage: IStringDictionary<IStorageValue> = {};\n\t\tif (profile.isDefault) {\n\t\t\tconst argvContent: string = await this.getLocalArgvContent();\n\t\t\tconst argvValue: IStringDictionary<any> = parse(argvContent);\n\t\t\tfor (const argvProperty of argvProperties) {\n\t\t\t\tif (argvValue[argvProperty] !== undefined) {\n\t\t\t\t\tstorage[`${argvStoragePrefx}${argvProperty}`] = { version: 1, value: argvValue[argvProperty] };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst storageData = await this.userDataProfileStorageService.readStorageData(profile);\n\t\tfor (const [key, value] of storageData) {\n\t\t\tif (value.value && value.target === StorageTarget.USER) {\n\t\t\t\tstorage[key] = { version: 1, value: value.value };\n\t\t\t}\n\t\t}\n\t\treturn { storage };\n\t}\n\n\tprivate async getLocalArgvContent(): Promise<string> {\n\t\ttry {\n\t\t\tthis.logService.debug('GlobalStateSync#getLocalArgvContent', this.environmentService.argvResource);\n\t\t\tconst content = await this.fileService.readFile(this.environmentService.argvResource);\n\t\t\tthis.logService.debug('GlobalStateSync#getLocalArgvContent - Resolved', this.environmentService.argvResource);\n\t\t\treturn content.value.toString();\n\t\t} catch (error) {\n\t\t\tthis.logService.debug(getErrorMessage(error));\n\t\t}\n\t\treturn '{}';\n\t}\n\n\tasync writeLocalGlobalState({ added, removed, updated }: { added: IStringDictionary<IStorageValue>; updated: IStringDictionary<IStorageValue>; removed: string[] }, profile: IUserDataProfile): Promise<void> {\n\t\tconst syncResourceLogLabel = getSyncResourceLogLabel(SyncResource.GlobalState, profile);\n\t\tconst argv: IStringDictionary<any> = {};\n\t\tconst updatedStorage = new Map<string, string | undefined>();\n\t\tconst storageData = await this.userDataProfileStorageService.readStorageData(profile);\n\t\tconst handleUpdatedStorage = (keys: string[], storage?: IStringDictionary<IStorageValue>): void => {\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (key.startsWith(argvStoragePrefx)) {\n\t\t\t\t\targv[key.substring(argvStoragePrefx.length)] = storage ? storage[key].value : undefined;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (storage) {\n\t\t\t\t\tconst storageValue = storage[key];\n\t\t\t\t\tif (storageValue.value !== storageData.get(key)?.value) {\n\t\t\t\t\t\tupdatedStorage.set(key, storageValue.value);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (storageData.get(key) !== undefined) {\n\t\t\t\t\t\tupdatedStorage.set(key, undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\thandleUpdatedStorage(Object.keys(added), added);\n\t\thandleUpdatedStorage(Object.keys(updated), updated);\n\t\thandleUpdatedStorage(removed);\n\n\t\tif (Object.keys(argv).length) {\n\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Updating locale...`);\n\t\t\tconst argvContent = await this.getLocalArgvContent();\n\t\t\tlet content = argvContent;\n\t\t\tfor (const argvProperty of Object.keys(argv)) {\n\t\t\t\tcontent = edit(content, [argvProperty], argv[argvProperty], {});\n\t\t\t}\n\t\t\tif (argvContent !== content) {\n\t\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Updating locale...`);\n\t\t\t\tawait this.fileService.writeFile(this.environmentService.argvResource, VSBuffer.fromString(content));\n\t\t\t\tthis.logService.info(`${syncResourceLogLabel}: Updated locale.`);\n\t\t\t}\n\t\t\tthis.logService.info(`${syncResourceLogLabel}: Updated locale`);\n\t\t}\n\n\t\tif (updatedStorage.size) {\n\t\t\tthis.logService.trace(`${syncResourceLogLabel}: Updating global state...`);\n\t\t\tawait this.userDataProfileStorageService.updateStorageData(profile, updatedStorage, StorageTarget.USER);\n\t\t\tthis.logService.info(`${syncResourceLogLabel}: Updated global state`, [...updatedStorage.keys()]);\n\t\t}\n\t}\n}\n\nexport class GlobalStateInitializer extends AbstractInitializer {\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(SyncResource.GlobalState, userDataProfilesService, environmentService, logService, fileService, storageService, uriIdentityService);\n\t}\n\n\tprotected async doInitialize(remoteUserData: IRemoteUserData): Promise<void> {\n\t\tconst remoteGlobalState: IGlobalState = remoteUserData.syncData ? JSON.parse(remoteUserData.syncData.content) : null;\n\t\tif (!remoteGlobalState) {\n\t\t\tthis.logService.info('Skipping initializing global state because remote global state does not exist.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst argv: IStringDictionary<any> = {};\n\t\tconst storage: IStringDictionary<any> = {};\n\t\tfor (const key of Object.keys(remoteGlobalState.storage)) {\n\t\t\tif (key.startsWith(argvStoragePrefx)) {\n\t\t\t\targv[key.substring(argvStoragePrefx.length)] = remoteGlobalState.storage[key].value;\n\t\t\t} else {\n\t\t\t\tif (this.storageService.get(key, StorageScope.PROFILE) === undefined) {\n\t\t\t\t\tstorage[key] = remoteGlobalState.storage[key].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(argv).length) {\n\t\t\tlet content = '{}';\n\t\t\ttry {\n\t\t\t\tconst fileContent = await this.fileService.readFile(this.environmentService.argvResource);\n\t\t\t\tcontent = fileContent.value.toString();\n\t\t\t} catch (error) { }\n\t\t\tfor (const argvProperty of Object.keys(argv)) {\n\t\t\t\tcontent = edit(content, [argvProperty], argv[argvProperty], {});\n\t\t\t}\n\t\t\tawait this.fileService.writeFile(this.environmentService.argvResource, VSBuffer.fromString(content));\n\t\t}\n\n\t\tif (Object.keys(storage).length) {\n\t\t\tconst storageEntries: Array<IStorageEntry> = [];\n\t\t\tfor (const key of Object.keys(storage)) {\n\t\t\t\tstorageEntries.push({ key, value: storage[key], scope: StorageScope.PROFILE, target: StorageTarget.USER });\n\t\t\t}\n\t\t\tthis.storageService.storeAll(storageEntries, true);\n\t\t}\n\t}\n\n}\n\nexport class UserDataSyncStoreTypeSynchronizer {\n\n\tconstructor(\n\t\tprivate readonly userDataSyncStoreClient: UserDataSyncStoreClient,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tgetSyncStoreType(userData: IUserData): UserDataSyncStoreType | undefined {\n\t\tconst remoteGlobalState = this.parseGlobalState(userData);\n\t\treturn remoteGlobalState?.storage[SYNC_SERVICE_URL_TYPE]?.value as UserDataSyncStoreType;\n\t}\n\n\tasync sync(userDataSyncStoreType: UserDataSyncStoreType): Promise<void> {\n\t\tconst syncHeaders = createSyncHeaders(generateUuid());\n\t\ttry {\n\t\t\treturn await this.doSync(userDataSyncStoreType, syncHeaders);\n\t\t} catch (e) {\n\t\t\tif (e instanceof UserDataSyncError) {\n\t\t\t\tswitch (e.code) {\n\t\t\t\t\tcase UserDataSyncErrorCode.PreconditionFailed:\n\t\t\t\t\t\tthis.logService.info(`Failed to synchronize UserDataSyncStoreType as there is a new remote version available. Synchronizing again...`);\n\t\t\t\t\t\treturn this.doSync(userDataSyncStoreType, syncHeaders);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate async doSync(userDataSyncStoreType: UserDataSyncStoreType, syncHeaders: IHeaders): Promise<void> {\n\t\t// Read the global state from remote\n\t\tconst globalStateUserData = await this.userDataSyncStoreClient.readResource(SyncResource.GlobalState, null, undefined, syncHeaders);\n\t\tconst remoteGlobalState = this.parseGlobalState(globalStateUserData) || { storage: {} };\n\n\t\t// Update the sync store type\n\t\tremoteGlobalState.storage[SYNC_SERVICE_URL_TYPE] = { value: userDataSyncStoreType, version: GLOBAL_STATE_DATA_VERSION };\n\n\t\t// Write the global state to remote\n\t\tconst machineId = await getServiceMachineId(this.environmentService, this.fileService, this.storageService);\n\t\tconst syncDataToUpdate: ISyncData = { version: GLOBAL_STATE_DATA_VERSION, machineId, content: stringify(remoteGlobalState, false) };\n\t\tawait this.userDataSyncStoreClient.writeResource(SyncResource.GlobalState, JSON.stringify(syncDataToUpdate), globalStateUserData.ref, undefined, syncHeaders);\n\t}\n\n\tprivate parseGlobalState({ content }: IUserData): IGlobalState | null {\n\t\tif (!content) {\n\t\t\treturn null;\n\t\t}\n\t\tconst syncData = JSON.parse(content);\n\t\tif (isSyncData(syncData)) {\n\t\t\treturn syncData ? JSON.parse(syncData.content) : null;\n\t\t}\n\t\tthrow new Error('Invalid remote data');\n\t}\n\n}\n"]}