{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/tunnel/node/tunnelService.ts"],"names":[],"mappings":"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","file":"tunnelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as net from 'net';\nimport * as os from 'os';\nimport { BROWSER_RESTRICTED_PORTS, findFreePortFaster } from 'vs/base/node/ports';\nimport { NodeSocket } from 'vs/base/parts/ipc/node/ipc.net';\n\nimport { Barrier } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { OS } from 'vs/base/common/platform';\nimport { ISocket } from 'vs/base/parts/ipc/common/ipc.net';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IAddressProvider, IConnectionOptions, connectRemoteAgentTunnel } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { IRemoteSocketFactoryService } from 'vs/platform/remote/common/remoteSocketFactoryService';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { AbstractTunnelService, ISharedTunnelsService, ITunnelProvider, ITunnelService, RemoteTunnel, TunnelPrivacyId, isAllInterfaces, isLocalhost, isPortPrivileged, isTunnelProvider } from 'vs/platform/tunnel/common/tunnel';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nasync function createRemoteTunnel(options: IConnectionOptions, defaultTunnelHost: string, tunnelRemoteHost: string, tunnelRemotePort: number, tunnelLocalPort?: number): Promise<RemoteTunnel> {\n\tlet readyTunnel: NodeRemoteTunnel | undefined;\n\tfor (let attempts = 3; attempts; attempts--) {\n\t\treadyTunnel?.dispose();\n\t\tconst tunnel = new NodeRemoteTunnel(options, defaultTunnelHost, tunnelRemoteHost, tunnelRemotePort, tunnelLocalPort);\n\t\treadyTunnel = await tunnel.waitForReady();\n\t\tif ((tunnelLocalPort && BROWSER_RESTRICTED_PORTS[tunnelLocalPort]) || !BROWSER_RESTRICTED_PORTS[readyTunnel.tunnelLocalPort]) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn readyTunnel!;\n}\n\nexport class NodeRemoteTunnel extends Disposable implements RemoteTunnel {\n\n\tpublic readonly tunnelRemotePort: number;\n\tpublic tunnelLocalPort!: number;\n\tpublic tunnelRemoteHost: string;\n\tpublic localAddress!: string;\n\tpublic readonly privacy = TunnelPrivacyId.Private;\n\n\tprivate readonly _options: IConnectionOptions;\n\tprivate readonly _server: net.Server;\n\tprivate readonly _barrier: Barrier;\n\n\tprivate readonly _listeningListener: () => void;\n\tprivate readonly _connectionListener: (socket: net.Socket) => void;\n\tprivate readonly _errorListener: () => void;\n\n\tprivate readonly _socketsDispose: Map<string, () => void> = new Map();\n\n\tconstructor(options: IConnectionOptions, private readonly defaultTunnelHost: string, tunnelRemoteHost: string, tunnelRemotePort: number, private readonly suggestedLocalPort?: number) {\n\t\tsuper();\n\t\tthis._options = options;\n\t\tthis._server = net.createServer();\n\t\tthis._barrier = new Barrier();\n\n\t\tthis._listeningListener = () => this._barrier.open();\n\t\tthis._server.on('listening', this._listeningListener);\n\n\t\tthis._connectionListener = (socket) => this._onConnection(socket);\n\t\tthis._server.on('connection', this._connectionListener);\n\n\t\t// If there is no error listener and there is an error it will crash the whole window\n\t\tthis._errorListener = () => { };\n\t\tthis._server.on('error', this._errorListener);\n\n\t\tthis.tunnelRemotePort = tunnelRemotePort;\n\t\tthis.tunnelRemoteHost = tunnelRemoteHost;\n\t}\n\n\tpublic override async dispose(): Promise<void> {\n\t\tsuper.dispose();\n\t\tthis._server.removeListener('listening', this._listeningListener);\n\t\tthis._server.removeListener('connection', this._connectionListener);\n\t\tthis._server.removeListener('error', this._errorListener);\n\t\tthis._server.close();\n\t\tconst disposers = Array.from(this._socketsDispose.values());\n\t\tdisposers.forEach(disposer => {\n\t\t\tdisposer();\n\t\t});\n\t}\n\n\tpublic async waitForReady(): Promise<this> {\n\t\tconst startPort = this.suggestedLocalPort ?? this.tunnelRemotePort;\n\t\tconst hostname = isAllInterfaces(this.defaultTunnelHost) ? '0.0.0.0' : '127.0.0.1';\n\t\t// try to get the same port number as the remote port number...\n\t\tlet localPort = await findFreePortFaster(startPort, 2, 1000, hostname);\n\n\t\t// if that fails, the method above returns 0, which works out fine below...\n\t\tlet address: string | net.AddressInfo | null = null;\n\t\tthis._server.listen(localPort, this.defaultTunnelHost);\n\t\tawait this._barrier.wait();\n\t\taddress = <net.AddressInfo>this._server.address();\n\n\t\t// It is possible for findFreePortFaster to return a port that there is already a server listening on. This causes the previous listen call to error out.\n\t\tif (!address) {\n\t\t\tlocalPort = 0;\n\t\t\tthis._server.listen(localPort, this.defaultTunnelHost);\n\t\t\tawait this._barrier.wait();\n\t\t\taddress = <net.AddressInfo>this._server.address();\n\t\t}\n\n\t\tthis.tunnelLocalPort = address.port;\n\t\tthis.localAddress = `${this.tunnelRemoteHost === '127.0.0.1' ? '127.0.0.1' : 'localhost'}:${address.port}`;\n\t\treturn this;\n\t}\n\n\tprivate async _onConnection(localSocket: net.Socket): Promise<void> {\n\t\t// pause reading on the socket until we have a chance to forward its data\n\t\tlocalSocket.pause();\n\n\t\tconst tunnelRemoteHost = (isLocalhost(this.tunnelRemoteHost) || isAllInterfaces(this.tunnelRemoteHost)) ? 'localhost' : this.tunnelRemoteHost;\n\t\tconst protocol = await connectRemoteAgentTunnel(this._options, tunnelRemoteHost, this.tunnelRemotePort);\n\t\tconst remoteSocket = protocol.getSocket();\n\t\tconst dataChunk = protocol.readEntireBuffer();\n\t\tprotocol.dispose();\n\n\t\tif (dataChunk.byteLength > 0) {\n\t\t\tlocalSocket.write(dataChunk.buffer);\n\t\t}\n\n\t\tlocalSocket.on('end', () => {\n\t\t\tif (localSocket.localAddress) {\n\t\t\t\tthis._socketsDispose.delete(localSocket.localAddress);\n\t\t\t}\n\t\t\tremoteSocket.end();\n\t\t});\n\t\tlocalSocket.on('close', () => remoteSocket.end());\n\t\tlocalSocket.on('error', () => {\n\t\t\tif (localSocket.localAddress) {\n\t\t\t\tthis._socketsDispose.delete(localSocket.localAddress);\n\t\t\t}\n\t\t\tif (remoteSocket instanceof NodeSocket) {\n\t\t\t\tremoteSocket.socket.destroy();\n\t\t\t} else {\n\t\t\t\tremoteSocket.end();\n\t\t\t}\n\t\t});\n\n\t\tif (remoteSocket instanceof NodeSocket) {\n\t\t\tthis._mirrorNodeSocket(localSocket, remoteSocket);\n\t\t} else {\n\t\t\tthis._mirrorGenericSocket(localSocket, remoteSocket);\n\t\t}\n\n\t\tif (localSocket.localAddress) {\n\t\t\tthis._socketsDispose.set(localSocket.localAddress, () => {\n\t\t\t\t// Need to end instead of unpipe, otherwise whatever is connected locally could end up \"stuck\" with whatever state it had until manually exited.\n\t\t\t\tlocalSocket.end();\n\t\t\t\tremoteSocket.end();\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _mirrorGenericSocket(localSocket: net.Socket, remoteSocket: ISocket) {\n\t\tremoteSocket.onClose(() => localSocket.destroy());\n\t\tremoteSocket.onEnd(() => localSocket.end());\n\t\tremoteSocket.onData(d => localSocket.write(d.buffer));\n\t\tlocalSocket.on('data', d => remoteSocket.write(VSBuffer.wrap(d)));\n\t\tlocalSocket.resume();\n\t}\n\n\tprivate _mirrorNodeSocket(localSocket: net.Socket, remoteNodeSocket: NodeSocket) {\n\t\tconst remoteSocket = remoteNodeSocket.socket;\n\t\tremoteSocket.on('end', () => localSocket.end());\n\t\tremoteSocket.on('close', () => localSocket.end());\n\t\tremoteSocket.on('error', () => {\n\t\t\tlocalSocket.destroy();\n\t\t});\n\n\t\tremoteSocket.pipe(localSocket);\n\t\tlocalSocket.pipe(remoteSocket);\n\t}\n}\n\nexport class BaseTunnelService extends AbstractTunnelService {\n\tpublic constructor(\n\t\t@IRemoteSocketFactoryService private readonly remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t\t@ILogService logService: ILogService,\n\t\t@ISignService private readonly signService: ISignService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(logService, configurationService);\n\t}\n\n\tpublic isPortPrivileged(port: number): boolean {\n\t\treturn isPortPrivileged(port, this.defaultTunnelHost, OS, os.release());\n\t}\n\n\tprotected retainOrCreateTunnel(addressOrTunnelProvider: IAddressProvider | ITunnelProvider, remoteHost: string, remotePort: number, localHost: string, localPort: number | undefined, elevateIfNeeded: boolean, privacy?: string, protocol?: string): Promise<RemoteTunnel | string | undefined> | undefined {\n\t\tconst existing = this.getTunnelFromMap(remoteHost, remotePort);\n\t\tif (existing) {\n\t\t\t++existing.refcount;\n\t\t\treturn existing.value;\n\t\t}\n\n\t\tif (isTunnelProvider(addressOrTunnelProvider)) {\n\t\t\treturn this.createWithProvider(addressOrTunnelProvider, remoteHost, remotePort, localPort, elevateIfNeeded, privacy, protocol);\n\t\t} else {\n\t\t\tthis.logService.trace(`ForwardedPorts: (TunnelService) Creating tunnel without provider ${remoteHost}:${remotePort} on local port ${localPort}.`);\n\t\t\tconst options: IConnectionOptions = {\n\t\t\t\tcommit: this.productService.commit,\n\t\t\t\tquality: this.productService.quality,\n\t\t\t\taddressProvider: addressOrTunnelProvider,\n\t\t\t\tremoteSocketFactoryService: this.remoteSocketFactoryService,\n\t\t\t\tsignService: this.signService,\n\t\t\t\tlogService: this.logService,\n\t\t\t\tipcLogger: null\n\t\t\t};\n\n\t\t\tconst tunnel = createRemoteTunnel(options, localHost, remoteHost, remotePort, localPort);\n\t\t\tthis.logService.trace('ForwardedPorts: (TunnelService) Tunnel created without provider.');\n\t\t\tthis.addTunnelToMap(remoteHost, remotePort, tunnel);\n\t\t\treturn tunnel;\n\t\t}\n\t}\n}\n\nexport class TunnelService extends BaseTunnelService {\n\tpublic constructor(\n\t\t@IRemoteSocketFactoryService remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t\t@ILogService logService: ILogService,\n\t\t@ISignService signService: ISignService,\n\t\t@IProductService productService: IProductService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(remoteSocketFactoryService, logService, signService, productService, configurationService);\n\t}\n}\n\nexport class SharedTunnelsService extends Disposable implements ISharedTunnelsService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate readonly _tunnelServices: Map<string, ITunnelService> = new Map();\n\n\tpublic constructor(\n\t\t@IRemoteSocketFactoryService protected readonly remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ISignService private readonly signService: ISignService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync openTunnel(authority: string, addressProvider: IAddressProvider | undefined, remoteHost: string | undefined, remotePort: number, localHost: string, localPort?: number, elevateIfNeeded?: boolean, privacy?: string, protocol?: string): Promise<RemoteTunnel | string | undefined> {\n\t\tthis.logService.trace(`ForwardedPorts: (SharedTunnelService) openTunnel request for ${remoteHost}:${remotePort} on local port ${localPort}.`);\n\t\tif (!this._tunnelServices.has(authority)) {\n\t\t\tconst tunnelService = new TunnelService(this.remoteSocketFactoryService, this.logService, this.signService, this.productService, this.configurationService);\n\t\t\tthis._register(tunnelService);\n\t\t\tthis._tunnelServices.set(authority, tunnelService);\n\t\t\ttunnelService.onTunnelClosed(async () => {\n\t\t\t\tif ((await tunnelService.tunnels).length === 0) {\n\t\t\t\t\ttunnelService.dispose();\n\t\t\t\t\tthis._tunnelServices.delete(authority);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this._tunnelServices.get(authority)!.openTunnel(addressProvider, remoteHost, remotePort, localHost, localPort, elevateIfNeeded, privacy, protocol);\n\t}\n}\n"]}