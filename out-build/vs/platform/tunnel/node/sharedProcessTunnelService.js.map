{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/tunnel/node/sharedProcessTunnelService.ts"],"names":[],"mappings":"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","file":"sharedProcessTunnelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ISharedProcessTunnel, ISharedProcessTunnelService } from 'vs/platform/remote/common/sharedProcessTunnelService';\nimport { ISharedTunnelsService, RemoteTunnel } from 'vs/platform/tunnel/common/tunnel';\nimport { IAddress, IAddressProvider } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { canceled } from 'vs/base/common/errors';\nimport { DeferredPromise } from 'vs/base/common/async';\n\nclass TunnelData extends Disposable implements IAddressProvider {\n\n\tprivate _address: IAddress | null;\n\tprivate _addressPromise: DeferredPromise<IAddress> | null;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._address = null;\n\t\tthis._addressPromise = null;\n\t}\n\n\tasync getAddress(): Promise<IAddress> {\n\t\tif (this._address) {\n\t\t\t// address is resolved\n\t\t\treturn this._address;\n\t\t}\n\t\tif (!this._addressPromise) {\n\t\t\tthis._addressPromise = new DeferredPromise<IAddress>();\n\t\t}\n\t\treturn this._addressPromise.p;\n\t}\n\n\tsetAddress(address: IAddress): void {\n\t\tthis._address = address;\n\t\tif (this._addressPromise) {\n\t\t\tthis._addressPromise.complete(address);\n\t\t\tthis._addressPromise = null;\n\t\t}\n\t}\n\n\tsetTunnel(tunnel: RemoteTunnel): void {\n\t\tthis._register(tunnel);\n\t}\n}\n\nexport class SharedProcessTunnelService extends Disposable implements ISharedProcessTunnelService {\n\t_serviceBrand: undefined;\n\n\tprivate static _lastId = 0;\n\n\tprivate readonly _tunnels: Map<string, TunnelData> = new Map<string, TunnelData>();\n\tprivate readonly _disposedTunnels: Set<string> = new Set<string>();\n\n\tconstructor(\n\t\t@ISharedTunnelsService private readonly _tunnelService: ISharedTunnelsService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._tunnels.forEach((tunnel) => tunnel.dispose());\n\t}\n\n\tasync createTunnel(): Promise<{ id: string }> {\n\t\tconst id = String(++SharedProcessTunnelService._lastId);\n\t\treturn { id };\n\t}\n\n\tasync startTunnel(authority: string, id: string, tunnelRemoteHost: string, tunnelRemotePort: number, tunnelLocalHost: string, tunnelLocalPort: number | undefined, elevateIfNeeded: boolean | undefined): Promise<ISharedProcessTunnel> {\n\t\tconst tunnelData = new TunnelData();\n\n\t\tconst tunnel = await Promise.resolve(this._tunnelService.openTunnel(authority, tunnelData, tunnelRemoteHost, tunnelRemotePort, tunnelLocalHost, tunnelLocalPort, elevateIfNeeded));\n\t\tif (!tunnel || (typeof tunnel === 'string')) {\n\t\t\tthis._logService.info(`[SharedProcessTunnelService] Could not create a tunnel to ${tunnelRemoteHost}:${tunnelRemotePort} (remote).`);\n\t\t\ttunnelData.dispose();\n\t\t\tthrow new Error(`Could not create tunnel`);\n\t\t}\n\n\t\tif (this._disposedTunnels.has(id)) {\n\t\t\t// This tunnel was disposed in the meantime\n\t\t\tthis._disposedTunnels.delete(id);\n\t\t\ttunnelData.dispose();\n\t\t\tawait tunnel.dispose();\n\t\t\tthrow canceled();\n\t\t}\n\n\t\ttunnelData.setTunnel(tunnel);\n\t\tthis._tunnels.set(id, tunnelData);\n\n\t\tthis._logService.info(`[SharedProcessTunnelService] Created tunnel ${id}: ${tunnel.localAddress} (local) to ${tunnelRemoteHost}:${tunnelRemotePort} (remote).`);\n\t\tconst result: ISharedProcessTunnel = {\n\t\t\ttunnelLocalPort: tunnel.tunnelLocalPort,\n\t\t\tlocalAddress: tunnel.localAddress\n\t\t};\n\t\treturn result;\n\t}\n\n\tasync setAddress(id: string, address: IAddress): Promise<void> {\n\t\tconst tunnel = this._tunnels.get(id);\n\t\tif (!tunnel) {\n\t\t\treturn;\n\t\t}\n\t\ttunnel.setAddress(address);\n\t}\n\n\tasync destroyTunnel(id: string): Promise<void> {\n\t\tconst tunnel = this._tunnels.get(id);\n\t\tif (tunnel) {\n\t\t\tthis._logService.info(`[SharedProcessTunnelService] Disposing tunnel ${id}.`);\n\t\t\tthis._tunnels.delete(id);\n\t\t\tawait tunnel.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\t// Looks like this tunnel is still starting, mark the id as disposed\n\t\tthis._disposedTunnels.add(id);\n\t}\n}\n"]}