{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/log/common/fileLog.ts"],"names":[],"mappings":"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","file":"fileLog.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { basename, dirname, joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { ByteSize, FileOperationError, FileOperationResult, IFileService, whenProviderRegistered } from 'vs/platform/files/common/files';\nimport { BufferLogger } from 'vs/platform/log/common/bufferLog';\nimport { AbstractLoggerService, AbstractMessageLogger, ILogger, ILoggerOptions, ILoggerService, LogLevel } from 'vs/platform/log/common/log';\n\nconst MAX_FILE_SIZE = 5 * ByteSize.MB;\n\nclass FileLogger extends AbstractMessageLogger implements ILogger {\n\n\tprivate readonly initializePromise: Promise<void>;\n\tprivate readonly flushDelayer: ThrottledDelayer<void>;\n\tprivate backupIndex: number = 1;\n\tprivate buffer: string = '';\n\n\tconstructor(\n\t\tprivate readonly resource: URI,\n\t\tlevel: LogLevel,\n\t\tprivate readonly donotUseFormatters: boolean,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\t\tthis.setLevel(level);\n\t\tthis.flushDelayer = new ThrottledDelayer<void>(100 /* buffer saves over a short time */);\n\t\tthis.initializePromise = this.initialize();\n\t}\n\n\toverride async flush(): Promise<void> {\n\t\tif (!this.buffer) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.initializePromise;\n\t\tlet content = await this.loadContent();\n\t\tif (content.length > MAX_FILE_SIZE) {\n\t\t\tawait this.fileService.writeFile(this.getBackupResource(), VSBuffer.fromString(content));\n\t\t\tcontent = '';\n\t\t}\n\t\tif (this.buffer) {\n\t\t\tcontent += this.buffer;\n\t\t\tthis.buffer = '';\n\t\t\tawait this.fileService.writeFile(this.resource, VSBuffer.fromString(content));\n\t\t}\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.createFile(this.resource);\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_MODIFIED_SINCE) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected log(level: LogLevel, message: string): void {\n\t\tif (this.donotUseFormatters) {\n\t\t\tthis.buffer += message;\n\t\t} else {\n\t\t\tthis.buffer += `${this.getCurrentTimestamp()} [${this.stringifyLogLevel(level)}] ${message}\\n`;\n\t\t}\n\t\tthis.flushDelayer.trigger(() => this.flush());\n\t}\n\n\tprivate getCurrentTimestamp(): string {\n\t\tconst toTwoDigits = (v: number) => v < 10 ? `0${v}` : v;\n\t\tconst toThreeDigits = (v: number) => v < 10 ? `00${v}` : v < 100 ? `0${v}` : v;\n\t\tconst currentTime = new Date();\n\t\treturn `${currentTime.getFullYear()}-${toTwoDigits(currentTime.getMonth() + 1)}-${toTwoDigits(currentTime.getDate())} ${toTwoDigits(currentTime.getHours())}:${toTwoDigits(currentTime.getMinutes())}:${toTwoDigits(currentTime.getSeconds())}.${toThreeDigits(currentTime.getMilliseconds())}`;\n\t}\n\n\tprivate getBackupResource(): URI {\n\t\tthis.backupIndex = this.backupIndex > 5 ? 1 : this.backupIndex;\n\t\treturn joinPath(dirname(this.resource), `${basename(this.resource)}_${this.backupIndex++}`);\n\t}\n\n\tprivate async loadContent(): Promise<string> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.resource);\n\t\t\treturn content.value.toString();\n\t\t} catch (e) {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tprivate stringifyLogLevel(level: LogLevel): string {\n\t\tswitch (level) {\n\t\t\tcase LogLevel.Debug: return 'debug';\n\t\t\tcase LogLevel.Error: return 'error';\n\t\t\tcase LogLevel.Info: return 'info';\n\t\t\tcase LogLevel.Trace: return 'trace';\n\t\t\tcase LogLevel.Warning: return 'warning';\n\t\t}\n\t\treturn '';\n\t}\n\n}\n\nexport class FileLoggerService extends AbstractLoggerService implements ILoggerService {\n\n\tconstructor(\n\t\tlogLevel: LogLevel,\n\t\tlogsHome: URI,\n\t\tprivate readonly fileService: IFileService,\n\t) {\n\t\tsuper(logLevel, logsHome);\n\t}\n\n\tprotected doCreateLogger(resource: URI, logLevel: LogLevel, options?: ILoggerOptions): ILogger {\n\t\tconst logger = new BufferLogger(logLevel);\n\t\twhenProviderRegistered(resource, this.fileService).then(() => logger.logger = new FileLogger(resource, logger.getLevel(), !!options?.donotUseFormatters, this.fileService));\n\t\treturn logger;\n\t}\n}\n"]}