{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/log/common/logIpc.ts"],"names":[],"mappings":"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","file":"logIpc.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { AbstractLoggerService, AbstractMessageLogger, AdapterLogger, DidChangeLoggersEvent, ILogger, ILoggerOptions, ILoggerResource, ILoggerService, isLogLevel, LogLevel } from 'vs/platform/log/common/log';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IURITransformer } from 'vs/base/common/uriIpc';\n\nexport class LoggerChannelClient extends AbstractLoggerService implements ILoggerService {\n\n\tconstructor(private readonly windowId: number | undefined, logLevel: LogLevel, logsHome: URI, loggers: ILoggerResource[], private readonly channel: IChannel) {\n\t\tsuper(logLevel, logsHome, loggers);\n\t\tthis._register(channel.listen<LogLevel | [URI, LogLevel]>('onDidChangeLogLevel', windowId)(arg => {\n\t\t\tif (isLogLevel(arg)) {\n\t\t\t\tsuper.setLogLevel(arg);\n\t\t\t} else {\n\t\t\t\tsuper.setLogLevel(URI.revive(arg[0]), arg[1]);\n\t\t\t}\n\t\t}));\n\t\tthis._register(channel.listen<[URI, boolean]>('onDidChangeVisibility', windowId)(([resource, visibility]) => super.setVisibility(URI.revive(resource), visibility)));\n\t\tthis._register(channel.listen<DidChangeLoggersEvent>('onDidChangeLoggers', windowId)(({ added, removed }) => {\n\t\t\tfor (const loggerResource of added) {\n\t\t\t\tsuper.registerLogger({ ...loggerResource, resource: URI.revive(loggerResource.resource) });\n\t\t\t}\n\t\t\tfor (const loggerResource of removed) {\n\t\t\t\tsuper.deregisterLogger(loggerResource.resource);\n\t\t\t}\n\t\t}));\n\t}\n\n\tcreateConsoleMainLogger(): ILogger {\n\t\treturn new AdapterLogger({\n\t\t\tlog: (level: LogLevel, args: any[]) => {\n\t\t\t\tthis.channel.call('consoleLog', [level, args]);\n\t\t\t}\n\t\t});\n\t}\n\n\toverride registerLogger(logger: ILoggerResource): void {\n\t\tsuper.registerLogger(logger);\n\t\tthis.channel.call('registerLogger', [logger, this.windowId]);\n\t}\n\n\toverride deregisterLogger(resource: URI): void {\n\t\tsuper.deregisterLogger(resource);\n\t\tthis.channel.call('deregisterLogger', [resource, this.windowId]);\n\t}\n\n\toverride setLogLevel(logLevel: LogLevel): void;\n\toverride setLogLevel(resource: URI, logLevel: LogLevel): void;\n\toverride setLogLevel(arg1: any, arg2?: any): void {\n\t\tsuper.setLogLevel(arg1, arg2);\n\t\tthis.channel.call('setLogLevel', [arg1, arg2]);\n\t}\n\n\toverride setVisibility(resourceOrId: URI | string, visibility: boolean): void {\n\t\tsuper.setVisibility(resourceOrId, visibility);\n\t\tthis.channel.call('setVisibility', [this.toResource(resourceOrId), visibility]);\n\t}\n\n\tprotected doCreateLogger(file: URI, logLevel: LogLevel, options?: ILoggerOptions): ILogger {\n\t\treturn new Logger(this.channel, file, logLevel, options, this.windowId);\n\t}\n\n\tpublic static setLogLevel(channel: IChannel, level: LogLevel): Promise<void>;\n\tpublic static setLogLevel(channel: IChannel, resource: URI, level: LogLevel): Promise<void>;\n\tpublic static setLogLevel(channel: IChannel, arg1: any, arg2?: any): Promise<void> {\n\t\treturn channel.call('setLogLevel', [arg1, arg2]);\n\t}\n\n}\n\nclass Logger extends AbstractMessageLogger {\n\n\tprivate isLoggerCreated: boolean = false;\n\tprivate buffer: [LogLevel, string][] = [];\n\n\tconstructor(\n\t\tprivate readonly channel: IChannel,\n\t\tprivate readonly file: URI,\n\t\tlogLevel: LogLevel,\n\t\tloggerOptions?: ILoggerOptions,\n\t\twindowId?: number | undefined\n\t) {\n\t\tsuper(loggerOptions?.logLevel === 'always');\n\t\tthis.setLevel(logLevel);\n\t\tthis.channel.call('createLogger', [file, loggerOptions, windowId])\n\t\t\t.then(() => {\n\t\t\t\tthis.doLog(this.buffer);\n\t\t\t\tthis.isLoggerCreated = true;\n\t\t\t});\n\t}\n\n\tprotected log(level: LogLevel, message: string) {\n\t\tconst messages: [LogLevel, string][] = [[level, message]];\n\t\tif (this.isLoggerCreated) {\n\t\t\tthis.doLog(messages);\n\t\t} else {\n\t\t\tthis.buffer.push(...messages);\n\t\t}\n\t}\n\n\tprivate doLog(messages: [LogLevel, string][]) {\n\t\tthis.channel.call('log', [this.file, messages]);\n\t}\n}\n\nexport class LoggerChannel implements IServerChannel {\n\n\tconstructor(private readonly loggerService: ILoggerService, private getUriTransformer: (requestContext: any) => IURITransformer) { }\n\n\tlisten(context: any, event: string): Event<any> {\n\t\tconst uriTransformer = this.getUriTransformer(context);\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeLoggers': return Event.map<DidChangeLoggersEvent, DidChangeLoggersEvent>(this.loggerService.onDidChangeLoggers, (e) =>\n\t\t\t({\n\t\t\t\tadded: [...e.added].map(logger => this.transformLogger(logger, uriTransformer)),\n\t\t\t\tremoved: [...e.removed].map(logger => this.transformLogger(logger, uriTransformer)),\n\t\t\t}));\n\t\t\tcase 'onDidChangeVisibility': return Event.map<[URI, boolean], [URI, boolean]>(this.loggerService.onDidChangeVisibility, e => [uriTransformer.transformOutgoingURI(e[0]), e[1]]);\n\t\t\tcase 'onDidChangeLogLevel': return Event.map<LogLevel | [URI, LogLevel], LogLevel | [URI, LogLevel]>(this.loggerService.onDidChangeLogLevel, e => isLogLevel(e) ? e : [uriTransformer.transformOutgoingURI(e[0]), e[1]]);\n\t\t}\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tasync call(context: any, command: string, arg?: any): Promise<any> {\n\t\tconst uriTransformer: IURITransformer | null = this.getUriTransformer(context);\n\t\tswitch (command) {\n\t\t\tcase 'setLogLevel': return isLogLevel(arg[0]) ? this.loggerService.setLogLevel(arg[0]) : this.loggerService.setLogLevel(URI.revive(uriTransformer.transformIncoming(arg[0][0])), arg[0][1]);\n\t\t\tcase 'getRegisteredLoggers': return Promise.resolve([...this.loggerService.getRegisteredLoggers()].map(logger => this.transformLogger(logger, uriTransformer)));\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n\tprivate transformLogger(logger: ILoggerResource, transformer: IURITransformer): ILoggerResource {\n\t\treturn {\n\t\t\t...logger,\n\t\t\tresource: transformer.transformOutgoingURI(logger.resource)\n\t\t};\n\t}\n\n}\n\nexport class RemoteLoggerChannelClient extends Disposable {\n\n\tconstructor(loggerService: ILoggerService, channel: IChannel) {\n\t\tsuper();\n\n\t\tchannel.call('setLogLevel', [loggerService.getLogLevel()]);\n\t\tthis._register(loggerService.onDidChangeLogLevel(arg => channel.call('setLogLevel', [arg])));\n\n\t\tchannel.call<ILoggerResource[]>('getRegisteredLoggers').then(loggers => {\n\t\t\tfor (const loggerResource of loggers) {\n\t\t\t\tloggerService.registerLogger({ ...loggerResource, resource: URI.revive(loggerResource.resource) });\n\t\t\t}\n\t\t});\n\n\t\tthis._register(channel.listen<[URI, boolean]>('onDidChangeVisibility')(([resource, visibility]) => loggerService.setVisibility(URI.revive(resource), visibility)));\n\n\t\tthis._register(channel.listen<DidChangeLoggersEvent>('onDidChangeLoggers')(({ added, removed }) => {\n\t\t\tfor (const loggerResource of added) {\n\t\t\t\tloggerService.registerLogger({ ...loggerResource, resource: URI.revive(loggerResource.resource) });\n\t\t\t}\n\t\t\tfor (const loggerResource of removed) {\n\t\t\t\tloggerService.deregisterLogger(loggerResource.resource);\n\t\t\t}\n\t\t}));\n\n\t}\n}\n"]}