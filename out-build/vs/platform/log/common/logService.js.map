{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/log/common/logService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,GAAW,SAAQ,eAAG;QAMlC,YAAY,aAAsB,EAAE,eAA0B,EAAE;YAC/D,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,CAAC,GAAQ,IAAI,SAAG,CAAa,CAAC,aAAa,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC;YACpE,IAAI,CAAC,CAAC,CAAS,aAAa,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAClF,CAAC;QAED,IAAI,mBAAmB;YACtB,OAAO,IAAI,CAAC,CAAC,CAAM,mBAAmB,CAAC;QACxC,CAAC;QAED,QAAQ,CAAC,KAAe;YACvB,IAAI,CAAC,CAAC,CAAM,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QAED,QAAQ;YACP,OAAO,IAAI,CAAC,CAAC,CAAM,QAAQ,EAAE,CAAC;QAC/B,CAAC;QAED,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;YACpC,IAAI,CAAC,CAAC,CAAM,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACrC,CAAC;QAED,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;YACpC,IAAI,CAAC,CAAC,CAAM,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACrC,CAAC;QAED,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW;YACnC,IAAI,CAAC,CAAC,CAAM,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACpC,CAAC;QAED,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW;YACnC,IAAI,CAAC,CAAC,CAAM,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACpC,CAAC;QAED,KAAK,CAAC,OAAuB,EAAE,GAAG,IAAW;YAC5C,IAAI,CAAC,CAAC,CAAM,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACrC,CAAC;QAED,KAAK;YACJ,IAAI,CAAC,CAAC,CAAM,KAAK,EAAE,CAAC;QACrB,CAAC;KACD;IA/CD,kBA+CC","file":"logService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { ILogger, ILogService, LogLevel, MultiplexLogger } from 'vs/platform/log/common/log';\n\nexport class LogService extends Disposable implements ILogService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly logger: ILogger;\n\n\tconstructor(primaryLogger: ILogger, otherLoggers: ILogger[] = []) {\n\t\tsuper();\n\t\tthis.logger = new MultiplexLogger([primaryLogger, ...otherLoggers]);\n\t\tthis._register(primaryLogger.onDidChangeLogLevel(level => this.setLevel(level)));\n\t}\n\n\tget onDidChangeLogLevel(): Event<LogLevel> {\n\t\treturn this.logger.onDidChangeLogLevel;\n\t}\n\n\tsetLevel(level: LogLevel): void {\n\t\tthis.logger.setLevel(level);\n\t}\n\n\tgetLevel(): LogLevel {\n\t\treturn this.logger.getLevel();\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tthis.logger.trace(message, ...args);\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tthis.logger.debug(message, ...args);\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tthis.logger.info(message, ...args);\n\t}\n\n\twarn(message: string, ...args: any[]): void {\n\t\tthis.logger.warn(message, ...args);\n\t}\n\n\terror(message: string | Error, ...args: any[]): void {\n\t\tthis.logger.error(message, ...args);\n\t}\n\n\tflush(): void {\n\t\tthis.logger.flush();\n\t}\n}\n"]}