{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/log/common/bufferLog.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAa,SAAQ,SAAG;QAMpC,YAAY,WAAqB,SAAG;YACnC,KAAK,EAAE,CAAC;YAJD,MAAC,GAAgB,EAAE,CAAC;YACpB,MAAC,GAA8B,SAAS,CAAC;YAIhD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACxB,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE;gBAC/C,IAAI,CAAC,CAAC,EAAQ,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,IAAI,MAAM,CAAC,MAAe;YACzB,IAAI,CAAC,CAAC,GAAS,MAAM,CAAC;YAEtB,KAAK,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,IAAI,CAAC,CAAC,EAAO;gBAC7C,IAAA,SAAG,EAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;aAC5B;YAED,IAAI,CAAC,CAAC,GAAQ,EAAE,CAAC;QAClB,CAAC;QAES,CAAC,CAAG,KAAe,EAAE,OAAe;YAC7C,IAAI,IAAI,CAAC,CAAC,EAAQ;gBACjB,IAAA,SAAG,EAAC,IAAI,CAAC,CAAC,EAAQ,KAAK,EAAE,OAAO,CAAC,CAAC;aAClC;iBAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,KAAK,EAAE;gBACpC,IAAI,CAAC,CAAC,CAAM,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;aACrC;QACF,CAAC;QAEQ,OAAO;YACf,IAAI,CAAC,CAAC,EAAQ,OAAO,EAAE,CAAC;QACzB,CAAC;QAEQ,KAAK;YACb,IAAI,CAAC,CAAC,EAAQ,KAAK,EAAE,CAAC;QACvB,CAAC;KACD;IAvCD,oBAuCC","file":"bufferLog.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AbstractMessageLogger, DEFAULT_LOG_LEVEL, ILogger, log, LogLevel } from 'vs/platform/log/common/log';\n\ninterface ILog {\n\tlevel: LogLevel;\n\tmessage: string;\n}\n\nexport class BufferLogger extends AbstractMessageLogger {\n\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate buffer: ILog[] = [];\n\tprivate _logger: ILogger | undefined = undefined;\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper();\n\t\tthis.setLevel(logLevel);\n\t\tthis._register(this.onDidChangeLogLevel(level => {\n\t\t\tthis._logger?.setLevel(level);\n\t\t}));\n\t}\n\n\tset logger(logger: ILogger) {\n\t\tthis._logger = logger;\n\n\t\tfor (const { level, message } of this.buffer) {\n\t\t\tlog(logger, level, message);\n\t\t}\n\n\t\tthis.buffer = [];\n\t}\n\n\tprotected log(level: LogLevel, message: string): void {\n\t\tif (this._logger) {\n\t\t\tlog(this._logger, level, message);\n\t\t} else if (this.getLevel() <= level) {\n\t\t\tthis.buffer.push({ level, message });\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis._logger?.dispose();\n\t}\n\n\toverride flush(): void {\n\t\tthis._logger?.flush();\n\t}\n}\n"]}