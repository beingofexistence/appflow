{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/log/node/spdlogLog.ts"],"names":[],"mappings":"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","file":"spdlogLog.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as spdlog from '@vscode/spdlog';\nimport { ByteSize } from 'vs/platform/files/common/files';\nimport { AbstractMessageLogger, ILogger, LogLevel } from 'vs/platform/log/common/log';\n\nenum SpdLogLevel {\n\tTrace,\n\tDebug,\n\tInfo,\n\tWarning,\n\tError,\n\tCritical,\n\tOff\n}\n\nasync function createSpdLogLogger(name: string, logfilePath: string, filesize: number, filecount: number, donotUseFormatters: boolean): Promise<spdlog.Logger | null> {\n\t// Do not crash if spdlog cannot be loaded\n\ttry {\n\t\tconst _spdlog = await import('@vscode/spdlog');\n\t\t_spdlog.setFlushOn(SpdLogLevel.Trace);\n\t\tconst logger = await _spdlog.createAsyncRotatingLogger(name, logfilePath, filesize, filecount);\n\t\tif (donotUseFormatters) {\n\t\t\tlogger.clearFormatters();\n\t\t} else {\n\t\t\tlogger.setPattern('%Y-%m-%d %H:%M:%S.%e [%l] %v');\n\t\t}\n\t\treturn logger;\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n\treturn null;\n}\n\ninterface ILog {\n\tlevel: LogLevel;\n\tmessage: string;\n}\n\nfunction log(logger: spdlog.Logger, level: LogLevel, message: string): void {\n\tswitch (level) {\n\t\tcase LogLevel.Trace: logger.trace(message); break;\n\t\tcase LogLevel.Debug: logger.debug(message); break;\n\t\tcase LogLevel.Info: logger.info(message); break;\n\t\tcase LogLevel.Warning: logger.warn(message); break;\n\t\tcase LogLevel.Error: logger.error(message); break;\n\t\tcase LogLevel.Off: /* do nothing */ break;\n\t\tdefault: throw new Error(`Invalid log level ${level}`);\n\t}\n}\n\nfunction setLogLevel(logger: spdlog.Logger, level: LogLevel): void {\n\tswitch (level) {\n\t\tcase LogLevel.Trace: logger.setLevel(SpdLogLevel.Trace); break;\n\t\tcase LogLevel.Debug: logger.setLevel(SpdLogLevel.Debug); break;\n\t\tcase LogLevel.Info: logger.setLevel(SpdLogLevel.Info); break;\n\t\tcase LogLevel.Warning: logger.setLevel(SpdLogLevel.Warning); break;\n\t\tcase LogLevel.Error: logger.setLevel(SpdLogLevel.Error); break;\n\t\tcase LogLevel.Off: logger.setLevel(SpdLogLevel.Off); break;\n\t\tdefault: throw new Error(`Invalid log level ${level}`);\n\t}\n}\n\nexport class SpdLogLogger extends AbstractMessageLogger implements ILogger {\n\n\tprivate buffer: ILog[] = [];\n\tprivate readonly _loggerCreationPromise: Promise<void>;\n\tprivate _logger: spdlog.Logger | undefined;\n\n\tconstructor(\n\t\tname: string,\n\t\tfilepath: string,\n\t\trotating: boolean,\n\t\tdonotUseFormatters: boolean,\n\t\tlevel: LogLevel,\n\t) {\n\t\tsuper();\n\t\tthis.setLevel(level);\n\t\tthis._loggerCreationPromise = this._createSpdLogLogger(name, filepath, rotating, donotUseFormatters);\n\t\tthis._register(this.onDidChangeLogLevel(level => {\n\t\t\tif (this._logger) {\n\t\t\t\tsetLogLevel(this._logger, level);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async _createSpdLogLogger(name: string, filepath: string, rotating: boolean, donotUseFormatters: boolean): Promise<void> {\n\t\tconst filecount = rotating ? 6 : 1;\n\t\tconst filesize = (30 / filecount) * ByteSize.MB;\n\t\tconst logger = await createSpdLogLogger(name, filepath, filesize, filecount, donotUseFormatters);\n\t\tif (logger) {\n\t\t\tthis._logger = logger;\n\t\t\tsetLogLevel(this._logger, this.getLevel());\n\t\t\tfor (const { level, message } of this.buffer) {\n\t\t\t\tlog(this._logger, level, message);\n\t\t\t}\n\t\t\tthis.buffer = [];\n\t\t}\n\t}\n\n\tprotected log(level: LogLevel, message: string): void {\n\t\tif (this._logger) {\n\t\t\tlog(this._logger, level, message);\n\t\t} else if (this.getLevel() <= level) {\n\t\t\tthis.buffer.push({ level, message });\n\t\t}\n\t}\n\n\toverride flush(): void {\n\t\tif (this._logger) {\n\t\t\tthis._logger.flush();\n\t\t} else {\n\t\t\tthis._loggerCreationPromise.then(() => this.flush());\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tif (this._logger) {\n\t\t\tthis.disposeLogger();\n\t\t} else {\n\t\t\tthis._loggerCreationPromise.then(() => this.disposeLogger());\n\t\t}\n\t}\n\n\tprivate disposeLogger(): void {\n\t\tif (this._logger) {\n\t\t\tthis._logger.drop();\n\t\t\tthis._logger = undefined;\n\t\t}\n\t}\n}\n"]}