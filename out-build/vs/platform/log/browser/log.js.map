{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/log/browser/log.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAkBhG;;;;OAIG;IACI,KAAK,UAAU,IAAI,CAAI,WAAgB,EAAW,kBAAuB;QAC/E,MAAM,MAAM,GAAe,EAAE,CAAC;QAE9B,MAAM,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE,kBAAkB,CAAC,QAAQ,EAAE,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAE/F,OAAO,MAAM,CAAC;IACf,CAAC;IAND,oBAMC;IAED,KAAK,UAAU,SAAS,CAAC,WAAgB,EAAW,IAAgB,EAAE,SAAc,EAAE,QAAa;QAClG,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAElD,KAAK,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,EAAE;YAC5D,IAAI,WAAW,EAAE;gBAChB,MAAM,SAAS,CAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;aACvD;iBAAM;gBACN,MAAM,QAAQ,GAAG,CAAC,MAAM,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACzE,IAAI,QAAQ,EAAE;oBACb,MAAM,IAAI,GAAG,IAAA,eAAG,EAAU,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBAC9C,IAAI,IAAI,EAAE;wBACT,IAAI,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;qBAC5C;iBACD;aACD;SACD;IACF,CAAC;IAED,SAAS,gBAAgB,CAAC,KAAe;QACxC,QAAQ,KAAK,EAAE;YACd,KAAK,cAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,OAAO,CAAC;YACpC,KAAK,cAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,OAAO,CAAC;YACpC,KAAK,cAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,MAAM,CAAC;YAClC,KAAK,cAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,MAAM,CAAC;YACrC,KAAK,cAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,OAAO,CAAC;SACpC;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAED;;;;OAIG;IACH,MAAa,IAA6B,SAAQ,SAAG;QAIpD,YAAY,WAAqB,SAAG;YACnC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAU,gBAAgB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC3F,CAAC;QAEO,CAAC,CAAU,IAAY,EAAE,IAAW;YAC3C,MAAM,eAAe,GAAG,MAAqC,CAAC;YAC9D,IAAI,OAAO,eAAe,CAAC,iBAAiB,KAAK,UAAU,EAAE;gBAC5D,IAAI;oBACH,eAAe,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;iBAC9C;gBAAC,OAAO,GAAG,EAAE;oBACb,6DAA6D;oBAC7D,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,GAAG,CAAC,CAAC;iBAC5D;aACD;QACF,CAAC;KACD;IAnBD,oBAmBC","file":"log.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { relativePath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { AdapterLogger, DEFAULT_LOG_LEVEL, ILogger, LogLevel } from 'vs/platform/log/common/log';\n\nexport interface IAutomatedWindow {\n\tcodeAutomationLog(type: string, args: any[]): void;\n\tcodeAutomationExit(code: number, logs: Array<ILogFile>): void;\n}\n\nexport interface ILogFile {\n\treadonly relativePath: string;\n\treadonly contents: string;\n}\n\n/**\n * Only used in browser contexts where the log files are not stored on disk\n * but in IndexedDB. A method to get all logs with their contents so that\n * CI automation can persist them.\n */\nexport async function getLogs(fileService: IFileService, environmentService: IEnvironmentService): Promise<ILogFile[]> {\n\tconst result: ILogFile[] = [];\n\n\tawait doGetLogs(fileService, result, environmentService.logsHome, environmentService.logsHome);\n\n\treturn result;\n}\n\nasync function doGetLogs(fileService: IFileService, logs: ILogFile[], curFolder: URI, logsHome: URI): Promise<void> {\n\tconst stat = await fileService.resolve(curFolder);\n\n\tfor (const { resource, isDirectory } of stat.children || []) {\n\t\tif (isDirectory) {\n\t\t\tawait doGetLogs(fileService, logs, resource, logsHome);\n\t\t} else {\n\t\t\tconst contents = (await fileService.readFile(resource)).value.toString();\n\t\t\tif (contents) {\n\t\t\t\tconst path = relativePath(logsHome, resource);\n\t\t\t\tif (path) {\n\t\t\t\t\tlogs.push({ relativePath: path, contents });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction logLevelToString(level: LogLevel): string {\n\tswitch (level) {\n\t\tcase LogLevel.Trace: return 'trace';\n\t\tcase LogLevel.Debug: return 'debug';\n\t\tcase LogLevel.Info: return 'info';\n\t\tcase LogLevel.Warning: return 'warn';\n\t\tcase LogLevel.Error: return 'error';\n\t}\n\treturn 'info';\n}\n\n/**\n * A logger that is used when VSCode is running in the web with\n * an automation such as playwright. We expect a global codeAutomationLog\n * to be defined that we can use to log to.\n */\nexport class ConsoleLogInAutomationLogger extends AdapterLogger implements ILogger {\n\n\tdeclare codeAutomationLog: any;\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper({ log: (level, args) => this.consoleLog(logLevelToString(level), args) }, logLevel);\n\t}\n\n\tprivate consoleLog(type: string, args: any[]): void {\n\t\tconst automatedWindow = window as unknown as IAutomatedWindow;\n\t\tif (typeof automatedWindow.codeAutomationLog === 'function') {\n\t\t\ttry {\n\t\t\t\tautomatedWindow.codeAutomationLog(type, args);\n\t\t\t} catch (err) {\n\t\t\t\t// see https://github.com/microsoft/vscode-test-web/issues/69\n\t\t\t\tconsole.error('Problems writing to codeAutomationLog', err);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}