{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/log/electron-main/loggerService.ts"],"names":[],"mappings":"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","file":"loggerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ResourceMap } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { DidChangeLoggersEvent, ILogger, ILoggerOptions, ILoggerResource, ILoggerService, LogLevel, isLogLevel } from 'vs/platform/log/common/log';\nimport { LoggerService } from 'vs/platform/log/node/loggerService';\n\nexport const ILoggerMainService = refineServiceDecorator<ILoggerService, ILoggerMainService>(ILoggerService);\n\nexport interface ILoggerMainService extends ILoggerService {\n\n\tgetOnDidChangeLogLevelEvent(windowId: number): Event<LogLevel | [URI, LogLevel]>;\n\n\tgetOnDidChangeVisibilityEvent(windowId: number): Event<[URI, boolean]>;\n\n\tgetOnDidChangeLoggersEvent(windowId: number): Event<DidChangeLoggersEvent>;\n\n\tcreateLogger(resource: URI, options?: ILoggerOptions, windowId?: number): ILogger;\n\n\tcreateLogger(id: string, options?: Omit<ILoggerOptions, 'id'>, windowId?: number): ILogger;\n\n\tregisterLogger(resource: ILoggerResource, windowId?: number): void;\n\n\tgetRegisteredLoggers(windowId?: number): ILoggerResource[];\n\n\tderegisterLoggers(windowId: number): void;\n\n}\n\nexport class LoggerMainService extends LoggerService implements ILoggerMainService {\n\n\tprivate readonly loggerResourcesByWindow = new ResourceMap<number>();\n\n\toverride createLogger(idOrResource: URI | string, options?: ILoggerOptions, windowId?: number): ILogger {\n\t\tif (windowId !== undefined) {\n\t\t\tthis.loggerResourcesByWindow.set(this.toResource(idOrResource), windowId);\n\t\t}\n\t\ttry {\n\t\t\treturn super.createLogger(idOrResource, options);\n\t\t} catch (error) {\n\t\t\tthis.loggerResourcesByWindow.delete(this.toResource(idOrResource));\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\toverride registerLogger(resource: ILoggerResource, windowId?: number): void {\n\t\tif (windowId !== undefined) {\n\t\t\tthis.loggerResourcesByWindow.set(resource.resource, windowId);\n\t\t}\n\t\tsuper.registerLogger(resource);\n\t}\n\n\toverride deregisterLogger(resource: URI): void {\n\t\tthis.loggerResourcesByWindow.delete(resource);\n\t\tsuper.deregisterLogger(resource);\n\t}\n\n\toverride getRegisteredLoggers(windowId?: number): ILoggerResource[] {\n\t\tconst resources: ILoggerResource[] = [];\n\t\tfor (const resource of super.getRegisteredLoggers()) {\n\t\t\tif (windowId === this.loggerResourcesByWindow.get(resource.resource)) {\n\t\t\t\tresources.push(resource);\n\t\t\t}\n\t\t}\n\t\treturn resources;\n\t}\n\n\tgetOnDidChangeLogLevelEvent(windowId: number): Event<LogLevel | [URI, LogLevel]> {\n\t\treturn Event.filter(this.onDidChangeLogLevel, arg => isLogLevel(arg) || this.isInterestedLoggerResource(arg[0], windowId));\n\t}\n\n\tgetOnDidChangeVisibilityEvent(windowId: number): Event<[URI, boolean]> {\n\t\treturn Event.filter(this.onDidChangeVisibility, ([resource]) => this.isInterestedLoggerResource(resource, windowId));\n\t}\n\n\tgetOnDidChangeLoggersEvent(windowId: number): Event<DidChangeLoggersEvent> {\n\t\treturn Event.filter(\n\t\t\tEvent.map(this.onDidChangeLoggers, e => {\n\t\t\t\tconst r = {\n\t\t\t\t\tadded: [...e.added].filter(loggerResource => this.isInterestedLoggerResource(loggerResource.resource, windowId)),\n\t\t\t\t\tremoved: [...e.removed].filter(loggerResource => this.isInterestedLoggerResource(loggerResource.resource, windowId)),\n\t\t\t\t};\n\t\t\t\treturn r;\n\t\t\t}), e => e.added.length > 0 || e.removed.length > 0);\n\t}\n\n\tderegisterLoggers(windowId: number): void {\n\t\tfor (const [resource, resourceWindow] of this.loggerResourcesByWindow) {\n\t\t\tif (resourceWindow === windowId) {\n\t\t\t\tthis.deregisterLogger(resource);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate isInterestedLoggerResource(resource: URI, windowId: number | undefined): boolean {\n\t\tconst loggerWindowId = this.loggerResourcesByWindow.get(resource);\n\t\treturn loggerWindowId === undefined || loggerWindowId === windowId;\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.loggerResourcesByWindow.clear();\n\t}\n}\n\n"]}