{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/log/electron-main/logIpc.ts"],"names":[],"mappings":"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","file":"logIpc.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\nimport { IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ILogger, ILoggerOptions, isLogLevel, log, LogLevel } from 'vs/platform/log/common/log';\nimport { ILoggerMainService } from 'vs/platform/log/electron-main/loggerService';\n\nexport class LoggerChannel implements IServerChannel {\n\n\tprivate readonly loggers = new ResourceMap<ILogger>();\n\n\tconstructor(private readonly loggerService: ILoggerMainService) { }\n\n\tlisten(_: unknown, event: string, windowId?: number): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeLoggers': return windowId ? this.loggerService.getOnDidChangeLoggersEvent(windowId) : this.loggerService.onDidChangeLoggers;\n\t\t\tcase 'onDidChangeLogLevel': return windowId ? this.loggerService.getOnDidChangeLogLevelEvent(windowId) : this.loggerService.onDidChangeLogLevel;\n\t\t\tcase 'onDidChangeVisibility': return windowId ? this.loggerService.getOnDidChangeVisibilityEvent(windowId) : this.loggerService.onDidChangeVisibility;\n\t\t}\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tasync call(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'createLogger': this.createLogger(URI.revive(arg[0]), arg[1], arg[2]); return;\n\t\t\tcase 'log': return this.log(URI.revive(arg[0]), arg[1]);\n\t\t\tcase 'consoleLog': return this.consoleLog(arg[0], arg[1]);\n\t\t\tcase 'setLogLevel': return isLogLevel(arg[0]) ? this.loggerService.setLogLevel(arg[0]) : this.loggerService.setLogLevel(URI.revive(arg[0]), arg[1]);\n\t\t\tcase 'setVisibility': return this.loggerService.setVisibility(URI.revive(arg[0]), arg[1]);\n\t\t\tcase 'registerLogger': return this.loggerService.registerLogger({ ...arg[0], resource: URI.revive(arg[0].resource) }, arg[1]);\n\t\t\tcase 'deregisterLogger': return this.loggerService.deregisterLogger(URI.revive(arg[0]));\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n\tprivate createLogger(file: URI, options: ILoggerOptions, windowId: number | undefined): void {\n\t\tthis.loggers.set(file, this.loggerService.createLogger(file, options, windowId));\n\t}\n\n\tprivate consoleLog(level: LogLevel, args: any[]): void {\n\t\tlet consoleFn = console.log;\n\n\t\tswitch (level) {\n\t\t\tcase LogLevel.Error:\n\t\t\t\tconsoleFn = console.error;\n\t\t\t\tbreak;\n\t\t\tcase LogLevel.Warning:\n\t\t\t\tconsoleFn = console.warn;\n\t\t\t\tbreak;\n\t\t\tcase LogLevel.Info:\n\t\t\t\tconsoleFn = console.info;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconsoleFn.call(console, ...args);\n\t}\n\n\tprivate log(file: URI, messages: [LogLevel, string][]): void {\n\t\tconst logger = this.loggers.get(file);\n\t\tif (!logger) {\n\t\t\tthrow new Error('Create the logger before logging');\n\t\t}\n\t\tfor (const [level, message] of messages) {\n\t\t\tlog(logger, level, message);\n\t\t}\n\t}\n}\n\n"]}