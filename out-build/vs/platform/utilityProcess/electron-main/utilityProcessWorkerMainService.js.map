{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/utilityProcess/electron-main/utilityProcessWorkerMainService.ts"],"names":[],"mappings":"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","file":"utilityProcessWorkerMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IUtilityProcessWorkerCreateConfiguration, IOnDidTerminateUtilityrocessWorkerProcess, IUtilityProcessWorkerConfiguration, IUtilityProcessWorkerProcessExit, IUtilityProcessWorkerService } from 'vs/platform/utilityProcess/common/utilityProcessWorkerService';\nimport { IWindowsMainService } from 'vs/platform/windows/electron-main/windows';\nimport { WindowUtilityProcess } from 'vs/platform/utilityProcess/electron-main/utilityProcess';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { hash } from 'vs/base/common/hash';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\n\nexport const IUtilityProcessWorkerMainService = createDecorator<IUtilityProcessWorkerMainService>('utilityProcessWorker');\n\nexport interface IUtilityProcessWorkerMainService extends IUtilityProcessWorkerService {\n\n\treadonly _serviceBrand: undefined;\n}\n\nexport class UtilityProcessWorkerMainService extends Disposable implements IUtilityProcessWorkerMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly workers = new Map<number /* id */, UtilityProcessWorker>();\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync createWorker(configuration: IUtilityProcessWorkerCreateConfiguration): Promise<IOnDidTerminateUtilityrocessWorkerProcess> {\n\t\tconst workerLogId = `window: ${configuration.reply.windowId}, moduleId: ${configuration.process.moduleId}`;\n\t\tthis.logService.trace(`[UtilityProcessWorker]: createWorker(${workerLogId})`);\n\n\t\t// Ensure to dispose any existing process for config\n\t\tconst workerId = this.hash(configuration);\n\t\tif (this.workers.has(workerId)) {\n\t\t\tthis.logService.warn(`[UtilityProcessWorker]: createWorker() found an existing worker that will be terminated (${workerLogId})`);\n\n\t\t\tthis.disposeWorker(configuration);\n\t\t}\n\n\t\t// Create new worker\n\t\tconst worker = new UtilityProcessWorker(this.logService, this.windowsMainService, this.telemetryService, this.lifecycleMainService, configuration);\n\t\tif (!worker.spawn()) {\n\t\t\treturn { reason: { code: 1, signal: 'EINVALID' } };\n\t\t}\n\n\t\tthis.workers.set(workerId, worker);\n\n\t\tconst onDidTerminate = new DeferredPromise<IOnDidTerminateUtilityrocessWorkerProcess>();\n\t\tEvent.once(worker.onDidTerminate)(reason => {\n\t\t\tif (reason.code === 0) {\n\t\t\t\tthis.logService.trace(`[UtilityProcessWorker]: terminated normally with code ${reason.code}, signal: ${reason.signal}`);\n\t\t\t} else {\n\t\t\t\tthis.logService.error(`[UtilityProcessWorker]: terminated unexpectedly with code ${reason.code}, signal: ${reason.signal}`);\n\t\t\t}\n\n\t\t\tthis.workers.delete(workerId);\n\t\t\tonDidTerminate.complete({ reason });\n\t\t});\n\n\t\treturn onDidTerminate.p;\n\t}\n\n\tprivate hash(configuration: IUtilityProcessWorkerConfiguration): number {\n\t\treturn hash({\n\t\t\tmoduleId: configuration.process.moduleId,\n\t\t\twindowId: configuration.reply.windowId\n\t\t});\n\t}\n\n\tasync disposeWorker(configuration: IUtilityProcessWorkerConfiguration): Promise<void> {\n\t\tconst workerId = this.hash(configuration);\n\t\tconst worker = this.workers.get(workerId);\n\t\tif (!worker) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(`[UtilityProcessWorker]: disposeWorker(window: ${configuration.reply.windowId}, moduleId: ${configuration.process.moduleId})`);\n\n\t\tworker.kill();\n\t\tthis.workers.delete(workerId);\n\t}\n}\n\nclass UtilityProcessWorker extends Disposable {\n\n\tprivate readonly _onDidTerminate = this._register(new Emitter<IUtilityProcessWorkerProcessExit>());\n\treadonly onDidTerminate = this._onDidTerminate.event;\n\n\tprivate readonly utilityProcess = new WindowUtilityProcess(this.logService, this.windowsMainService, this.telemetryService, this.lifecycleMainService);\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\tprivate readonly configuration: IUtilityProcessWorkerCreateConfiguration\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.utilityProcess.onExit(e => this._onDidTerminate.fire({ code: e.code, signal: e.signal })));\n\t\tthis._register(this.utilityProcess.onCrash(e => this._onDidTerminate.fire({ code: e.code, signal: 'ECRASH' })));\n\t}\n\n\tspawn(): boolean {\n\t\tconst window = this.windowsMainService.getWindowById(this.configuration.reply.windowId);\n\t\tconst windowPid = window?.win?.webContents.getOSProcessId();\n\n\t\treturn this.utilityProcess.start({\n\t\t\ttype: this.configuration.process.type,\n\t\t\tentryPoint: this.configuration.process.moduleId,\n\t\t\tparentLifecycleBound: windowPid,\n\t\t\twindowLifecycleBound: true,\n\t\t\tcorrelationId: `${this.configuration.reply.windowId}`,\n\t\t\tresponseWindowId: this.configuration.reply.windowId,\n\t\t\tresponseChannel: this.configuration.reply.channel,\n\t\t\tresponseNonce: this.configuration.reply.nonce\n\t\t});\n\t}\n\n\tkill() {\n\t\tthis.utilityProcess.kill();\n\t}\n}\n"]}