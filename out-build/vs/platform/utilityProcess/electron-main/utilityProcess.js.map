{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/utilityProcess/electron-main/utilityProcess.ts"],"names":[],"mappings":"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","file":"utilityProcess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserWindow, Details, MessageChannelMain, app, utilityProcess, UtilityProcess as ElectronUtilityProcess, ForkOptions } from 'electron';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { StringDecoder } from 'string_decoder';\nimport { timeout } from 'vs/base/common/async';\nimport { FileAccess } from 'vs/base/common/network';\nimport { IWindowsMainService } from 'vs/platform/windows/electron-main/windows';\nimport Severity from 'vs/base/common/severity';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { removeDangerousEnvVariables } from 'vs/base/common/processes';\nimport { deepClone } from 'vs/base/common/objects';\nimport { isWindows } from 'vs/base/common/platform';\nimport { isUNCAccessRestrictionsDisabled, getUNCHostAllowlist } from 'vs/base/node/unc';\n\nexport interface IUtilityProcessConfiguration {\n\n\t/**\n\t * A way to group utility processes of same type together.\n\t */\n\treadonly type: string;\n\n\t/**\n\t * The entry point to load in the utility process.\n\t */\n\treadonly entryPoint: string;\n\n\t/**\n\t * An optional serializable object to be sent into the utility process\n\t * as first message alongside the message port.\n\t */\n\treadonly payload?: unknown;\n\n\t/**\n\t * Environment key-value pairs. Default is `process.env`.\n\t */\n\treadonly env?: { [key: string]: string | undefined };\n\n\t/**\n\t * List of string arguments that will be available as `process.argv`\n\t * in the child process.\n\t */\n\treadonly args?: string[];\n\n\t/**\n\t * List of string arguments passed to the executable.\n\t */\n\treadonly execArgv?: string[];\n\n\t/**\n\t * Allow the utility process to load unsigned libraries.\n\t */\n\treadonly allowLoadingUnsignedLibraries?: boolean;\n\n\t/**\n\t * Used in log messages to correlate the process\n\t * with other components.\n\t */\n\treadonly correlationId?: string;\n\n\t/**\n\t * Optional pid of the parent process. If set, the\n\t * utility process will be terminated when the parent\n\t * process exits.\n\t */\n\treadonly parentLifecycleBound?: number;\n\n\t/**\n\t * Allow the utility process to force heap allocations inside\n\t * the V8 sandbox.\n\t */\n\treadonly forceAllocationsToV8Sandbox?: boolean;\n}\n\nexport interface IWindowUtilityProcessConfiguration extends IUtilityProcessConfiguration {\n\n\t// --- message port response related\n\n\treadonly responseWindowId: number;\n\treadonly responseChannel: string;\n\treadonly responseNonce: string;\n\n\t// --- utility process options\n\n\t/**\n\t * If set to `true`, will terminate the utility process\n\t * when the associated browser window closes or reloads.\n\t */\n\treadonly windowLifecycleBound?: boolean;\n}\n\nfunction isWindowUtilityProcessConfiguration(config: IUtilityProcessConfiguration): config is IWindowUtilityProcessConfiguration {\n\tconst candidate = config as IWindowUtilityProcessConfiguration;\n\n\treturn typeof candidate.responseWindowId === 'number';\n}\n\ninterface IUtilityProcessExitBaseEvent {\n\n\t/**\n\t * The process id of the process that exited.\n\t */\n\treadonly pid: number;\n\n\t/**\n\t * The exit code of the process.\n\t */\n\treadonly code: number;\n}\n\nexport interface IUtilityProcessExitEvent extends IUtilityProcessExitBaseEvent {\n\n\t/**\n\t * The signal that caused the process to exit is unknown\n\t * for utility processes.\n\t */\n\treadonly signal: 'unknown';\n}\n\nexport interface IUtilityProcessCrashEvent extends IUtilityProcessExitBaseEvent {\n\n\t/**\n\t * The reason of the utility process crash.\n\t */\n\treadonly reason: 'clean-exit' | 'abnormal-exit' | 'killed' | 'crashed' | 'oom' | 'launch-failed' | 'integrity-failure';\n}\n\nexport interface IUtilityProcessInfo {\n\treadonly pid: number;\n\treadonly name: string;\n}\n\nexport class UtilityProcess extends Disposable {\n\n\tprivate static ID_COUNTER = 0;\n\n\tprivate static readonly all = new Map<number, IUtilityProcessInfo>();\n\tstatic getAll(): IUtilityProcessInfo[] {\n\t\treturn Array.from(UtilityProcess.all.values());\n\t}\n\n\tprivate readonly id = String(++UtilityProcess.ID_COUNTER);\n\n\tprivate readonly _onStdout = this._register(new Emitter<string>());\n\treadonly onStdout = this._onStdout.event;\n\n\tprivate readonly _onStderr = this._register(new Emitter<string>());\n\treadonly onStderr = this._onStderr.event;\n\n\tprivate readonly _onMessage = this._register(new Emitter<unknown>());\n\treadonly onMessage = this._onMessage.event;\n\n\tprivate readonly _onExit = this._register(new Emitter<IUtilityProcessExitEvent>());\n\treadonly onExit = this._onExit.event;\n\n\tprivate readonly _onCrash = this._register(new Emitter<IUtilityProcessCrashEvent>());\n\treadonly onCrash = this._onCrash.event;\n\n\tprivate process: ElectronUtilityProcess | undefined = undefined;\n\tprivate processPid: number | undefined = undefined;\n\tprivate configuration: IUtilityProcessConfiguration | undefined = undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService protected readonly lifecycleMainService: ILifecycleMainService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected log(msg: string, severity: Severity): void {\n\t\tlet logMsg: string;\n\t\tif (this.configuration?.correlationId) {\n\t\t\tlogMsg = `[UtilityProcess id: ${this.configuration?.correlationId}, type: ${this.configuration?.type}, pid: ${this.processPid ?? '<none>'}]: ${msg}`;\n\t\t} else {\n\t\t\tlogMsg = `[UtilityProcess type: ${this.configuration?.type}, pid: ${this.processPid ?? '<none>'}]: ${msg}`;\n\t\t}\n\n\t\tswitch (severity) {\n\t\t\tcase Severity.Error:\n\t\t\t\tthis.logService.error(logMsg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Warning:\n\t\t\t\tthis.logService.warn(logMsg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Info:\n\t\t\t\tthis.logService.trace(logMsg);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate validateCanStart(): boolean {\n\t\tif (this.process) {\n\t\t\tthis.log('Cannot start utility process because it is already running...', Severity.Error);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstart(configuration: IUtilityProcessConfiguration): boolean {\n\t\tconst started = this.doStart(configuration);\n\n\t\tif (started && configuration.payload) {\n\t\t\tthis.postMessage(configuration.payload);\n\t\t}\n\n\t\treturn started;\n\t}\n\n\tprotected doStart(configuration: IUtilityProcessConfiguration): boolean {\n\t\tif (!this.validateCanStart()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.configuration = configuration;\n\n\t\tconst serviceName = `${this.configuration.type}-${this.id}`;\n\t\tconst modulePath = FileAccess.asFileUri('bootstrap-fork.js').fsPath;\n\t\tconst args = this.configuration.args ?? [];\n\t\tconst execArgv = this.configuration.execArgv ?? [];\n\t\tconst allowLoadingUnsignedLibraries = this.configuration.allowLoadingUnsignedLibraries;\n\t\tconst forceAllocationsToV8Sandbox = this.configuration.forceAllocationsToV8Sandbox;\n\t\tconst stdio = 'pipe';\n\t\tconst env = this.createEnv(configuration);\n\n\t\tthis.log('creating new...', Severity.Info);\n\n\t\t// Fork utility process\n\t\tthis.process = utilityProcess.fork(modulePath, args, {\n\t\t\tserviceName,\n\t\t\tenv,\n\t\t\texecArgv,\n\t\t\tallowLoadingUnsignedLibraries,\n\t\t\tforceAllocationsToV8Sandbox,\n\t\t\tstdio\n\t\t} as ForkOptions & { forceAllocationsToV8Sandbox?: Boolean });\n\n\t\t// Register to events\n\t\tthis.registerListeners(this.process, this.configuration, serviceName);\n\n\t\treturn true;\n\t}\n\n\tprivate createEnv(configuration: IUtilityProcessConfiguration): { [key: string]: any } {\n\t\tconst env: { [key: string]: any } = configuration.env ? { ...configuration.env } : { ...deepClone(process.env) };\n\n\t\t// Apply supported environment variables from config\n\t\tenv['VSCODE_AMD_ENTRYPOINT'] = configuration.entryPoint;\n\t\tif (typeof configuration.parentLifecycleBound === 'number') {\n\t\t\tenv['VSCODE_PARENT_PID'] = String(configuration.parentLifecycleBound);\n\t\t}\n\t\tenv['VSCODE_CRASH_REPORTER_PROCESS_TYPE'] = configuration.type;\n\t\tif (isWindows) {\n\t\t\tif (isUNCAccessRestrictionsDisabled()) {\n\t\t\t\tenv['NODE_DISABLE_UNC_ACCESS_CHECKS'] = '1';\n\t\t\t} else {\n\t\t\t\tenv['NODE_UNC_HOST_ALLOWLIST'] = getUNCHostAllowlist().join('\\\\');\n\t\t\t}\n\t\t}\n\n\t\t// Remove any environment variables that are not allowed\n\t\tremoveDangerousEnvVariables(env);\n\n\t\t// Ensure all values are strings, otherwise the process will not start\n\t\tfor (const key of Object.keys(env)) {\n\t\t\tenv[key] = String(env[key]);\n\t\t}\n\n\t\treturn env;\n\t}\n\n\tprivate registerListeners(process: ElectronUtilityProcess, configuration: IUtilityProcessConfiguration, serviceName: string): void {\n\n\t\t// Stdout\n\t\tif (process.stdout) {\n\t\t\tconst stdoutDecoder = new StringDecoder('utf-8');\n\t\t\tthis._register(Event.fromNodeEventEmitter<string | Buffer>(process.stdout, 'data')(chunk => this._onStdout.fire(typeof chunk === 'string' ? chunk : stdoutDecoder.write(chunk))));\n\t\t}\n\n\t\t// Stderr\n\t\tif (process.stderr) {\n\t\t\tconst stderrDecoder = new StringDecoder('utf-8');\n\t\t\tthis._register(Event.fromNodeEventEmitter<string | Buffer>(process.stderr, 'data')(chunk => this._onStderr.fire(typeof chunk === 'string' ? chunk : stderrDecoder.write(chunk))));\n\t\t}\n\n\t\t// Messages\n\t\tthis._register(Event.fromNodeEventEmitter(process, 'message')(msg => this._onMessage.fire(msg)));\n\n\t\t// Spawn\n\t\tthis._register(Event.fromNodeEventEmitter<void>(process, 'spawn')(() => {\n\t\t\tthis.processPid = process.pid;\n\n\t\t\tif (typeof process.pid === 'number') {\n\t\t\t\tUtilityProcess.all.set(process.pid, { pid: process.pid, name: isWindowUtilityProcessConfiguration(configuration) ? `${configuration.type} [${configuration.responseWindowId}]` : configuration.type });\n\t\t\t}\n\n\t\t\tthis.log('successfully created', Severity.Info);\n\t\t}));\n\n\t\t// Exit\n\t\tthis._register(Event.fromNodeEventEmitter<number>(process, 'exit')(code => {\n\t\t\tthis.log(`received exit event with code ${code}`, Severity.Info);\n\n\t\t\t// Event\n\t\t\tthis._onExit.fire({ pid: this.processPid!, code, signal: 'unknown' });\n\n\t\t\t// Cleanup\n\t\t\tthis.onDidExitOrCrashOrKill();\n\t\t}));\n\n\t\t// Child process gone\n\t\tthis._register(Event.fromNodeEventEmitter<{ details: Details }>(app, 'child-process-gone', (event, details) => ({ event, details }))(({ details }) => {\n\t\t\tif (details.type === 'Utility' && details.name === serviceName) {\n\t\t\t\tthis.log(`crashed with code ${details.exitCode} and reason '${details.reason}'`, Severity.Error);\n\n\t\t\t\t// Telemetry\n\t\t\t\ttype UtilityProcessCrashClassification = {\n\t\t\t\t\ttype: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The type of utility process to understand the origin of the crash better.' };\n\t\t\t\t\treason: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The reason of the utility process crash to understand the nature of the crash better.' };\n\t\t\t\t\tcode: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The exit code of the utility process to understand the nature of the crash better' };\n\t\t\t\t\towner: 'bpasero';\n\t\t\t\t\tcomment: 'Provides insight into reasons the utility process crashed.';\n\t\t\t\t};\n\t\t\t\ttype UtilityProcessCrashEvent = {\n\t\t\t\t\ttype: string;\n\t\t\t\t\treason: string;\n\t\t\t\t\tcode: number;\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<UtilityProcessCrashEvent, UtilityProcessCrashClassification>('utilityprocesscrash', {\n\t\t\t\t\ttype: configuration.type,\n\t\t\t\t\treason: details.reason,\n\t\t\t\t\tcode: details.exitCode\n\t\t\t\t});\n\n\t\t\t\t// Event\n\t\t\t\tthis._onCrash.fire({ pid: this.processPid!, code: details.exitCode, reason: details.reason });\n\n\t\t\t\t// Cleanup\n\t\t\t\tthis.onDidExitOrCrashOrKill();\n\t\t\t}\n\t\t}));\n\t}\n\n\tonce(message: unknown, callback: () => void): void {\n\t\tconst disposable = this._register(this._onMessage.event(msg => {\n\t\t\tif (msg === message) {\n\t\t\t\tdisposable.dispose();\n\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpostMessage(message: unknown, transfer?: Electron.MessagePortMain[]): void {\n\t\tif (!this.process) {\n\t\t\treturn; // already killed, crashed or never started\n\t\t}\n\n\t\tthis.process.postMessage(message, transfer);\n\t}\n\n\tconnect(payload?: unknown): Electron.MessagePortMain {\n\t\tconst { port1: outPort, port2: utilityProcessPort } = new MessageChannelMain();\n\t\tthis.postMessage(payload, [utilityProcessPort]);\n\n\t\treturn outPort;\n\t}\n\n\tenableInspectPort(): boolean {\n\t\tif (!this.process || typeof this.processPid !== 'number') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.log('enabling inspect port', Severity.Info);\n\n\t\tinterface ProcessExt {\n\t\t\t_debugProcess?(pid: number): unknown;\n\t\t}\n\n\t\t// use (undocumented) _debugProcess feature of node if available\n\t\tconst processExt = <ProcessExt>process;\n\t\tif (typeof processExt._debugProcess === 'function') {\n\t\t\tprocessExt._debugProcess(this.processPid);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// not supported...\n\t\treturn false;\n\t}\n\n\tkill(): void {\n\t\tif (!this.process) {\n\t\t\treturn; // already killed, crashed or never started\n\t\t}\n\n\t\tthis.log('attempting to kill the process...', Severity.Info);\n\t\tconst killed = this.process.kill();\n\t\tif (killed) {\n\t\t\tthis.log('successfully killed the process', Severity.Info);\n\t\t\tthis.onDidExitOrCrashOrKill();\n\t\t} else {\n\t\t\tthis.log('unable to kill the process', Severity.Warning);\n\t\t}\n\t}\n\n\tprivate onDidExitOrCrashOrKill(): void {\n\t\tif (typeof this.processPid === 'number') {\n\t\t\tUtilityProcess.all.delete(this.processPid);\n\t\t}\n\n\t\tthis.process = undefined;\n\t}\n\n\tasync waitForExit(maxWaitTimeMs: number): Promise<void> {\n\t\tif (!this.process) {\n\t\t\treturn; // already killed, crashed or never started\n\t\t}\n\n\t\tthis.log('waiting to exit...', Severity.Info);\n\t\tawait Promise.race([Event.toPromise(this.onExit), timeout(maxWaitTimeMs)]);\n\n\t\tif (this.process) {\n\t\t\tthis.log(`did not exit within ${maxWaitTimeMs}ms, will kill it now...`, Severity.Info);\n\t\t\tthis.kill();\n\t\t}\n\t}\n}\n\nexport class WindowUtilityProcess extends UtilityProcess {\n\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService\n\t) {\n\t\tsuper(logService, telemetryService, lifecycleMainService);\n\t}\n\n\toverride start(configuration: IWindowUtilityProcessConfiguration): boolean {\n\t\tconst responseWindow = this.windowsMainService.getWindowById(configuration.responseWindowId);\n\t\tif (!responseWindow?.win || responseWindow.win.isDestroyed() || responseWindow.win.webContents.isDestroyed()) {\n\t\t\tthis.log('Refusing to start utility process because requesting window cannot be found or is destroyed...', Severity.Error);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Start utility process\n\t\tconst started = super.doStart(configuration);\n\t\tif (!started) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Register to window events\n\t\tthis.registerWindowListeners(responseWindow.win, configuration);\n\n\t\t// Establish & exchange message ports\n\t\tconst windowPort = this.connect(configuration.payload);\n\t\tresponseWindow.win.webContents.postMessage(configuration.responseChannel, configuration.responseNonce, [windowPort]);\n\n\t\treturn true;\n\t}\n\n\tprivate registerWindowListeners(window: BrowserWindow, configuration: IWindowUtilityProcessConfiguration): void {\n\n\t\t// If the lifecycle of the utility process is bound to the window,\n\t\t// we kill the process if the window closes or changes\n\n\t\tif (configuration.windowLifecycleBound) {\n\t\t\tthis._register(Event.filter(this.lifecycleMainService.onWillLoadWindow, e => e.window.win === window)(() => this.kill()));\n\t\t\tthis._register(Event.fromNodeEventEmitter(window, 'closed')(() => this.kill()));\n\t\t}\n\t}\n}\n"]}