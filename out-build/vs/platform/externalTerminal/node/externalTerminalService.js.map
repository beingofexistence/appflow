{"version":3,"sources":["vs/platform/externalTerminal/node/externalTerminalService.ts"],"names":[],"mappings":"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","file":"externalTerminalService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport { FileAccess } from 'vs/base/common/network';\nimport * as path from 'vs/base/common/path';\nimport * as env from 'vs/base/common/platform';\nimport { sanitizeProcessEnvironment } from 'vs/base/common/processes';\nimport * as pfs from 'vs/base/node/pfs';\nimport * as processes from 'vs/base/node/processes';\nimport * as nls from 'vs/nls';\nimport { DEFAULT_TERMINAL_OSX, IExternalTerminalService, IExternalTerminalSettings, ITerminalForPlatform } from 'vs/platform/externalTerminal/common/externalTerminal';\nimport { ITerminalEnvironment } from 'vs/platform/terminal/common/terminal';\n\nconst TERMINAL_TITLE = nls.localize('console.title', \"VS Code Console\");\n\nabstract class ExternalTerminalService {\n\tpublic _serviceBrand: undefined;\n\n\tasync getDefaultTerminalForPlatforms(): Promise<ITerminalForPlatform> {\n\t\treturn {\n\t\t\twindows: WindowsExternalTerminalService.getDefaultTerminalWindows(),\n\t\t\tlinux: await LinuxExternalTerminalService.getDefaultTerminalLinuxReady(),\n\t\t\tosx: 'xterm'\n\t\t};\n\t}\n}\n\nexport class WindowsExternalTerminalService extends ExternalTerminalService implements IExternalTerminalService {\n\tprivate static readonly CMD = 'cmd.exe';\n\tprivate static _DEFAULT_TERMINAL_WINDOWS: string;\n\n\tpublic openTerminal(configuration: IExternalTerminalSettings, cwd?: string): Promise<void> {\n\t\treturn this.spawnTerminal(cp, configuration, processes.getWindowsShell(), cwd);\n\t}\n\n\tpublic spawnTerminal(spawner: typeof cp, configuration: IExternalTerminalSettings, command: string, cwd?: string): Promise<void> {\n\t\tconst exec = configuration.windowsExec || WindowsExternalTerminalService.getDefaultTerminalWindows();\n\n\t\t// Make the drive letter uppercase on Windows (see #9448)\n\t\tif (cwd && cwd[1] === ':') {\n\t\t\tcwd = cwd[0].toUpperCase() + cwd.substr(1);\n\t\t}\n\n\t\t// cmder ignores the environment cwd and instead opts to always open in %USERPROFILE%\n\t\t// unless otherwise specified\n\t\tconst basename = path.basename(exec, '.exe').toLowerCase();\n\t\tif (basename === 'cmder') {\n\t\t\tspawner.spawn(exec, cwd ? [cwd] : undefined);\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst cmdArgs = ['/c', 'start', '/wait'];\n\t\tif (exec.indexOf(' ') >= 0) {\n\t\t\t// The \"\" argument is the window title. Without this, exec doesn't work when the path\n\t\t\t// contains spaces\n\t\t\tcmdArgs.push('\"\"');\n\t\t}\n\t\tcmdArgs.push(exec);\n\t\t// Add starting directory parameter for Windows Terminal (see #90734)\n\t\tif (basename === 'wt') {\n\t\t\tcmdArgs.push('-d .');\n\t\t}\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst env = getSanitizedEnvironment(process);\n\t\t\tconst child = spawner.spawn(command, cmdArgs, { cwd, env });\n\t\t\tchild.on('error', e);\n\t\t\tchild.on('exit', () => c());\n\t\t});\n\t}\n\n\tpublic runInTerminal(title: string, dir: string, args: string[], envVars: ITerminalEnvironment, settings: IExternalTerminalSettings): Promise<number | undefined> {\n\t\tconst exec = 'windowsExec' in settings && settings.windowsExec ? settings.windowsExec : WindowsExternalTerminalService.getDefaultTerminalWindows();\n\n\t\treturn new Promise<number | undefined>((resolve, reject) => {\n\n\t\t\tconst title = `\"${dir} - ${TERMINAL_TITLE}\"`;\n\t\t\tconst command = `\"\"${args.join('\" \"')}\" & pause\"`; // use '|' to only pause on non-zero exit code\n\n\n\t\t\t// merge environment variables into a copy of the process.env\n\t\t\tconst env = Object.assign({}, getSanitizedEnvironment(process), envVars);\n\n\t\t\t// delete environment variables that have a null value\n\t\t\tObject.keys(env).filter(v => env[v] === null).forEach(key => delete env[key]);\n\n\t\t\tconst options: any = {\n\t\t\t\tcwd: dir,\n\t\t\t\tenv: env,\n\t\t\t\twindowsVerbatimArguments: true\n\t\t\t};\n\n\t\t\tlet spawnExec: string;\n\t\t\tlet cmdArgs: string[];\n\n\t\t\tif (path.basename(exec, '.exe') === 'wt') {\n\t\t\t\t// Handle Windows Terminal specially; -d to set the cwd and run a cmd.exe instance\n\t\t\t\t// inside it\n\t\t\t\tspawnExec = exec;\n\t\t\t\tcmdArgs = ['-d', '.', WindowsExternalTerminalService.CMD, '/c', command];\n\t\t\t} else {\n\t\t\t\tspawnExec = WindowsExternalTerminalService.CMD;\n\t\t\t\tcmdArgs = ['/c', 'start', title, '/wait', exec, '/c', command];\n\t\t\t}\n\n\t\t\tconst cmd = cp.spawn(spawnExec, cmdArgs, options);\n\n\t\t\tcmd.on('error', err => {\n\t\t\t\treject(improveError(err));\n\t\t\t});\n\n\t\t\tresolve(undefined);\n\t\t});\n\t}\n\n\tpublic static getDefaultTerminalWindows(): string {\n\t\tif (!WindowsExternalTerminalService._DEFAULT_TERMINAL_WINDOWS) {\n\t\t\tconst isWoW64 = !!process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\t\tWindowsExternalTerminalService._DEFAULT_TERMINAL_WINDOWS = `${process.env.windir ? process.env.windir : 'C:\\\\Windows'}\\\\${isWoW64 ? 'Sysnative' : 'System32'}\\\\cmd.exe`;\n\t\t}\n\t\treturn WindowsExternalTerminalService._DEFAULT_TERMINAL_WINDOWS;\n\t}\n}\n\nexport class MacExternalTerminalService extends ExternalTerminalService implements IExternalTerminalService {\n\tprivate static readonly OSASCRIPT = '/usr/bin/osascript';\t// osascript is the AppleScript interpreter on OS X\n\n\tpublic openTerminal(configuration: IExternalTerminalSettings, cwd?: string): Promise<void> {\n\t\treturn this.spawnTerminal(cp, configuration, cwd);\n\t}\n\n\tpublic runInTerminal(title: string, dir: string, args: string[], envVars: ITerminalEnvironment, settings: IExternalTerminalSettings): Promise<number | undefined> {\n\n\t\tconst terminalApp = settings.osxExec || DEFAULT_TERMINAL_OSX;\n\n\t\treturn new Promise<number | undefined>((resolve, reject) => {\n\n\t\t\tif (terminalApp === DEFAULT_TERMINAL_OSX || terminalApp === 'iTerm.app') {\n\n\t\t\t\t// On OS X we launch an AppleScript that creates (or reuses) a Terminal window\n\t\t\t\t// and then launches the program inside that window.\n\n\t\t\t\tconst script = terminalApp === DEFAULT_TERMINAL_OSX ? 'TerminalHelper' : 'iTermHelper';\n\t\t\t\tconst scriptpath = FileAccess.asFileUri(`vs/workbench/contrib/externalTerminal/node/${script}.scpt`).fsPath;\n\n\t\t\t\tconst osaArgs = [\n\t\t\t\t\tscriptpath,\n\t\t\t\t\t'-t', title || TERMINAL_TITLE,\n\t\t\t\t\t'-w', dir,\n\t\t\t\t];\n\n\t\t\t\tfor (const a of args) {\n\t\t\t\t\tosaArgs.push('-a');\n\t\t\t\t\tosaArgs.push(a);\n\t\t\t\t}\n\n\t\t\t\tif (envVars) {\n\t\t\t\t\t// merge environment variables into a copy of the process.env\n\t\t\t\t\tconst env = Object.assign({}, getSanitizedEnvironment(process), envVars);\n\n\t\t\t\t\tfor (const key in env) {\n\t\t\t\t\t\tconst value = env[key];\n\t\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\t\tosaArgs.push('-u');\n\t\t\t\t\t\t\tosaArgs.push(key);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tosaArgs.push('-e');\n\t\t\t\t\t\t\tosaArgs.push(`${key}=${value}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet stderr = '';\n\t\t\t\tconst osa = cp.spawn(MacExternalTerminalService.OSASCRIPT, osaArgs);\n\t\t\t\tosa.on('error', err => {\n\t\t\t\t\treject(improveError(err));\n\t\t\t\t});\n\t\t\t\tosa.stderr.on('data', (data) => {\n\t\t\t\t\tstderr += data.toString();\n\t\t\t\t});\n\t\t\t\tosa.on('exit', (code: number) => {\n\t\t\t\t\tif (code === 0) {\t// OK\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (stderr) {\n\t\t\t\t\t\t\tconst lines = stderr.split('\\n', 1);\n\t\t\t\t\t\t\treject(new Error(lines[0]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(new Error(nls.localize('mac.terminal.script.failed', \"Script '{0}' failed with exit code {1}\", script, code)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject(new Error(nls.localize('mac.terminal.type.not.supported', \"'{0}' not supported\", terminalApp)));\n\t\t\t}\n\t\t});\n\t}\n\n\tspawnTerminal(spawner: typeof cp, configuration: IExternalTerminalSettings, cwd?: string): Promise<void> {\n\t\tconst terminalApp = configuration.osxExec || DEFAULT_TERMINAL_OSX;\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst args = ['-a', terminalApp];\n\t\t\tif (cwd) {\n\t\t\t\targs.push(cwd);\n\t\t\t}\n\t\t\tconst env = getSanitizedEnvironment(process);\n\t\t\tconst child = spawner.spawn('/usr/bin/open', args, { cwd, env });\n\t\t\tchild.on('error', e);\n\t\t\tchild.on('exit', () => c());\n\t\t});\n\t}\n}\n\nexport class LinuxExternalTerminalService extends ExternalTerminalService implements IExternalTerminalService {\n\n\tprivate static readonly WAIT_MESSAGE = nls.localize('press.any.key', \"Press any key to continue...\");\n\n\tpublic openTerminal(configuration: IExternalTerminalSettings, cwd?: string): Promise<void> {\n\t\treturn this.spawnTerminal(cp, configuration, cwd);\n\t}\n\n\tpublic runInTerminal(title: string, dir: string, args: string[], envVars: ITerminalEnvironment, settings: IExternalTerminalSettings): Promise<number | undefined> {\n\n\t\tconst execPromise = settings.linuxExec ? Promise.resolve(settings.linuxExec) : LinuxExternalTerminalService.getDefaultTerminalLinuxReady();\n\n\t\treturn new Promise<number | undefined>((resolve, reject) => {\n\n\t\t\tconst termArgs: string[] = [];\n\t\t\t//termArgs.push('--title');\n\t\t\t//termArgs.push(`\"${TERMINAL_TITLE}\"`);\n\t\t\texecPromise.then(exec => {\n\t\t\t\tif (exec.indexOf('gnome-terminal') >= 0) {\n\t\t\t\t\ttermArgs.push('-x');\n\t\t\t\t} else {\n\t\t\t\t\ttermArgs.push('-e');\n\t\t\t\t}\n\t\t\t\ttermArgs.push('bash');\n\t\t\t\ttermArgs.push('-c');\n\n\t\t\t\tconst bashCommand = `${quote(args)}; echo; read -p \"${LinuxExternalTerminalService.WAIT_MESSAGE}\" -n1;`;\n\t\t\t\ttermArgs.push(`''${bashCommand}''`);\t// wrapping argument in two sets of ' because node is so \"friendly\" that it removes one set...\n\n\n\t\t\t\t// merge environment variables into a copy of the process.env\n\t\t\t\tconst env = Object.assign({}, getSanitizedEnvironment(process), envVars);\n\n\t\t\t\t// delete environment variables that have a null value\n\t\t\t\tObject.keys(env).filter(v => env[v] === null).forEach(key => delete env[key]);\n\n\t\t\t\tconst options: any = {\n\t\t\t\t\tcwd: dir,\n\t\t\t\t\tenv: env\n\t\t\t\t};\n\n\t\t\t\tlet stderr = '';\n\t\t\t\tconst cmd = cp.spawn(exec, termArgs, options);\n\t\t\t\tcmd.on('error', err => {\n\t\t\t\t\treject(improveError(err));\n\t\t\t\t});\n\t\t\t\tcmd.stderr.on('data', (data) => {\n\t\t\t\t\tstderr += data.toString();\n\t\t\t\t});\n\t\t\t\tcmd.on('exit', (code: number) => {\n\t\t\t\t\tif (code === 0) {\t// OK\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (stderr) {\n\t\t\t\t\t\t\tconst lines = stderr.split('\\n', 1);\n\t\t\t\t\t\t\treject(new Error(lines[0]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(new Error(nls.localize('linux.term.failed', \"'{0}' failed with exit code {1}\", exec, code)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static _DEFAULT_TERMINAL_LINUX_READY: Promise<string>;\n\n\tpublic static async getDefaultTerminalLinuxReady(): Promise<string> {\n\t\tif (!LinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY) {\n\t\t\tif (!env.isLinux) {\n\t\t\t\tLinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY = Promise.resolve('xterm');\n\t\t\t} else {\n\t\t\t\tconst isDebian = await pfs.Promises.exists('/etc/debian_version');\n\t\t\t\tLinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY = new Promise<string>(r => {\n\t\t\t\t\tif (isDebian) {\n\t\t\t\t\t\tr('x-terminal-emulator');\n\t\t\t\t\t} else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {\n\t\t\t\t\t\tr('gnome-terminal');\n\t\t\t\t\t} else if (process.env.DESKTOP_SESSION === 'kde-plasma') {\n\t\t\t\t\t\tr('konsole');\n\t\t\t\t\t} else if (process.env.COLORTERM) {\n\t\t\t\t\t\tr(process.env.COLORTERM);\n\t\t\t\t\t} else if (process.env.TERM) {\n\t\t\t\t\t\tr(process.env.TERM);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr('xterm');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn LinuxExternalTerminalService._DEFAULT_TERMINAL_LINUX_READY;\n\t}\n\n\tspawnTerminal(spawner: typeof cp, configuration: IExternalTerminalSettings, cwd?: string): Promise<void> {\n\t\tconst execPromise = configuration.linuxExec ? Promise.resolve(configuration.linuxExec) : LinuxExternalTerminalService.getDefaultTerminalLinuxReady();\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\texecPromise.then(exec => {\n\t\t\t\tconst env = getSanitizedEnvironment(process);\n\t\t\t\tconst child = spawner.spawn(exec, [], { cwd, env });\n\t\t\t\tchild.on('error', e);\n\t\t\t\tchild.on('exit', () => c());\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction getSanitizedEnvironment(process: NodeJS.Process) {\n\tconst env = { ...process.env };\n\tsanitizeProcessEnvironment(env);\n\treturn env;\n}\n\n/**\n * tries to turn OS errors into more meaningful error messages\n */\nfunction improveError(err: Error & { errno?: string; path?: string }): Error {\n\tif ('errno' in err && err['errno'] === 'ENOENT' && 'path' in err && typeof err['path'] === 'string') {\n\t\treturn new Error(nls.localize('ext.term.app.not.found', \"can't find terminal application '{0}'\", err['path']));\n\t}\n\treturn err;\n}\n\n/**\n * Quote args if necessary and combine into a space separated string.\n */\nfunction quote(args: string[]): string {\n\tlet r = '';\n\tfor (const a of args) {\n\t\tif (a.indexOf(' ') >= 0) {\n\t\t\tr += '\"' + a + '\"';\n\t\t} else {\n\t\t\tr += a;\n\t\t}\n\t\tr += ' ';\n\t}\n\treturn r;\n}\n"]}