{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/externalTerminal/electron-main/externalTerminalService.test.ts"],"names":[],"mappings":"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","file":"externalTerminalService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, strictEqual } from 'assert';\nimport { DEFAULT_TERMINAL_OSX, IExternalTerminalConfiguration } from 'vs/platform/externalTerminal/common/externalTerminal';\nimport { LinuxExternalTerminalService, MacExternalTerminalService, WindowsExternalTerminalService } from 'vs/platform/externalTerminal/node/externalTerminalService';\n\nconst mockConfig = Object.freeze<IExternalTerminalConfiguration>({\n\tterminal: {\n\t\texplorerKind: 'external',\n\t\texternal: {\n\t\t\twindowsExec: 'testWindowsShell',\n\t\t\tosxExec: 'testOSXShell',\n\t\t\tlinuxExec: 'testLinuxShell'\n\t\t}\n\t}\n});\n\nsuite('ExternalTerminalService', () => {\n\ttest(`WinTerminalService - uses terminal from configuration`, done => {\n\t\tconst testShell = 'cmd';\n\t\tconst testCwd = 'path/to/workspace';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(command, testShell, 'shell should equal expected');\n\t\t\t\tstrictEqual(args[args.length - 1], mockConfig.terminal.external.windowsExec);\n\t\t\t\tstrictEqual(opts.cwd, testCwd);\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst testService = new WindowsExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestShell,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - uses default terminal when configuration.terminal.external.windowsExec is undefined`, done => {\n\t\tconst testShell = 'cmd';\n\t\tconst testCwd = 'path/to/workspace';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(args[args.length - 1], WindowsExternalTerminalService.getDefaultTerminalWindows());\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tmockConfig.terminal.external.windowsExec = undefined;\n\t\tconst testService = new WindowsExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestShell,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - cwd is correct regardless of case`, done => {\n\t\tconst testShell = 'cmd';\n\t\tconst testCwd = 'c:/foo';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(opts.cwd, 'C:/foo', 'cwd should be uppercase regardless of the case that\\'s passed in');\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst testService = new WindowsExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestShell,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - cmder should be spawned differently`, done => {\n\t\tconst testShell = 'cmd';\n\t\tconst testCwd = 'c:/foo';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tdeepStrictEqual(args, ['C:/foo']);\n\t\t\t\tstrictEqual(opts, undefined);\n\t\t\t\tdone();\n\t\t\t\treturn { on: (evt: any) => evt };\n\t\t\t}\n\t\t};\n\t\tconst testService = new WindowsExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\t{ windowsExec: 'cmder' },\n\t\t\ttestShell,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`WinTerminalService - windows terminal should open workspace directory`, done => {\n\t\tconst testShell = 'wt';\n\t\tconst testCwd = 'c:/foo';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(opts.cwd, 'C:/foo');\n\t\t\t\tdone();\n\t\t\t\treturn { on: (evt: any) => evt };\n\t\t\t}\n\t\t};\n\t\tconst testService = new WindowsExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestShell,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`MacTerminalService - uses terminal from configuration`, done => {\n\t\tconst testCwd = 'path/to/workspace';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(args[1], mockConfig.terminal.external.osxExec);\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst testService = new MacExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`MacTerminalService - uses default terminal when configuration.terminal.external.osxExec is undefined`, done => {\n\t\tconst testCwd = 'path/to/workspace';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(args[1], DEFAULT_TERMINAL_OSX);\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst testService = new MacExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\t{ osxExec: undefined },\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`LinuxTerminalService - uses terminal from configuration`, done => {\n\t\tconst testCwd = 'path/to/workspace';\n\t\tconst mockSpawner: any = {\n\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\tstrictEqual(command, mockConfig.terminal.external.linuxExec);\n\t\t\t\tstrictEqual(opts.cwd, testCwd);\n\t\t\t\tdone();\n\t\t\t\treturn {\n\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst testService = new LinuxExternalTerminalService();\n\t\ttestService.spawnTerminal(\n\t\t\tmockSpawner,\n\t\t\tmockConfig.terminal.external,\n\t\t\ttestCwd\n\t\t);\n\t});\n\n\ttest(`LinuxTerminalService - uses default terminal when configuration.terminal.external.linuxExec is undefined`, done => {\n\t\tLinuxExternalTerminalService.getDefaultTerminalLinuxReady().then(defaultTerminalLinux => {\n\t\t\tconst testCwd = 'path/to/workspace';\n\t\t\tconst mockSpawner: any = {\n\t\t\t\tspawn: (command: any, args: any, opts: any) => {\n\t\t\t\t\tstrictEqual(command, defaultTerminalLinux);\n\t\t\t\t\tdone();\n\t\t\t\t\treturn {\n\t\t\t\t\t\ton: (evt: any) => evt\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t\tmockConfig.terminal.external.linuxExec = undefined;\n\t\t\tconst testService = new LinuxExternalTerminalService();\n\t\t\ttestService.spawnTerminal(\n\t\t\t\tmockSpawner,\n\t\t\t\tmockConfig.terminal.external,\n\t\t\t\ttestCwd\n\t\t\t);\n\t\t});\n\t});\n});\n"]}