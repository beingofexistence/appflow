{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/instantiation/test/common/instantiationServiceMock.ts"],"names":[],"mappings":"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","file":"instantiationServiceMock.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as sinon from 'sinon';\nimport { DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { InstantiationService, Trace } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\n\ninterface IServiceMock<T> {\n\tid: ServiceIdentifier<T>;\n\tservice: any;\n}\n\nconst isSinonSpyLike = (fn: Function): fn is sinon.SinonSpy => fn && 'callCount' in fn;\n\nexport class TestInstantiationService extends InstantiationService implements IDisposable {\n\n\tprivate _servciesMap: Map<ServiceIdentifier<any>, any>;\n\n\tconstructor(private _serviceCollection: ServiceCollection = new ServiceCollection(), strict: boolean = false, parent?: TestInstantiationService) {\n\t\tsuper(_serviceCollection, strict, parent);\n\n\t\tthis._servciesMap = new Map<ServiceIdentifier<any>, any>();\n\t}\n\n\tpublic get<T>(service: ServiceIdentifier<T>): T {\n\t\treturn super._getOrCreateServiceInstance(service, Trace.traceCreation(false, TestInstantiationService));\n\t}\n\n\tpublic set<T>(service: ServiceIdentifier<T>, instance: T): T {\n\t\treturn <T>this._serviceCollection.set(service, instance);\n\t}\n\n\tpublic mock<T>(service: ServiceIdentifier<T>): T | sinon.SinonMock {\n\t\treturn <T>this._create(service, { mock: true });\n\t}\n\n\tpublic stub<T>(service: ServiceIdentifier<T>, ctor: Function): T;\n\tpublic stub<T>(service: ServiceIdentifier<T>, obj: Partial<T>): T;\n\tpublic stub<T, V>(service: ServiceIdentifier<T>, ctor: Function, property: string, value: V): V extends Function ? sinon.SinonSpy : sinon.SinonStub;\n\tpublic stub<T, V>(service: ServiceIdentifier<T>, obj: Partial<T>, property: string, value: V): V extends Function ? sinon.SinonSpy : sinon.SinonStub;\n\tpublic stub<T, V>(service: ServiceIdentifier<T>, property: string, value: V): V extends Function ? sinon.SinonSpy : sinon.SinonStub;\n\tpublic stub<T>(serviceIdentifier: ServiceIdentifier<T>, arg2: any, arg3?: string, arg4?: any): sinon.SinonStub | sinon.SinonSpy {\n\t\tconst service = typeof arg2 !== 'string' ? arg2 : undefined;\n\t\tconst serviceMock: IServiceMock<any> = { id: serviceIdentifier, service: service };\n\t\tconst property = typeof arg2 === 'string' ? arg2 : arg3;\n\t\tconst value = typeof arg2 === 'string' ? arg3 : arg4;\n\n\t\tconst stubObject = <any>this._create(serviceMock, { stub: true }, service && !property);\n\t\tif (property) {\n\t\t\tif (stubObject[property]) {\n\t\t\t\tif (stubObject[property].hasOwnProperty('restore')) {\n\t\t\t\t\tstubObject[property].restore();\n\t\t\t\t}\n\t\t\t\tif (typeof value === 'function') {\n\t\t\t\t\tconst spy = isSinonSpyLike(value) ? value : sinon.spy(value);\n\t\t\t\t\tstubObject[property] = spy;\n\t\t\t\t\treturn spy;\n\t\t\t\t} else {\n\t\t\t\t\tconst stub = value ? sinon.stub().returns(value) : sinon.stub();\n\t\t\t\t\tstubObject[property] = stub;\n\t\t\t\t\treturn stub;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstubObject[property] = value;\n\t\t\t}\n\t\t}\n\t\treturn stubObject;\n\t}\n\n\tpublic stubPromise<T>(service?: ServiceIdentifier<T>, fnProperty?: string, value?: any): T | sinon.SinonStub;\n\tpublic stubPromise<T, V>(service?: ServiceIdentifier<T>, ctor?: any, fnProperty?: string, value?: V): V extends Function ? sinon.SinonSpy : sinon.SinonStub;\n\tpublic stubPromise<T, V>(service?: ServiceIdentifier<T>, obj?: any, fnProperty?: string, value?: V): V extends Function ? sinon.SinonSpy : sinon.SinonStub;\n\tpublic stubPromise(arg1?: any, arg2?: any, arg3?: any, arg4?: any): sinon.SinonStub | sinon.SinonSpy {\n\t\targ3 = typeof arg2 === 'string' ? Promise.resolve(arg3) : arg3;\n\t\targ4 = typeof arg2 !== 'string' && typeof arg3 === 'string' ? Promise.resolve(arg4) : arg4;\n\t\treturn this.stub(arg1, arg2, arg3, arg4);\n\t}\n\n\tpublic spy<T>(service: ServiceIdentifier<T>, fnProperty: string): sinon.SinonSpy {\n\t\tconst spy = sinon.spy();\n\t\tthis.stub(service, fnProperty, spy);\n\t\treturn spy;\n\t}\n\n\tprivate _create<T>(serviceMock: IServiceMock<T>, options: SinonOptions, reset?: boolean): any;\n\tprivate _create<T>(ctor: any, options: SinonOptions): any;\n\tprivate _create(arg1: any, options: SinonOptions, reset: boolean = false): any {\n\t\tif (this.isServiceMock(arg1)) {\n\t\t\tconst service = this._getOrCreateService(arg1, options, reset);\n\t\t\tthis._serviceCollection.set(arg1.id, service);\n\t\t\treturn service;\n\t\t}\n\t\treturn options.mock ? sinon.mock(arg1) : this._createStub(arg1);\n\t}\n\n\tprivate _getOrCreateService<T>(serviceMock: IServiceMock<T>, opts: SinonOptions, reset?: boolean): any {\n\t\tconst service: any = this._serviceCollection.get(serviceMock.id);\n\t\tif (!reset && service) {\n\t\t\tif (opts.mock && service['sinonOptions'] && !!service['sinonOptions'].mock) {\n\t\t\t\treturn service;\n\t\t\t}\n\t\t\tif (opts.stub && service['sinonOptions'] && !!service['sinonOptions'].stub) {\n\t\t\t\treturn service;\n\t\t\t}\n\t\t}\n\t\treturn this._createService(serviceMock, opts);\n\t}\n\n\tprivate _createService(serviceMock: IServiceMock<any>, opts: SinonOptions): any {\n\t\tserviceMock.service = serviceMock.service ? serviceMock.service : this._servciesMap.get(serviceMock.id);\n\t\tconst service = opts.mock ? sinon.mock(serviceMock.service) : this._createStub(serviceMock.service);\n\t\tservice['sinonOptions'] = opts;\n\t\treturn service;\n\t}\n\n\tprivate _createStub(arg: any): any {\n\t\treturn typeof arg === 'object' ? arg : sinon.createStubInstance(arg);\n\t}\n\n\tprivate isServiceMock(arg1: any): boolean {\n\t\treturn typeof arg1 === 'object' && arg1.hasOwnProperty('id');\n\t}\n\n\toverride createChild(services: ServiceCollection): TestInstantiationService {\n\t\treturn new TestInstantiationService(services, false, this);\n\t}\n\n\tdispose() {\n\t\tsinon.restore();\n\t}\n}\n\ninterface SinonOptions {\n\tmock?: boolean;\n\tstub?: boolean;\n}\n\nexport type ServiceIdCtorPair<T> = [id: ServiceIdentifier<T>, ctorOrInstance: T | (new (...args: any[]) => T)];\n\nexport function createServices(disposables: DisposableStore, services: ServiceIdCtorPair<any>[]): TestInstantiationService {\n\tconst serviceIdentifiers: ServiceIdentifier<any>[] = [];\n\tconst serviceCollection = new ServiceCollection();\n\n\tconst define = <T>(id: ServiceIdentifier<T>, ctorOrInstance: T | (new (...args: any[]) => T)) => {\n\t\tif (!serviceCollection.has(id)) {\n\t\t\tif (typeof ctorOrInstance === 'function') {\n\t\t\t\tserviceCollection.set(id, new SyncDescriptor(ctorOrInstance as any));\n\t\t\t} else {\n\t\t\t\tserviceCollection.set(id, ctorOrInstance);\n\t\t\t}\n\t\t}\n\t\tserviceIdentifiers.push(id);\n\t};\n\n\tfor (const [id, ctor] of services) {\n\t\tdefine(id, ctor);\n\t}\n\n\tconst instantiationService = disposables.add(new TestInstantiationService(serviceCollection, true));\n\tdisposables.add(toDisposable(() => {\n\t\tfor (const id of serviceIdentifiers) {\n\t\t\tconst instanceOrDescriptor = serviceCollection.get(id);\n\t\t\tif (typeof instanceOrDescriptor.dispose === 'function') {\n\t\t\t\tinstanceOrDescriptor.dispose();\n\t\t\t}\n\t\t}\n\t}));\n\treturn instantiationService;\n}\n"]}