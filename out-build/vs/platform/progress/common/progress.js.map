{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/progress/common/progress.ts"],"names":[],"mappings":"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","file":"progress.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction } from 'vs/base/common/actions';\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Disposable, DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { NotificationPriority } from 'vs/platform/notification/common/notification';\n\nexport const IProgressService = createDecorator<IProgressService>('progressService');\n\n/**\n * A progress service that can be used to report progress to various locations of the UI.\n */\nexport interface IProgressService {\n\n\treadonly _serviceBrand: undefined;\n\n\twithProgress<R>(\n\t\toptions: IProgressOptions | IProgressDialogOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\ttask: (progress: IProgress<IProgressStep>) => Promise<R>,\n\t\tonDidCancel?: (choice?: number) => void\n\t): Promise<R>;\n}\n\nexport interface IProgressIndicator {\n\n\t/**\n\t * Show progress customized with the provided flags.\n\t */\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\n\t/**\n\t * Indicate progress for the duration of the provided promise. Progress will stop in\n\t * any case of promise completion, error or cancellation.\n\t */\n\tshowWhile(promise: Promise<unknown>, delay?: number): Promise<void>;\n}\n\nexport const enum ProgressLocation {\n\tExplorer = 1,\n\tScm = 3,\n\tExtensions = 5,\n\tWindow = 10,\n\tNotification = 15,\n\tDialog = 20\n}\n\nexport interface IProgressOptions {\n\treadonly location: ProgressLocation | string;\n\treadonly title?: string;\n\treadonly source?: string | { label: string; id: string };\n\treadonly total?: number;\n\treadonly cancellable?: boolean;\n\treadonly buttons?: string[];\n}\n\nexport interface IProgressNotificationOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Notification;\n\treadonly primaryActions?: readonly IAction[];\n\treadonly secondaryActions?: readonly IAction[];\n\treadonly delay?: number;\n\treadonly priority?: NotificationPriority;\n\treadonly type?: 'syncing' | 'loading';\n}\n\nexport interface IProgressDialogOptions extends IProgressOptions {\n\treadonly delay?: number;\n\treadonly detail?: string;\n\treadonly sticky?: boolean;\n}\n\nexport interface IProgressWindowOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Window;\n\treadonly command?: string;\n\treadonly type?: 'syncing' | 'loading';\n}\n\nexport interface IProgressCompositeOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Explorer | ProgressLocation.Extensions | ProgressLocation.Scm | string;\n\treadonly delay?: number;\n}\n\nexport interface IProgressStep {\n\tmessage?: string;\n\tincrement?: number;\n\ttotal?: number;\n}\n\nexport interface IProgressRunner {\n\ttotal(value: number): void;\n\tworked(value: number): void;\n\tdone(): void;\n}\n\nexport const emptyProgressRunner = Object.freeze<IProgressRunner>({\n\ttotal() { },\n\tworked() { },\n\tdone() { }\n});\n\nexport interface IProgress<T> {\n\treport(item: T): void;\n}\n\nexport class Progress<T> implements IProgress<T> {\n\n\tstatic readonly None = Object.freeze<IProgress<unknown>>({ report() { } });\n\n\treport: (item: T) => void;\n\n\tprivate _value?: T;\n\tget value(): T | undefined { return this._value; }\n\n\tprivate _lastTask?: Promise<unknown>;\n\n\tconstructor(private callback: (data: T) => unknown, opts?: { async?: boolean }) {\n\t\tthis.report = opts?.async\n\t\t\t? this._reportAsync.bind(this)\n\t\t\t: this._reportSync.bind(this);\n\t}\n\n\tprivate _reportSync(item: T) {\n\t\tthis._value = item;\n\t\tthis.callback(this._value);\n\t}\n\n\tprivate _reportAsync(item: T) {\n\t\tPromise.resolve(this._lastTask).finally(() => {\n\t\t\tthis._value = item;\n\t\t\tconst r = this.callback(this._value);\n\t\t\tthis._lastTask = Promise.resolve(r).finally(() => this._lastTask = undefined);\n\t\t});\n\t}\n}\n\n/**\n * A helper to show progress during a long running operation. If the operation\n * is started multiple times, only the last invocation will drive the progress.\n */\nexport interface IOperation {\n\tid: number;\n\tisCurrent: () => boolean;\n\ttoken: CancellationToken;\n\tstop(): void;\n}\n\n/**\n * RAII-style progress instance that allows imperative reporting and hides\n * once `dispose()` is called.\n */\nexport class UnmanagedProgress extends Disposable {\n\tprivate readonly deferred = new DeferredPromise<void>();\n\tprivate reporter?: IProgress<IProgressStep>;\n\tprivate lastStep?: IProgressStep;\n\n\tconstructor(\n\t\toptions: IProgressOptions | IProgressDialogOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\t@IProgressService progressService: IProgressService,\n\t) {\n\t\tsuper();\n\t\tprogressService.withProgress(options, reporter => {\n\t\t\tthis.reporter = reporter;\n\t\t\tif (this.lastStep) {\n\t\t\t\treporter.report(this.lastStep);\n\t\t\t}\n\n\t\t\treturn this.deferred.p;\n\t\t});\n\n\t\tthis._register(toDisposable(() => this.deferred.complete()));\n\t}\n\n\treport(step: IProgressStep) {\n\t\tif (this.reporter) {\n\t\t\tthis.reporter.report(step);\n\t\t} else {\n\t\t\tthis.lastStep = step;\n\t\t}\n\t}\n}\n\nexport class LongRunningOperation extends Disposable {\n\tprivate currentOperationId = 0;\n\tprivate readonly currentOperationDisposables = this._register(new DisposableStore());\n\tprivate currentProgressRunner: IProgressRunner | undefined;\n\tprivate currentProgressTimeout: any;\n\n\tconstructor(\n\t\tprivate progressIndicator: IProgressIndicator\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(progressDelay: number): IOperation {\n\n\t\t// Stop any previous operation\n\t\tthis.stop();\n\n\t\t// Start new\n\t\tconst newOperationId = ++this.currentOperationId;\n\t\tconst newOperationToken = new CancellationTokenSource();\n\t\tthis.currentProgressTimeout = setTimeout(() => {\n\t\t\tif (newOperationId === this.currentOperationId) {\n\t\t\t\tthis.currentProgressRunner = this.progressIndicator.show(true);\n\t\t\t}\n\t\t}, progressDelay);\n\n\t\tthis.currentOperationDisposables.add(toDisposable(() => clearTimeout(this.currentProgressTimeout)));\n\t\tthis.currentOperationDisposables.add(toDisposable(() => newOperationToken.cancel()));\n\t\tthis.currentOperationDisposables.add(toDisposable(() => this.currentProgressRunner ? this.currentProgressRunner.done() : undefined));\n\n\t\treturn {\n\t\t\tid: newOperationId,\n\t\t\ttoken: newOperationToken.token,\n\t\t\tstop: () => this.doStop(newOperationId),\n\t\t\tisCurrent: () => this.currentOperationId === newOperationId\n\t\t};\n\t}\n\n\tstop(): void {\n\t\tthis.doStop(this.currentOperationId);\n\t}\n\n\tprivate doStop(operationId: number): void {\n\t\tif (this.currentOperationId === operationId) {\n\t\t\tthis.currentOperationDisposables.clear();\n\t\t}\n\t}\n}\n\nexport const IEditorProgressService = createDecorator<IEditorProgressService>('editorProgressService');\n\n/**\n * A progress service that will report progress local to the editor triggered from.\n */\nexport interface IEditorProgressService extends IProgressIndicator {\n\n\treadonly _serviceBrand: undefined;\n}\n"]}