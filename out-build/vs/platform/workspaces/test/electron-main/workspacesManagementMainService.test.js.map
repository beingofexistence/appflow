{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/workspaces/test/electron-main/workspacesManagementMainService.test.ts"],"names":[],"mappings":"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","file":"workspacesManagementMainService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport { isUNC, toSlashes } from 'vs/base/common/extpath';\nimport { normalizeDriveLetter } from 'vs/base/common/labels';\nimport * as path from 'vs/base/common/path';\nimport { isWindows } from 'vs/base/common/platform';\nimport { extUriBiasedIgnorePathCase } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport * as pfs from 'vs/base/node/pfs';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { flakySuite, getRandomTestPath } from 'vs/base/test/node/testUtils';\nimport { IWorkspaceBackupInfo, IFolderBackupInfo } from 'vs/platform/backup/common/backup';\nimport { IBackupMainService } from 'vs/platform/backup/electron-main/backup';\nimport { IEmptyWindowBackupInfo } from 'vs/platform/backup/node/backup';\nimport { INativeOpenDialogOptions } from 'vs/platform/dialogs/common/dialogs';\nimport { IDialogMainService } from 'vs/platform/dialogs/electron-main/dialogMainService';\nimport { EnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { OPTIONS, parseArgs } from 'vs/platform/environment/node/argv';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { SaveStrategy, StateService } from 'vs/platform/state/node/stateService';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { UserDataProfilesMainService } from 'vs/platform/userDataProfile/electron-main/userDataProfile';\nimport { IRawFileWorkspaceFolder, IRawUriWorkspaceFolder, WORKSPACE_EXTENSION } from 'vs/platform/workspace/common/workspace';\nimport { IStoredWorkspace, IStoredWorkspaceFolder, IWorkspaceFolderCreationData, rewriteWorkspaceFileForNewLocation } from 'vs/platform/workspaces/common/workspaces';\nimport { WorkspacesManagementMainService } from 'vs/platform/workspaces/electron-main/workspacesManagementMainService';\n\nflakySuite('WorkspacesManagementMainService', () => {\n\n\tclass TestDialogMainService implements IDialogMainService {\n\n\t\tdeclare readonly _serviceBrand: undefined;\n\n\t\tpickFileFolder(options: INativeOpenDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<string[] | undefined> { throw new Error('Method not implemented.'); }\n\t\tpickFolder(options: INativeOpenDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<string[] | undefined> { throw new Error('Method not implemented.'); }\n\t\tpickFile(options: INativeOpenDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<string[] | undefined> { throw new Error('Method not implemented.'); }\n\t\tpickWorkspace(options: INativeOpenDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<string[] | undefined> { throw new Error('Method not implemented.'); }\n\t\tshowMessageBox(options: Electron.MessageBoxOptions, window?: Electron.BrowserWindow | undefined): Promise<Electron.MessageBoxReturnValue> { throw new Error('Method not implemented.'); }\n\t\tshowSaveDialog(options: Electron.SaveDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<Electron.SaveDialogReturnValue> { throw new Error('Method not implemented.'); }\n\t\tshowOpenDialog(options: Electron.OpenDialogOptions, window?: Electron.BrowserWindow | undefined): Promise<Electron.OpenDialogReturnValue> { throw new Error('Method not implemented.'); }\n\t}\n\n\tclass TestBackupMainService implements IBackupMainService {\n\n\t\tdeclare readonly _serviceBrand: undefined;\n\n\t\tisHotExitEnabled(): boolean { throw new Error('Method not implemented.'); }\n\t\tgetEmptyWindowBackups(): IEmptyWindowBackupInfo[] { throw new Error('Method not implemented.'); }\n\t\tregisterWorkspaceBackup(workspaceInfo: IWorkspaceBackupInfo): string;\n\t\tregisterWorkspaceBackup(workspaceInfo: IWorkspaceBackupInfo, migrateFrom: string): Promise<string>;\n\t\tregisterWorkspaceBackup(workspaceInfo: unknown, migrateFrom?: unknown): string | Promise<string> { throw new Error('Method not implemented.'); }\n\t\tregisterFolderBackup(folder: IFolderBackupInfo): string { throw new Error('Method not implemented.'); }\n\t\tregisterEmptyWindowBackup(empty: IEmptyWindowBackupInfo): string { throw new Error('Method not implemented.'); }\n\t\tasync getDirtyWorkspaces(): Promise<(IWorkspaceBackupInfo | IFolderBackupInfo)[]> { return []; }\n\t}\n\n\tfunction createUntitledWorkspace(folders: string[], names?: string[]) {\n\t\treturn service.createUntitledWorkspace(folders.map((folder, index) => ({ uri: URI.file(folder), name: names ? names[index] : undefined } as IWorkspaceFolderCreationData)));\n\t}\n\n\tfunction createWorkspace(workspaceConfigPath: string, folders: (string | URI)[], names?: string[]): void {\n\t\tconst ws: IStoredWorkspace = {\n\t\t\tfolders: []\n\t\t};\n\n\t\tfor (let i = 0; i < folders.length; i++) {\n\t\t\tconst f = folders[i];\n\t\t\tconst s: IStoredWorkspaceFolder = f instanceof URI ? { uri: f.toString() } : { path: f };\n\t\t\tif (names) {\n\t\t\t\ts.name = names[i];\n\t\t\t}\n\t\t\tws.folders.push(s);\n\t\t}\n\n\t\tfs.writeFileSync(workspaceConfigPath, JSON.stringify(ws));\n\t}\n\n\tlet testDir: string;\n\tlet untitledWorkspacesHomePath: string;\n\tlet environmentMainService: EnvironmentMainService;\n\tlet service: WorkspacesManagementMainService;\n\n\tconst cwd = process.cwd();\n\tconst tmpDir = os.tmpdir();\n\n\tsetup(async () => {\n\t\ttestDir = getRandomTestPath(tmpDir, 'vsctests', 'workspacesmanagementmainservice');\n\t\tuntitledWorkspacesHomePath = path.join(testDir, 'Workspaces');\n\n\t\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\n\t\tenvironmentMainService = new class TestEnvironmentService extends EnvironmentMainService {\n\n\t\t\tconstructor() {\n\t\t\t\tsuper(parseArgs(process.argv, OPTIONS), productService);\n\t\t\t}\n\n\t\t\toverride get untitledWorkspacesHome(): URI {\n\t\t\t\treturn URI.file(untitledWorkspacesHomePath);\n\t\t\t}\n\t\t};\n\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = new FileService(logService);\n\t\tservice = new WorkspacesManagementMainService(environmentMainService, logService, new UserDataProfilesMainService(new StateService(SaveStrategy.DELAYED, environmentMainService, logService, fileService), new UriIdentityService(fileService), environmentMainService, fileService, logService), new TestBackupMainService(), new TestDialogMainService());\n\n\t\treturn pfs.Promises.mkdir(untitledWorkspacesHomePath, { recursive: true });\n\t});\n\n\tteardown(() => {\n\t\tservice.dispose();\n\n\t\treturn pfs.Promises.rm(testDir);\n\t});\n\n\tfunction assertPathEquals(pathInWorkspaceFile: string, pathOnDisk: string): void {\n\t\tif (isWindows) {\n\t\t\tpathInWorkspaceFile = normalizeDriveLetter(pathInWorkspaceFile);\n\t\t\tpathOnDisk = normalizeDriveLetter(pathOnDisk);\n\t\t\tif (!isUNC(pathOnDisk)) {\n\t\t\t\tpathOnDisk = toSlashes(pathOnDisk); // workspace file is using slashes for all paths except where mandatory\n\t\t\t}\n\t\t}\n\n\t\tassert.strictEqual(pathInWorkspaceFile, pathOnDisk);\n\t}\n\n\tfunction assertEqualURI(u1: URI, u2: URI): void {\n\t\tassert.strictEqual(u1.toString(), u2.toString());\n\t}\n\n\ttest('createWorkspace (folders)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tassert.ok(workspace);\n\t\tassert.ok(fs.existsSync(workspace.configPath.fsPath));\n\t\tassert.ok(service.isUntitledWorkspace(workspace));\n\n\t\tconst ws = (JSON.parse(fs.readFileSync(workspace.configPath.fsPath).toString()) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 2);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, cwd);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, tmpDir);\n\t\tassert.ok(!(<IRawFileWorkspaceFolder>ws.folders[0]).name);\n\t\tassert.ok(!(<IRawFileWorkspaceFolder>ws.folders[1]).name);\n\t});\n\n\ttest('createWorkspace (folders with name)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir], ['currentworkingdirectory', 'tempdir']);\n\t\tassert.ok(workspace);\n\t\tassert.ok(fs.existsSync(workspace.configPath.fsPath));\n\t\tassert.ok(service.isUntitledWorkspace(workspace));\n\n\t\tconst ws = (JSON.parse(fs.readFileSync(workspace.configPath.fsPath).toString()) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 2);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, cwd);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, tmpDir);\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>ws.folders[0]).name, 'currentworkingdirectory');\n\t\tassert.strictEqual((<IRawFileWorkspaceFolder>ws.folders[1]).name, 'tempdir');\n\t});\n\n\ttest('createUntitledWorkspace (folders as other resource URIs)', async () => {\n\t\tconst folder1URI = URI.parse('myscheme://server/work/p/f1');\n\t\tconst folder2URI = URI.parse('myscheme://server/work/o/f3');\n\n\t\tconst workspace = await service.createUntitledWorkspace([{ uri: folder1URI }, { uri: folder2URI }], 'server');\n\t\tassert.ok(workspace);\n\t\tassert.ok(fs.existsSync(workspace.configPath.fsPath));\n\t\tassert.ok(service.isUntitledWorkspace(workspace));\n\n\t\tconst ws = (JSON.parse(fs.readFileSync(workspace.configPath.fsPath).toString()) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 2);\n\t\tassert.strictEqual((<IRawUriWorkspaceFolder>ws.folders[0]).uri, folder1URI.toString(true));\n\t\tassert.strictEqual((<IRawUriWorkspaceFolder>ws.folders[1]).uri, folder2URI.toString(true));\n\t\tassert.ok(!(<IRawFileWorkspaceFolder>ws.folders[0]).name);\n\t\tassert.ok(!(<IRawFileWorkspaceFolder>ws.folders[1]).name);\n\t\tassert.strictEqual(ws.remoteAuthority, 'server');\n\t});\n\n\ttest('resolveWorkspace', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tassert.ok(await service.resolveLocalWorkspace(workspace.configPath));\n\n\t\t// make it a valid workspace path\n\t\tconst newPath = path.join(path.dirname(workspace.configPath.fsPath), `workspace.${WORKSPACE_EXTENSION}`);\n\t\tfs.renameSync(workspace.configPath.fsPath, newPath);\n\t\tworkspace.configPath = URI.file(newPath);\n\n\t\tconst resolved = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassert.strictEqual(2, resolved!.folders.length);\n\t\tassertEqualURI(resolved!.configPath, workspace.configPath);\n\t\tassert.ok(resolved!.id);\n\t\tfs.writeFileSync(workspace.configPath.fsPath, JSON.stringify({ something: 'something' })); // invalid workspace\n\n\t\tconst resolvedInvalid = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassert.ok(!resolvedInvalid);\n\n\t\tfs.writeFileSync(workspace.configPath.fsPath, JSON.stringify({ transient: true, folders: [] })); // transient worksapce\n\t\tconst resolvedTransient = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassert.ok(resolvedTransient?.transient);\n\t});\n\n\ttest('resolveWorkspace (support relative paths)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tfs.writeFileSync(workspace.configPath.fsPath, JSON.stringify({ folders: [{ path: './ticino-playground/lib' }] }));\n\n\t\tconst resolved = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassertEqualURI(resolved!.folders[0].uri, URI.file(path.join(path.dirname(workspace.configPath.fsPath), 'ticino-playground', 'lib')));\n\t});\n\n\ttest('resolveWorkspace (support relative paths #2)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tfs.writeFileSync(workspace.configPath.fsPath, JSON.stringify({ folders: [{ path: './ticino-playground/lib/../other' }] }));\n\n\t\tconst resolved = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassertEqualURI(resolved!.folders[0].uri, URI.file(path.join(path.dirname(workspace.configPath.fsPath), 'ticino-playground', 'other')));\n\t});\n\n\ttest('resolveWorkspace (support relative paths #3)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tfs.writeFileSync(workspace.configPath.fsPath, JSON.stringify({ folders: [{ path: 'ticino-playground/lib' }] }));\n\n\t\tconst resolved = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassertEqualURI(resolved!.folders[0].uri, URI.file(path.join(path.dirname(workspace.configPath.fsPath), 'ticino-playground', 'lib')));\n\t});\n\n\ttest('resolveWorkspace (support invalid JSON via fault tolerant parsing)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tfs.writeFileSync(workspace.configPath.fsPath, '{ \"folders\": [ { \"path\": \"./ticino-playground/lib\" } , ] }'); // trailing comma\n\n\t\tconst resolved = await service.resolveLocalWorkspace(workspace.configPath);\n\t\tassertEqualURI(resolved!.folders[0].uri, URI.file(path.join(path.dirname(workspace.configPath.fsPath), 'ticino-playground', 'lib')));\n\t});\n\n\ttest('rewriteWorkspaceFileForNewLocation', async () => {\n\t\tconst folder1 = cwd;  // absolute path because outside of tmpDir\n\t\tconst tmpInsideDir = path.join(tmpDir, 'inside');\n\n\t\tconst firstConfigPath = path.join(tmpDir, 'myworkspace0.code-workspace');\n\t\tcreateWorkspace(firstConfigPath, [folder1, 'inside', path.join('inside', 'somefolder')]);\n\t\tconst origContent = fs.readFileSync(firstConfigPath).toString();\n\n\t\tlet origConfigPath = URI.file(firstConfigPath);\n\t\tlet workspaceConfigPath = URI.file(path.join(tmpDir, 'inside', 'myworkspace1.code-workspace'));\n\t\tlet newContent = rewriteWorkspaceFileForNewLocation(origContent, origConfigPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tlet ws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 3);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, folder1); // absolute path because outside of tmpdir\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, '.');\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[2]).path, 'somefolder');\n\n\t\torigConfigPath = workspaceConfigPath;\n\t\tworkspaceConfigPath = URI.file(path.join(tmpDir, 'myworkspace2.code-workspace'));\n\t\tnewContent = rewriteWorkspaceFileForNewLocation(newContent, origConfigPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 3);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, folder1);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, 'inside');\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[2]).path, 'inside/somefolder');\n\n\t\torigConfigPath = workspaceConfigPath;\n\t\tworkspaceConfigPath = URI.file(path.join(tmpDir, 'other', 'myworkspace2.code-workspace'));\n\t\tnewContent = rewriteWorkspaceFileForNewLocation(newContent, origConfigPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 3);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, folder1);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, '../inside');\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[2]).path, '../inside/somefolder');\n\n\t\torigConfigPath = workspaceConfigPath;\n\t\tworkspaceConfigPath = URI.parse('foo://foo/bar/myworkspace2.code-workspace');\n\t\tnewContent = rewriteWorkspaceFileForNewLocation(newContent, origConfigPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassert.strictEqual(ws.folders.length, 3);\n\t\tassert.strictEqual((<IRawUriWorkspaceFolder>ws.folders[0]).uri, URI.file(folder1).toString(true));\n\t\tassert.strictEqual((<IRawUriWorkspaceFolder>ws.folders[1]).uri, URI.file(tmpInsideDir).toString(true));\n\t\tassert.strictEqual((<IRawUriWorkspaceFolder>ws.folders[2]).uri, URI.file(path.join(tmpInsideDir, 'somefolder')).toString(true));\n\n\t\tfs.unlinkSync(firstConfigPath);\n\t});\n\n\ttest('rewriteWorkspaceFileForNewLocation (preserves comments)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir, path.join(tmpDir, 'somefolder')]);\n\t\tconst workspaceConfigPath = URI.file(path.join(tmpDir, `myworkspace.${Date.now()}.${WORKSPACE_EXTENSION}`));\n\n\t\tlet origContent = fs.readFileSync(workspace.configPath.fsPath).toString();\n\t\torigContent = `// this is a comment\\n${origContent}`;\n\n\t\tconst newContent = rewriteWorkspaceFileForNewLocation(origContent, workspace.configPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tassert.strictEqual(0, newContent.indexOf('// this is a comment'));\n\t\tawait service.deleteUntitledWorkspace(workspace);\n\t});\n\n\ttest('rewriteWorkspaceFileForNewLocation (preserves forward slashes)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir, path.join(tmpDir, 'somefolder')]);\n\t\tconst workspaceConfigPath = URI.file(path.join(tmpDir, `myworkspace.${Date.now()}.${WORKSPACE_EXTENSION}`));\n\n\t\tlet origContent = fs.readFileSync(workspace.configPath.fsPath).toString();\n\t\torigContent = origContent.replace(/[\\\\]/g, '/'); // convert backslash to slash\n\n\t\tconst newContent = rewriteWorkspaceFileForNewLocation(origContent, workspace.configPath, false, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tconst ws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassert.ok(ws.folders.every(f => (<IRawFileWorkspaceFolder>f).path.indexOf('\\\\') < 0));\n\t\tawait service.deleteUntitledWorkspace(workspace);\n\t});\n\n\t(!isWindows ? test.skip : test)('rewriteWorkspaceFileForNewLocation (unc paths)', async () => {\n\t\tconst workspaceLocation = path.join(tmpDir, 'wsloc');\n\t\tconst folder1Location = 'x:\\\\foo';\n\t\tconst folder2Location = '\\\\\\\\server\\\\share2\\\\some\\\\path';\n\t\tconst folder3Location = path.join(workspaceLocation, 'inner', 'more');\n\n\t\tconst workspace = await createUntitledWorkspace([folder1Location, folder2Location, folder3Location]);\n\t\tconst workspaceConfigPath = URI.file(path.join(workspaceLocation, `myworkspace.${Date.now()}.${WORKSPACE_EXTENSION}`));\n\t\tconst origContent = fs.readFileSync(workspace.configPath.fsPath).toString();\n\t\tconst newContent = rewriteWorkspaceFileForNewLocation(origContent, workspace.configPath, true, workspaceConfigPath, extUriBiasedIgnorePathCase);\n\t\tconst ws = (JSON.parse(newContent) as IStoredWorkspace);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[0]).path, folder1Location);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[1]).path, folder2Location);\n\t\tassertPathEquals((<IRawFileWorkspaceFolder>ws.folders[2]).path, 'inner/more');\n\n\t\tawait service.deleteUntitledWorkspace(workspace);\n\t});\n\n\ttest('deleteUntitledWorkspace (untitled)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tassert.ok(fs.existsSync(workspace.configPath.fsPath));\n\t\tawait service.deleteUntitledWorkspace(workspace);\n\t\tassert.ok(!fs.existsSync(workspace.configPath.fsPath));\n\t});\n\n\ttest('deleteUntitledWorkspace (saved)', async () => {\n\t\tconst workspace = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tawait service.deleteUntitledWorkspace(workspace);\n\t});\n\n\ttest('getUntitledWorkspace', async function () {\n\t\tawait service.initialize();\n\t\tlet untitled = service.getUntitledWorkspaces();\n\t\tassert.strictEqual(untitled.length, 0);\n\n\t\tconst untitledOne = await createUntitledWorkspace([cwd, tmpDir]);\n\t\tassert.ok(fs.existsSync(untitledOne.configPath.fsPath));\n\n\t\tawait service.initialize();\n\t\tuntitled = service.getUntitledWorkspaces();\n\t\tassert.strictEqual(1, untitled.length);\n\t\tassert.strictEqual(untitledOne.id, untitled[0].workspace.id);\n\n\t\tawait service.deleteUntitledWorkspace(untitledOne);\n\t\tawait service.initialize();\n\t\tuntitled = service.getUntitledWorkspaces();\n\t\tassert.strictEqual(0, untitled.length);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}