{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/workspaces/test/electron-main/workspaces.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAYhG,IAAA,sBAAU,EAAC,YAAY,EAAE,GAAG,EAAE;QAE7B,IAAI,OAAe,CAAC;QAEpB,MAAM,MAAM,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC;QAE3B,KAAK,CAAC,KAAK,IAAI,EAAE;YAChB,OAAO,GAAG,IAAA,eAAG,EAAe,MAAM,EAAE,UAAU,EAAE,iCAAiC,CAAC,CAAC;YAEnF,OAAO,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,OAAO,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8BAA8B,EAAE,KAAK;YACzC,MAAM,WAAW,GAAG,SAAG,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;YAC7D,MAAM,aAAa,GAAG,IAAA,iBAAI,EAA+B,WAAW,CAAC,CAAC;YACtE,MAAM,CAAC,EAAE,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;YAE7B,MAAM,mBAAmB,GAAG,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YAC/D,MAAM,qBAAqB,GAAG,IAAA,iBAAI,EAA+B,mBAAmB,CAAC,CAAC;YACtF,MAAM,CAAC,EAAE,CAAC,CAAC,qBAAqB,CAAC,CAAC;YAElC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YAEvC,MAAM,gBAAgB,GAAG,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YAC5D,MAAM,kBAAkB,GAAG,IAAA,iBAAI,EAA+B,gBAAgB,EAAE,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;YACtH,MAAM,CAAC,EAAE,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE;YAExC,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,IAAA,iBAAI,EAAmB,SAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,EAAE,aAAE,CAAS,wBAAwB,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC;YAEtL,mCAAmC;YACnC,MAAM,QAAQ,GAAG;gBAChB,GAAG,EAAE,aAAa;gBAClB,WAAW,EAAE,aAAa;gBAC1B,SAAS,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC;aAClC,CAAC;YACF,MAAM,CAAC,WAAW,CAAC,IAAA,iBAAI,EAA+B,SAAG,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,QAAoB,CAAC,EAAE,EAAE,EAAE,aAAE,CAAQ,wBAAwB,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC;YAExN,gCAAgC;YAChC,MAAM,CAAC,WAAW,CAAC,IAAA,iBAAI,EAAmB,SAAG,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,EAAE,EAAE,kCAAkC,CAAC,CAAC;YAE1H,oCAAoC;YACpC,MAAM,CAAC,WAAW,CAAC,IAAA,iBAAI,EAA+B,SAAG,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,EAAE,EAAE,EAAE,kCAAkC,CAAC,CAAC;QACxI,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"workspaces.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'vs/base/common/path';\nimport { isWindows } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport * as pfs from 'vs/base/node/pfs';\nimport { flakySuite, getRandomTestPath } from 'vs/base/test/node/testUtils';\nimport { getSingleFolderWorkspaceIdentifier, getWorkspaceIdentifier } from 'vs/platform/workspaces/node/workspaces';\n\nflakySuite('Workspaces', () => {\n\n\tlet testDir: string;\n\n\tconst tmpDir = os.tmpdir();\n\n\tsetup(async () => {\n\t\ttestDir = getRandomTestPath(tmpDir, 'vsctests', 'workspacesmanagementmainservice');\n\n\t\treturn pfs.Promises.mkdir(testDir, { recursive: true });\n\t});\n\n\tteardown(() => {\n\t\treturn pfs.Promises.rm(testDir);\n\t});\n\n\ttest('getSingleWorkspaceIdentifier', async function () {\n\t\tconst nonLocalUri = URI.parse('myscheme://server/work/p/f1');\n\t\tconst nonLocalUriId = getSingleFolderWorkspaceIdentifier(nonLocalUri);\n\t\tassert.ok(nonLocalUriId?.id);\n\n\t\tconst localNonExistingUri = URI.file(path.join(testDir, 'f1'));\n\t\tconst localNonExistingUriId = getSingleFolderWorkspaceIdentifier(localNonExistingUri);\n\t\tassert.ok(!localNonExistingUriId);\n\n\t\tfs.mkdirSync(path.join(testDir, 'f1'));\n\n\t\tconst localExistingUri = URI.file(path.join(testDir, 'f1'));\n\t\tconst localExistingUriId = getSingleFolderWorkspaceIdentifier(localExistingUri, fs.statSync(localExistingUri.fsPath));\n\t\tassert.ok(localExistingUriId?.id);\n\t});\n\n\ttest('workspace identifiers are stable', function () {\n\n\t\t// workspace identifier (local)\n\t\tassert.strictEqual(getWorkspaceIdentifier(URI.file('/hello/test')).id, isWindows  /* slash vs backslash */ ? '9f3efb614e2cd7924e4b8076e6c72233' : 'e36736311be12ff6d695feefe415b3e8');\n\n\t\t// single folder identifier (local)\n\t\tconst fakeStat = {\n\t\t\tino: 1611312115129,\n\t\t\tbirthtimeMs: 1611312115129,\n\t\t\tbirthtime: new Date(1611312115129)\n\t\t};\n\t\tassert.strictEqual(getSingleFolderWorkspaceIdentifier(URI.file('/hello/test'), fakeStat as fs.Stats)?.id, isWindows /* slash vs backslash */ ? '9a8441e897e5174fa388bc7ef8f7a710' : '1d726b3d516dc2a6d343abf4797eaaef');\n\n\t\t// workspace identifier (remote)\n\t\tassert.strictEqual(getWorkspaceIdentifier(URI.parse('vscode-remote:/hello/test')).id, '786de4f224d57691f218dc7f31ee2ee3');\n\n\t\t// single folder identifier (remote)\n\t\tassert.strictEqual(getSingleFolderWorkspaceIdentifier(URI.parse('vscode-remote:/hello/test'))?.id, '786de4f224d57691f218dc7f31ee2ee3');\n\t});\n});\n"]}