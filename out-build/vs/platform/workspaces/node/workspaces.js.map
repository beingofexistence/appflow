{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/workspaces/node/workspaces.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG;;;OAGG;IACU,QAAA,IAAI,GAA4B,GAAG,GAAG,CAAC,CAAC;IAErD,yDAAyD;IACzD,yDAAyD;IACzD,yDAAyD;IAEzD,SAAgB,IAAI,CAAmB,UAAe;QAErD,SAAS,cAAc;YACtB,IAAI,aAAa,GAAG,UAAU,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAA,eAAG,EAAY,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;YAC5G,IAAI,CAAC,aAAE,EAAO;gBACb,aAAa,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC,oCAAoC;aACjF;YAED,OAAO,IAAA,mBAAU,EAAC,KAAK,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC;QAED,OAAO;YACN,EAAE,EAAE,cAAc,EAAE;YACpB,UAAU;SACV,CAAC;IACH,CAAC;IAfD,oBAeC;IAQD,SAAgB,IAAI,CAA+B,SAAc,EAAE,UAAkB;QAEpF,SAAS,WAAW;YAEnB,6CAA6C;YAC7C,IAAI,SAAS,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBACtC,OAAO,IAAA,mBAAU,EAAC,KAAK,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACpE;YAED,+CAA+C;YAC/C,+CAA+C;YAC/C,gDAAgD;YAChD,iDAAiD;YACjD,iDAAiD;YACjD,OAAO;YAEP,IAAI,CAAC,UAAU,EAAE;gBAChB,OAAO,SAAS,CAAC;aACjB;YAED,IAAI,KAAyB,CAAC;YAC9B,IAAI,aAAE,EAAO;gBACZ,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,0EAA0E;aAClG;iBAAM,IAAI,aAAE,EAAW;gBACvB,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,wCAAwC;aAChF;iBAAM,IAAI,aAAE,EAAS;gBACrB,IAAI,OAAO,UAAU,CAAC,WAAW,KAAK,QAAQ,EAAE;oBAC/C,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,mHAAmH;iBAC/J;qBAAM;oBACN,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;iBACvC;aACD;YAED,OAAO,IAAA,mBAAU,EAAC,KAAK,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACpG,CAAC;QAED,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;QAC/B,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YACjC,OAAO;gBACN,EAAE,EAAE,QAAQ;gBACZ,GAAG,EAAE,SAAS;aACd,CAAC;SACF;QAED,OAAO,SAAS,CAAC,CAAC,iBAAiB;IACpC,CAAC;IA7CD,oBA6CC;IAED,yDAAyD;IACzD,yDAAyD;IACzD,yDAAyD;IAEzD,SAAgB,IAAI;QACnB,OAAO;YACN,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE;SAC9D,CAAC;IACH,CAAC;IAJD,oBAIC","file":"workspaces.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createHash } from 'crypto';\nimport { Stats } from 'fs';\nimport { Schemas } from 'vs/base/common/network';\nimport { isLinux, isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { originalFSPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { IEmptyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\n\n/**\n * Length of workspace identifiers that are not empty. Those are\n * MD5 hashes (128bits / 4 due to hex presentation).\n */\nexport const NON_EMPTY_WORKSPACE_ID_LENGTH = 128 / 4;\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// NOTE: DO NOT CHANGE. IDENTIFIERS HAVE TO REMAIN STABLE\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nexport function getWorkspaceIdentifier(configPath: URI): IWorkspaceIdentifier {\n\n\tfunction getWorkspaceId(): string {\n\t\tlet configPathStr = configPath.scheme === Schemas.file ? originalFSPath(configPath) : configPath.toString();\n\t\tif (!isLinux) {\n\t\t\tconfigPathStr = configPathStr.toLowerCase(); // sanitize for platform file system\n\t\t}\n\n\t\treturn createHash('md5').update(configPathStr).digest('hex');\n\t}\n\n\treturn {\n\t\tid: getWorkspaceId(),\n\t\tconfigPath\n\t};\n}\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// NOTE: DO NOT CHANGE. IDENTIFIERS HAVE TO REMAIN STABLE\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nexport function getSingleFolderWorkspaceIdentifier(folderUri: URI): ISingleFolderWorkspaceIdentifier | undefined;\nexport function getSingleFolderWorkspaceIdentifier(folderUri: URI, folderStat: Stats): ISingleFolderWorkspaceIdentifier;\nexport function getSingleFolderWorkspaceIdentifier(folderUri: URI, folderStat?: Stats): ISingleFolderWorkspaceIdentifier | undefined {\n\n\tfunction getFolderId(): string | undefined {\n\n\t\t// Remote: produce a hash from the entire URI\n\t\tif (folderUri.scheme !== Schemas.file) {\n\t\t\treturn createHash('md5').update(folderUri.toString()).digest('hex');\n\t\t}\n\n\t\t// Local: we use the ctime as extra salt to the\n\t\t// identifier so that folders getting recreated\n\t\t// result in a different identifier. However, if\n\t\t// the stat is not provided we return `undefined`\n\t\t// to ensure identifiers are stable for the given\n\t\t// URI.\n\n\t\tif (!folderStat) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet ctime: number | undefined;\n\t\tif (isLinux) {\n\t\t\tctime = folderStat.ino; // Linux: birthtime is ctime, so we cannot use it! We use the ino instead!\n\t\t} else if (isMacintosh) {\n\t\t\tctime = folderStat.birthtime.getTime(); // macOS: birthtime is fine to use as is\n\t\t} else if (isWindows) {\n\t\t\tif (typeof folderStat.birthtimeMs === 'number') {\n\t\t\t\tctime = Math.floor(folderStat.birthtimeMs); // Windows: fix precision issue in node.js 8.x to get 7.x results (see https://github.com/nodejs/node/issues/19897)\n\t\t\t} else {\n\t\t\t\tctime = folderStat.birthtime.getTime();\n\t\t\t}\n\t\t}\n\n\t\treturn createHash('md5').update(folderUri.fsPath).update(ctime ? String(ctime) : '').digest('hex');\n\t}\n\n\tconst folderId = getFolderId();\n\tif (typeof folderId === 'string') {\n\t\treturn {\n\t\t\tid: folderId,\n\t\t\turi: folderUri\n\t\t};\n\t}\n\n\treturn undefined; // invalid folder\n}\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// NOTE: DO NOT CHANGE. IDENTIFIERS HAVE TO REMAIN STABLE\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nexport function createEmptyWorkspaceIdentifier(): IEmptyWorkspaceIdentifier {\n\treturn {\n\t\tid: (Date.now() + Math.round(Math.random() * 1000)).toString()\n\t};\n}\n"]}