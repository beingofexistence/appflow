{"version":3,"sources":["vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts"],"names":[],"mappings":"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","file":"workspacesHistoryMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app, JumpListCategory, JumpListItem } from 'electron';\nimport { coalesce } from 'vs/base/common/arrays';\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport { Emitter, Event as CommonEvent } from 'vs/base/common/event';\nimport { normalizeDriveLetter, splitRecentLabel } from 'vs/base/common/labels';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { basename, extUriBiasedIgnorePathCase, originalFSPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { Promises } from 'vs/base/node/pfs';\nimport { localize } from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILifecycleMainService, LifecycleMainPhase } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IApplicationStorageMainService } from 'vs/platform/storage/electron-main/storageMainService';\nimport { IRecent, IRecentFile, IRecentFolder, IRecentlyOpened, IRecentWorkspace, isRecentFile, isRecentFolder, isRecentWorkspace, restoreRecentlyOpened, toStoreData } from 'vs/platform/workspaces/common/workspaces';\nimport { IWorkspaceIdentifier, WORKSPACE_EXTENSION } from 'vs/platform/workspace/common/workspace';\nimport { IWorkspacesManagementMainService } from 'vs/platform/workspaces/electron-main/workspacesManagementMainService';\nimport { ResourceMap } from 'vs/base/common/map';\n\nexport const IWorkspacesHistoryMainService = createDecorator<IWorkspacesHistoryMainService>('workspacesHistoryMainService');\n\nexport interface IWorkspacesHistoryMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeRecentlyOpened: CommonEvent<void>;\n\n\taddRecentlyOpened(recents: IRecent[]): Promise<void>;\n\tgetRecentlyOpened(): Promise<IRecentlyOpened>;\n\tremoveRecentlyOpened(paths: URI[]): Promise<void>;\n\tclearRecentlyOpened(): Promise<void>;\n}\n\nexport class WorkspacesHistoryMainService extends Disposable implements IWorkspacesHistoryMainService {\n\n\tprivate static readonly MAX_TOTAL_RECENT_ENTRIES = 500;\n\n\tprivate static readonly RECENTLY_OPENED_STORAGE_KEY = 'history.recentlyOpenedPathsList';\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeRecentlyOpened = this._register(new Emitter<void>());\n\treadonly onDidChangeRecentlyOpened = this._onDidChangeRecentlyOpened.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IApplicationStorageMainService private readonly applicationStorageMainService: IApplicationStorageMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Install window jump list delayed after opening window\n\t\t// because perf measurements have shown this to be slow\n\t\tthis.lifecycleMainService.when(LifecycleMainPhase.Eventually).then(() => this.handleWindowsJumpList());\n\n\t\t// Add to history when entering workspace\n\t\tthis._register(this.workspacesManagementMainService.onDidEnterWorkspace(event => this.addRecentlyOpened([{ workspace: event.workspace, remoteAuthority: event.window.remoteAuthority }])));\n\t}\n\n\t//#region Workspaces History\n\n\tasync addRecentlyOpened(recentToAdd: IRecent[]): Promise<void> {\n\t\tlet workspaces: Array<IRecentFolder | IRecentWorkspace> = [];\n\t\tlet files: IRecentFile[] = [];\n\n\t\tfor (const recent of recentToAdd) {\n\n\t\t\t// Workspace\n\t\t\tif (isRecentWorkspace(recent)) {\n\t\t\t\tif (!this.workspacesManagementMainService.isUntitledWorkspace(recent.workspace) && !this.containsWorkspace(workspaces, recent.workspace)) {\n\t\t\t\t\tworkspaces.push(recent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Folder\n\t\t\telse if (isRecentFolder(recent)) {\n\t\t\t\tif (!this.containsFolder(workspaces, recent.folderUri)) {\n\t\t\t\t\tworkspaces.push(recent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// File\n\t\t\telse {\n\t\t\t\tconst alreadyExistsInHistory = this.containsFile(files, recent.fileUri);\n\t\t\t\tconst shouldBeFiltered = recent.fileUri.scheme === Schemas.file && WorkspacesHistoryMainService.COMMON_FILES_FILTER.indexOf(basename(recent.fileUri)) >= 0;\n\n\t\t\t\tif (!alreadyExistsInHistory && !shouldBeFiltered) {\n\t\t\t\t\tfiles.push(recent);\n\n\t\t\t\t\t// Add to recent documents (Windows only, macOS later)\n\t\t\t\t\tif (isWindows && recent.fileUri.scheme === Schemas.file) {\n\t\t\t\t\t\tapp.addRecentDocument(recent.fileUri.fsPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst mergedEntries = await this.mergeEntriesFromStorage({ workspaces, files });\n\t\tworkspaces = mergedEntries.workspaces;\n\t\tfiles = mergedEntries.files;\n\n\t\tif (workspaces.length > WorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES) {\n\t\t\tworkspaces.length = WorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES;\n\t\t}\n\n\t\tif (files.length > WorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES) {\n\t\t\tfiles.length = WorkspacesHistoryMainService.MAX_TOTAL_RECENT_ENTRIES;\n\t\t}\n\n\t\tawait this.saveRecentlyOpened({ workspaces, files });\n\t\tthis._onDidChangeRecentlyOpened.fire();\n\n\t\t// Schedule update to recent documents on macOS dock\n\t\tif (isMacintosh) {\n\t\t\tthis.macOSRecentDocumentsUpdater.trigger(() => this.updateMacOSRecentDocuments());\n\t\t}\n\t}\n\n\tasync removeRecentlyOpened(recentToRemove: URI[]): Promise<void> {\n\t\tconst keep = (recent: IRecent) => {\n\t\t\tconst uri = this.location(recent);\n\t\t\tfor (const resourceToRemove of recentToRemove) {\n\t\t\t\tif (extUriBiasedIgnorePathCase.isEqual(resourceToRemove, uri)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\tconst mru = await this.getRecentlyOpened();\n\t\tconst workspaces = mru.workspaces.filter(keep);\n\t\tconst files = mru.files.filter(keep);\n\n\t\tif (workspaces.length !== mru.workspaces.length || files.length !== mru.files.length) {\n\t\t\tawait this.saveRecentlyOpened({ files, workspaces });\n\t\t\tthis._onDidChangeRecentlyOpened.fire();\n\n\t\t\t// Schedule update to recent documents on macOS dock\n\t\t\tif (isMacintosh) {\n\t\t\t\tthis.macOSRecentDocumentsUpdater.trigger(() => this.updateMacOSRecentDocuments());\n\t\t\t}\n\t\t}\n\t}\n\n\tasync clearRecentlyOpened(): Promise<void> {\n\t\tawait this.saveRecentlyOpened({ workspaces: [], files: [] });\n\t\tapp.clearRecentDocuments();\n\n\t\t// Event\n\t\tthis._onDidChangeRecentlyOpened.fire();\n\t}\n\n\tasync getRecentlyOpened(): Promise<IRecentlyOpened> {\n\t\treturn this.mergeEntriesFromStorage();\n\t}\n\n\tprivate async mergeEntriesFromStorage(existingEntries?: IRecentlyOpened): Promise<IRecentlyOpened> {\n\n\t\t// Build maps for more efficient lookup of existing entries that\n\t\t// are passed in by storing based on workspace/file identifier\n\n\t\tconst mapWorkspaceIdToWorkspace = new ResourceMap<IRecentFolder | IRecentWorkspace>(uri => extUriBiasedIgnorePathCase.getComparisonKey(uri));\n\t\tif (existingEntries?.workspaces) {\n\t\t\tfor (const workspace of existingEntries.workspaces) {\n\t\t\t\tmapWorkspaceIdToWorkspace.set(this.location(workspace), workspace);\n\t\t\t}\n\t\t}\n\n\t\tconst mapFileIdToFile = new ResourceMap<IRecentFile>(uri => extUriBiasedIgnorePathCase.getComparisonKey(uri));\n\t\tif (existingEntries?.files) {\n\t\t\tfor (const file of existingEntries.files) {\n\t\t\t\tmapFileIdToFile.set(this.location(file), file);\n\t\t\t}\n\t\t}\n\n\t\t// Merge in entries from storage, preserving existing known entries\n\n\t\tconst recentFromStorage = await this.getRecentlyOpenedFromStorage();\n\t\tfor (const recentWorkspaceFromStorage of recentFromStorage.workspaces) {\n\t\t\tconst existingRecentWorkspace = mapWorkspaceIdToWorkspace.get(this.location(recentWorkspaceFromStorage));\n\t\t\tif (existingRecentWorkspace) {\n\t\t\t\texistingRecentWorkspace.label = existingRecentWorkspace.label ?? recentWorkspaceFromStorage.label;\n\t\t\t} else {\n\t\t\t\tmapWorkspaceIdToWorkspace.set(this.location(recentWorkspaceFromStorage), recentWorkspaceFromStorage);\n\t\t\t}\n\t\t}\n\n\t\tfor (const recentFileFromStorage of recentFromStorage.files) {\n\t\t\tconst existingRecentFile = mapFileIdToFile.get(this.location(recentFileFromStorage));\n\t\t\tif (existingRecentFile) {\n\t\t\t\texistingRecentFile.label = existingRecentFile.label ?? recentFileFromStorage.label;\n\t\t\t} else {\n\t\t\t\tmapFileIdToFile.set(this.location(recentFileFromStorage), recentFileFromStorage);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tworkspaces: [...mapWorkspaceIdToWorkspace.values()],\n\t\t\tfiles: [...mapFileIdToFile.values()]\n\t\t};\n\t}\n\n\tprivate async getRecentlyOpenedFromStorage(): Promise<IRecentlyOpened> {\n\n\t\t// Wait for global storage to be ready\n\t\tawait this.applicationStorageMainService.whenReady;\n\n\t\tlet storedRecentlyOpened: object | undefined = undefined;\n\n\t\t// First try with storage service\n\t\tconst storedRecentlyOpenedRaw = this.applicationStorageMainService.get(WorkspacesHistoryMainService.RECENTLY_OPENED_STORAGE_KEY, StorageScope.APPLICATION);\n\t\tif (typeof storedRecentlyOpenedRaw === 'string') {\n\t\t\ttry {\n\t\t\t\tstoredRecentlyOpened = JSON.parse(storedRecentlyOpenedRaw);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error('Unexpected error parsing opened paths list', error);\n\t\t\t}\n\t\t}\n\n\t\treturn restoreRecentlyOpened(storedRecentlyOpened, this.logService);\n\t}\n\n\tprivate async saveRecentlyOpened(recent: IRecentlyOpened): Promise<void> {\n\n\t\t// Wait for global storage to be ready\n\t\tawait this.applicationStorageMainService.whenReady;\n\n\t\t// Store in global storage (but do not sync since this is mainly local paths)\n\t\tthis.applicationStorageMainService.store(WorkspacesHistoryMainService.RECENTLY_OPENED_STORAGE_KEY, JSON.stringify(toStoreData(recent)), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tprivate location(recent: IRecent): URI {\n\t\tif (isRecentFolder(recent)) {\n\t\t\treturn recent.folderUri;\n\t\t}\n\n\t\tif (isRecentFile(recent)) {\n\t\t\treturn recent.fileUri;\n\t\t}\n\n\t\treturn recent.workspace.configPath;\n\t}\n\n\tprivate containsWorkspace(recents: IRecent[], candidate: IWorkspaceIdentifier): boolean {\n\t\treturn !!recents.find(recent => isRecentWorkspace(recent) && recent.workspace.id === candidate.id);\n\t}\n\n\tprivate containsFolder(recents: IRecent[], candidate: URI): boolean {\n\t\treturn !!recents.find(recent => isRecentFolder(recent) && extUriBiasedIgnorePathCase.isEqual(recent.folderUri, candidate));\n\t}\n\n\tprivate containsFile(recents: IRecentFile[], candidate: URI): boolean {\n\t\treturn !!recents.find(recent => extUriBiasedIgnorePathCase.isEqual(recent.fileUri, candidate));\n\t}\n\n\t//#endregion\n\n\n\t//#region macOS Dock / Windows JumpList\n\n\tprivate static readonly MAX_MACOS_DOCK_RECENT_WORKSPACES = 7; \t\t// prefer higher number of workspaces...\n\tprivate static readonly MAX_MACOS_DOCK_RECENT_ENTRIES_TOTAL = 10; \t// ...over number of files\n\n\tprivate static readonly MAX_WINDOWS_JUMP_LIST_ENTRIES = 7;\n\n\t// Exclude some very common files from the dock/taskbar\n\tprivate static readonly COMMON_FILES_FILTER = [\n\t\t'COMMIT_EDITMSG',\n\t\t'MERGE_MSG'\n\t];\n\n\tprivate readonly macOSRecentDocumentsUpdater = this._register(new ThrottledDelayer<void>(800));\n\n\tprivate async handleWindowsJumpList(): Promise<void> {\n\t\tif (!isWindows) {\n\t\t\treturn; // only on windows\n\t\t}\n\n\t\tawait this.updateWindowsJumpList();\n\t\tthis._register(this.onDidChangeRecentlyOpened(() => this.updateWindowsJumpList()));\n\t}\n\n\tprivate async updateWindowsJumpList(): Promise<void> {\n\t\tif (!isWindows) {\n\t\t\treturn; // only on windows\n\t\t}\n\n\t\tconst jumpList: JumpListCategory[] = [];\n\n\t\t// Tasks\n\t\tjumpList.push({\n\t\t\ttype: 'tasks',\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'task',\n\t\t\t\t\ttitle: localize('newWindow', \"New Window\"),\n\t\t\t\t\tdescription: localize('newWindowDesc', \"Opens a new window\"),\n\t\t\t\t\tprogram: process.execPath,\n\t\t\t\t\targs: '-n', // force new window\n\t\t\t\t\ticonPath: process.execPath,\n\t\t\t\t\ticonIndex: 0\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\n\t\t// Recent Workspaces\n\t\tif ((await this.getRecentlyOpened()).workspaces.length > 0) {\n\n\t\t\t// The user might have meanwhile removed items from the jump list and we have to respect that\n\t\t\t// so we need to update our list of recent paths with the choice of the user to not add them again\n\t\t\t// Also: Windows will not show our custom category at all if there is any entry which was removed\n\t\t\t// by the user! See https://github.com/microsoft/vscode/issues/15052\n\t\t\tconst toRemove: URI[] = [];\n\t\t\tfor (const item of app.getJumpListSettings().removedItems) {\n\t\t\t\tconst args = item.args;\n\t\t\t\tif (args) {\n\t\t\t\t\tconst match = /^--(folder|file)-uri\\s+\"([^\"]+)\"$/.exec(args);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\ttoRemove.push(URI.parse(match[2]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.removeRecentlyOpened(toRemove);\n\n\t\t\t// Add entries\n\t\t\tlet hasWorkspaces = false;\n\t\t\tconst items: JumpListItem[] = coalesce((await this.getRecentlyOpened()).workspaces.slice(0, WorkspacesHistoryMainService.MAX_WINDOWS_JUMP_LIST_ENTRIES).map(recent => {\n\t\t\t\tconst workspace = isRecentWorkspace(recent) ? recent.workspace : recent.folderUri;\n\n\t\t\t\tconst { title, description } = this.getWindowsJumpListLabel(workspace, recent.label);\n\t\t\t\tlet args;\n\t\t\t\tif (URI.isUri(workspace)) {\n\t\t\t\t\targs = `--folder-uri \"${workspace.toString()}\"`;\n\t\t\t\t} else {\n\t\t\t\t\thasWorkspaces = true;\n\t\t\t\t\targs = `--file-uri \"${workspace.configPath.toString()}\"`;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'task',\n\t\t\t\t\ttitle: title.substr(0, 255), \t\t\t\t// Windows seems to be picky around the length of entries\n\t\t\t\t\tdescription: description.substr(0, 255),\t// (see https://github.com/microsoft/vscode/issues/111177)\n\t\t\t\t\tprogram: process.execPath,\n\t\t\t\t\targs,\n\t\t\t\t\ticonPath: 'explorer.exe', // simulate folder icon\n\t\t\t\t\ticonIndex: 0\n\t\t\t\t};\n\t\t\t}));\n\n\t\t\tif (items.length > 0) {\n\t\t\t\tjumpList.push({\n\t\t\t\t\ttype: 'custom',\n\t\t\t\t\tname: hasWorkspaces ? localize('recentFoldersAndWorkspaces', \"Recent Folders & Workspaces\") : localize('recentFolders', \"Recent Folders\"),\n\t\t\t\t\titems\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Recent\n\t\tjumpList.push({\n\t\t\ttype: 'recent' // this enables to show files in the \"recent\" category\n\t\t});\n\n\t\ttry {\n\t\t\tconst res = app.setJumpList(jumpList);\n\t\t\tif (res && res !== 'ok') {\n\t\t\t\tthis.logService.warn(`updateWindowsJumpList#setJumpList unexpected result: ${res}`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.warn('updateWindowsJumpList#setJumpList', error); // since setJumpList is relatively new API, make sure to guard for errors\n\t\t}\n\t}\n\n\tprivate getWindowsJumpListLabel(workspace: IWorkspaceIdentifier | URI, recentLabel: string | undefined): { title: string; description: string } {\n\n\t\t// Prefer recent label\n\t\tif (recentLabel) {\n\t\t\treturn { title: splitRecentLabel(recentLabel).name, description: recentLabel };\n\t\t}\n\n\t\t// Single Folder\n\t\tif (URI.isUri(workspace)) {\n\t\t\treturn { title: basename(workspace), description: this.renderJumpListPathDescription(workspace) };\n\t\t}\n\n\t\t// Workspace: Untitled\n\t\tif (this.workspacesManagementMainService.isUntitledWorkspace(workspace)) {\n\t\t\treturn { title: localize('untitledWorkspace', \"Untitled (Workspace)\"), description: '' };\n\t\t}\n\n\t\t// Workspace: normal\n\t\tlet filename = basename(workspace.configPath);\n\t\tif (filename.endsWith(WORKSPACE_EXTENSION)) {\n\t\t\tfilename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n\t\t}\n\n\t\treturn { title: localize('workspaceName', \"{0} (Workspace)\", filename), description: this.renderJumpListPathDescription(workspace.configPath) };\n\t}\n\n\tprivate renderJumpListPathDescription(uri: URI) {\n\t\treturn uri.scheme === 'file' ? normalizeDriveLetter(uri.fsPath) : uri.toString();\n\t}\n\n\tprivate async updateMacOSRecentDocuments(): Promise<void> {\n\t\tif (!isMacintosh) {\n\t\t\treturn;\n\t\t}\n\n\t\t// We clear all documents first to ensure an up-to-date view on the set. Since entries\n\t\t// can get deleted on disk, this ensures that the list is always valid\n\t\tapp.clearRecentDocuments();\n\n\t\tconst mru = await this.getRecentlyOpened();\n\n\t\t// Collect max-N recent workspaces that are known to exist\n\t\tconst workspaceEntries: string[] = [];\n\t\tlet entries = 0;\n\t\tfor (let i = 0; i < mru.workspaces.length && entries < WorkspacesHistoryMainService.MAX_MACOS_DOCK_RECENT_WORKSPACES; i++) {\n\t\t\tconst loc = this.location(mru.workspaces[i]);\n\t\t\tif (loc.scheme === Schemas.file) {\n\t\t\t\tconst workspacePath = originalFSPath(loc);\n\t\t\t\tif (await Promises.exists(workspacePath)) {\n\t\t\t\t\tworkspaceEntries.push(workspacePath);\n\t\t\t\t\tentries++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Collect max-N recent files that are known to exist\n\t\tconst fileEntries: string[] = [];\n\t\tfor (let i = 0; i < mru.files.length && entries < WorkspacesHistoryMainService.MAX_MACOS_DOCK_RECENT_ENTRIES_TOTAL; i++) {\n\t\t\tconst loc = this.location(mru.files[i]);\n\t\t\tif (loc.scheme === Schemas.file) {\n\t\t\t\tconst filePath = originalFSPath(loc);\n\t\t\t\tif (\n\t\t\t\t\tWorkspacesHistoryMainService.COMMON_FILES_FILTER.includes(basename(loc)) || // skip some well known file entries\n\t\t\t\t\tworkspaceEntries.includes(filePath)\t\t\t\t\t\t\t\t\t\t\t// prefer a workspace entry over a file entry (e.g. for .code-workspace)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (await Promises.exists(filePath)) {\n\t\t\t\t\tfileEntries.push(filePath);\n\t\t\t\t\tentries++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// The apple guidelines (https://developer.apple.com/design/human-interface-guidelines/macos/menus/menu-anatomy/)\n\t\t// explain that most recent entries should appear close to the interaction by the user (e.g. close to the\n\t\t// mouse click). Most native macOS applications that add recent documents to the dock, show the most recent document\n\t\t// to the bottom (because the dock menu is not appearing from top to bottom, but from the bottom to the top). As such\n\t\t// we fill in the entries in reverse order so that the most recent shows up at the bottom of the menu.\n\t\t//\n\t\t// On top of that, the maximum number of documents can be configured by the user (defaults to 10). To ensure that\n\t\t// we are not failing to show the most recent entries, we start by adding files first (in reverse order of recency)\n\t\t// and then add folders (in reverse order of recency). Given that strategy, we can ensure that the most recent\n\t\t// N folders are always appearing, even if the limit is low (https://github.com/microsoft/vscode/issues/74788)\n\t\tfileEntries.reverse().forEach(fileEntry => app.addRecentDocument(fileEntry));\n\t\tworkspaceEntries.reverse().forEach(workspaceEntry => app.addRecentDocument(workspaceEntry));\n\t}\n\n\t//#endregion\n}\n"]}