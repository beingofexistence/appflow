{"version":3,"sources":["vs/platform/workspaces/electron-main/workspacesManagementMainService.ts"],"names":[],"mappings":"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","file":"workspacesManagementMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserWindow } from 'electron';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { parse } from 'vs/base/common/json';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { dirname, join } from 'vs/base/common/path';\nimport { basename, extUriBiasedIgnorePathCase, joinPath, originalFSPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { Promises } from 'vs/base/node/pfs';\nimport { localize } from 'vs/nls';\nimport { IBackupMainService } from 'vs/platform/backup/electron-main/backup';\nimport { IDialogMainService } from 'vs/platform/dialogs/electron-main/dialogMainService';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IUserDataProfilesMainService } from 'vs/platform/userDataProfile/electron-main/userDataProfile';\nimport { ICodeWindow } from 'vs/platform/window/electron-main/window';\nimport { findWindowOnWorkspaceOrFolder } from 'vs/platform/windows/electron-main/windowsFinder';\nimport { isWorkspaceIdentifier, IWorkspaceIdentifier, IResolvedWorkspace, hasWorkspaceFileExtension, UNTITLED_WORKSPACE_NAME, isUntitledWorkspace } from 'vs/platform/workspace/common/workspace';\nimport { getStoredWorkspaceFolder, IEnterWorkspaceResult, isStoredWorkspaceFolder, IStoredWorkspace, IStoredWorkspaceFolder, IUntitledWorkspaceInfo, IWorkspaceFolderCreationData, toWorkspaceFolders } from 'vs/platform/workspaces/common/workspaces';\nimport { getWorkspaceIdentifier } from 'vs/platform/workspaces/node/workspaces';\n\nexport const IWorkspacesManagementMainService = createDecorator<IWorkspacesManagementMainService>('workspacesManagementMainService');\n\nexport interface IWorkspaceEnteredEvent {\n\treadonly window: ICodeWindow;\n\treadonly workspace: IWorkspaceIdentifier;\n}\n\nexport interface IWorkspacesManagementMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidDeleteUntitledWorkspace: Event<IWorkspaceIdentifier>;\n\treadonly onDidEnterWorkspace: Event<IWorkspaceEnteredEvent>;\n\n\tenterWorkspace(intoWindow: ICodeWindow, openedWindows: ICodeWindow[], path: URI): Promise<IEnterWorkspaceResult | undefined>;\n\n\tcreateUntitledWorkspace(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier>;\n\n\tdeleteUntitledWorkspace(workspace: IWorkspaceIdentifier): Promise<void>;\n\n\tgetUntitledWorkspaces(): IUntitledWorkspaceInfo[];\n\tisUntitledWorkspace(workspace: IWorkspaceIdentifier): boolean;\n\n\tresolveLocalWorkspace(path: URI): Promise<IResolvedWorkspace | undefined>;\n\n\tgetWorkspaceIdentifier(workspacePath: URI): Promise<IWorkspaceIdentifier>;\n}\n\nexport class WorkspacesManagementMainService extends Disposable implements IWorkspacesManagementMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidDeleteUntitledWorkspace = this._register(new Emitter<IWorkspaceIdentifier>());\n\treadonly onDidDeleteUntitledWorkspace: Event<IWorkspaceIdentifier> = this._onDidDeleteUntitledWorkspace.event;\n\n\tprivate readonly _onDidEnterWorkspace = this._register(new Emitter<IWorkspaceEnteredEvent>());\n\treadonly onDidEnterWorkspace: Event<IWorkspaceEnteredEvent> = this._onDidEnterWorkspace.event;\n\n\tprivate readonly untitledWorkspacesHome = this.environmentMainService.untitledWorkspacesHome; // local URI that contains all untitled workspaces\n\n\tprivate untitledWorkspaces: IUntitledWorkspaceInfo[] = [];\n\n\tconstructor(\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesMainService: IUserDataProfilesMainService,\n\t\t@IBackupMainService private readonly backupMainService: IBackupMainService,\n\t\t@IDialogMainService private readonly dialogMainService: IDialogMainService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync initialize(): Promise<void> {\n\n\t\t// Reset\n\t\tthis.untitledWorkspaces = [];\n\n\t\t// Resolve untitled workspaces\n\t\ttry {\n\t\t\tconst untitledWorkspacePaths = (await Promises.readdir(this.untitledWorkspacesHome.with({ scheme: Schemas.file }).fsPath)).map(folder => joinPath(this.untitledWorkspacesHome, folder, UNTITLED_WORKSPACE_NAME));//\n\t\t\tfor (const untitledWorkspacePath of untitledWorkspacePaths) {\n\t\t\t\tconst workspace = getWorkspaceIdentifier(untitledWorkspacePath);\n\t\t\t\tconst resolvedWorkspace = await this.resolveLocalWorkspace(untitledWorkspacePath);\n\t\t\t\tif (!resolvedWorkspace) {\n\t\t\t\t\tawait this.deleteUntitledWorkspace(workspace);\n\t\t\t\t} else {\n\t\t\t\t\tthis.untitledWorkspaces.push({ workspace, remoteAuthority: resolvedWorkspace.remoteAuthority });\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error.code !== 'ENOENT') {\n\t\t\t\tthis.logService.warn(`Unable to read folders in ${this.untitledWorkspacesHome} (${error}).`);\n\t\t\t}\n\t\t}\n\t}\n\n\tresolveLocalWorkspace(uri: URI): Promise<IResolvedWorkspace | undefined> {\n\t\treturn this.doResolveLocalWorkspace(uri, path => Promises.readFile(path, 'utf8'));\n\t}\n\n\tprivate doResolveLocalWorkspace(uri: URI, contentsFn: (path: string) => string): IResolvedWorkspace | undefined;\n\tprivate doResolveLocalWorkspace(uri: URI, contentsFn: (path: string) => Promise<string>): Promise<IResolvedWorkspace | undefined>;\n\tprivate doResolveLocalWorkspace(uri: URI, contentsFn: (path: string) => string | Promise<string>): IResolvedWorkspace | undefined | Promise<IResolvedWorkspace | undefined> {\n\t\tif (!this.isWorkspacePath(uri)) {\n\t\t\treturn undefined; // does not look like a valid workspace config file\n\t\t}\n\n\t\tif (uri.scheme !== Schemas.file) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\ttry {\n\t\t\tconst contents = contentsFn(uri.fsPath);\n\t\t\tif (contents instanceof Promise) {\n\t\t\t\treturn contents.then(value => this.doResolveWorkspace(uri, value), error => undefined /* invalid workspace */);\n\t\t\t} else {\n\t\t\t\treturn this.doResolveWorkspace(uri, contents);\n\t\t\t}\n\t\t} catch {\n\t\t\treturn undefined; // invalid workspace\n\t\t}\n\t}\n\n\tprivate isWorkspacePath(uri: URI): boolean {\n\t\treturn isUntitledWorkspace(uri, this.environmentMainService) || hasWorkspaceFileExtension(uri);\n\t}\n\n\tprivate doResolveWorkspace(path: URI, contents: string): IResolvedWorkspace | undefined {\n\t\ttry {\n\t\t\tconst workspace = this.doParseStoredWorkspace(path, contents);\n\t\t\tconst workspaceIdentifier = getWorkspaceIdentifier(path);\n\t\t\treturn {\n\t\t\t\tid: workspaceIdentifier.id,\n\t\t\t\tconfigPath: workspaceIdentifier.configPath,\n\t\t\t\tfolders: toWorkspaceFolders(workspace.folders, workspaceIdentifier.configPath, extUriBiasedIgnorePathCase),\n\t\t\t\tremoteAuthority: workspace.remoteAuthority,\n\t\t\t\ttransient: workspace.transient\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthis.logService.warn(error.toString());\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate doParseStoredWorkspace(path: URI, contents: string): IStoredWorkspace {\n\n\t\t// Parse workspace file\n\t\tconst storedWorkspace: IStoredWorkspace = parse(contents); // use fault tolerant parser\n\n\t\t// Filter out folders which do not have a path or uri set\n\t\tif (storedWorkspace && Array.isArray(storedWorkspace.folders)) {\n\t\t\tstoredWorkspace.folders = storedWorkspace.folders.filter(folder => isStoredWorkspaceFolder(folder));\n\t\t} else {\n\t\t\tthrow new Error(`${path.toString(true)} looks like an invalid workspace file.`);\n\t\t}\n\n\t\treturn storedWorkspace;\n\t}\n\n\tasync createUntitledWorkspace(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier> {\n\t\tconst { workspace, storedWorkspace } = this.newUntitledWorkspace(folders, remoteAuthority);\n\t\tconst configPath = workspace.configPath.fsPath;\n\n\t\tawait Promises.mkdir(dirname(configPath), { recursive: true });\n\t\tawait Promises.writeFile(configPath, JSON.stringify(storedWorkspace, null, '\\t'));\n\n\t\tthis.untitledWorkspaces.push({ workspace, remoteAuthority });\n\n\t\treturn workspace;\n\t}\n\n\tprivate newUntitledWorkspace(folders: IWorkspaceFolderCreationData[] = [], remoteAuthority?: string): { workspace: IWorkspaceIdentifier; storedWorkspace: IStoredWorkspace } {\n\t\tconst randomId = (Date.now() + Math.round(Math.random() * 1000)).toString();\n\t\tconst untitledWorkspaceConfigFolder = joinPath(this.untitledWorkspacesHome, randomId);\n\t\tconst untitledWorkspaceConfigPath = joinPath(untitledWorkspaceConfigFolder, UNTITLED_WORKSPACE_NAME);\n\n\t\tconst storedWorkspaceFolder: IStoredWorkspaceFolder[] = [];\n\n\t\tfor (const folder of folders) {\n\t\t\tstoredWorkspaceFolder.push(getStoredWorkspaceFolder(folder.uri, true, folder.name, untitledWorkspaceConfigFolder, extUriBiasedIgnorePathCase));\n\t\t}\n\n\t\treturn {\n\t\t\tworkspace: getWorkspaceIdentifier(untitledWorkspaceConfigPath),\n\t\t\tstoredWorkspace: { folders: storedWorkspaceFolder, remoteAuthority }\n\t\t};\n\t}\n\n\tasync getWorkspaceIdentifier(configPath: URI): Promise<IWorkspaceIdentifier> {\n\t\treturn getWorkspaceIdentifier(configPath);\n\t}\n\n\tisUntitledWorkspace(workspace: IWorkspaceIdentifier): boolean {\n\t\treturn isUntitledWorkspace(workspace.configPath, this.environmentMainService);\n\t}\n\n\tasync deleteUntitledWorkspace(workspace: IWorkspaceIdentifier): Promise<void> {\n\t\tif (!this.isUntitledWorkspace(workspace)) {\n\t\t\treturn; // only supported for untitled workspaces\n\t\t}\n\n\t\t// Delete from disk\n\t\tawait this.doDeleteUntitledWorkspace(workspace);\n\n\t\t// unset workspace from profiles\n\t\tif (this.userDataProfilesMainService.isEnabled()) {\n\t\t\tthis.userDataProfilesMainService.unsetWorkspace(workspace);\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidDeleteUntitledWorkspace.fire(workspace);\n\t}\n\n\tprivate async doDeleteUntitledWorkspace(workspace: IWorkspaceIdentifier): Promise<void> {\n\t\tconst configPath = originalFSPath(workspace.configPath);\n\t\ttry {\n\n\t\t\t// Delete Workspace\n\t\t\tawait Promises.rm(dirname(configPath));\n\n\t\t\t// Mark Workspace Storage to be deleted\n\t\t\tconst workspaceStoragePath = join(this.environmentMainService.workspaceStorageHome.with({ scheme: Schemas.file }).fsPath, workspace.id);\n\t\t\tif (await Promises.exists(workspaceStoragePath)) {\n\t\t\t\tawait Promises.writeFile(join(workspaceStoragePath, 'obsolete'), '');\n\t\t\t}\n\n\t\t\t// Remove from list\n\t\t\tthis.untitledWorkspaces = this.untitledWorkspaces.filter(untitledWorkspace => untitledWorkspace.workspace.id !== workspace.id);\n\t\t} catch (error) {\n\t\t\tthis.logService.warn(`Unable to delete untitled workspace ${configPath} (${error}).`);\n\t\t}\n\t}\n\n\tgetUntitledWorkspaces(): IUntitledWorkspaceInfo[] {\n\t\treturn this.untitledWorkspaces;\n\t}\n\n\tasync enterWorkspace(window: ICodeWindow, windows: ICodeWindow[], path: URI): Promise<IEnterWorkspaceResult | undefined> {\n\t\tif (!window || !window.win || !window.isReady) {\n\t\t\treturn undefined; // return early if the window is not ready or disposed\n\t\t}\n\n\t\tconst isValid = await this.isValidTargetWorkspacePath(window, windows, path);\n\t\tif (!isValid) {\n\t\t\treturn undefined; // return early if the workspace is not valid\n\t\t}\n\n\t\tconst result = await this.doEnterWorkspace(window, getWorkspaceIdentifier(path));\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Emit as event\n\t\tthis._onDidEnterWorkspace.fire({ window, workspace: result.workspace });\n\n\t\treturn result;\n\t}\n\n\tprivate async isValidTargetWorkspacePath(window: ICodeWindow, windows: ICodeWindow[], workspacePath?: URI): Promise<boolean> {\n\t\tif (!workspacePath) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (isWorkspaceIdentifier(window.openedWorkspace) && extUriBiasedIgnorePathCase.isEqual(window.openedWorkspace.configPath, workspacePath)) {\n\t\t\treturn false; // window is already opened on a workspace with that path\n\t\t}\n\n\t\t// Prevent overwriting a workspace that is currently opened in another window\n\t\tif (findWindowOnWorkspaceOrFolder(windows, workspacePath)) {\n\t\t\tawait this.dialogMainService.showMessageBox({\n\t\t\t\ttype: 'info',\n\t\t\t\tbuttons: [localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, \"&&OK\")],\n\t\t\t\tmessage: localize('workspaceOpenedMessage', \"Unable to save workspace '{0}'\", basename(workspacePath)),\n\t\t\t\tdetail: localize('workspaceOpenedDetail', \"The workspace is already opened in another window. Please close that window first and then try again.\")\n\t\t\t}, BrowserWindow.getFocusedWindow() ?? undefined);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true; // OK\n\t}\n\n\tprivate async doEnterWorkspace(window: ICodeWindow, workspace: IWorkspaceIdentifier): Promise<IEnterWorkspaceResult | undefined> {\n\t\tif (!window.config) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\twindow.focus();\n\n\t\t// Register window for backups and migrate current backups over\n\t\tlet backupPath: string | undefined;\n\t\tif (!window.config.extensionDevelopmentPath) {\n\t\t\tif (window.config.backupPath) {\n\t\t\t\tbackupPath = await this.backupMainService.registerWorkspaceBackup({ workspace, remoteAuthority: window.remoteAuthority }, window.config.backupPath);\n\t\t\t} else {\n\t\t\t\tbackupPath = this.backupMainService.registerWorkspaceBackup({ workspace, remoteAuthority: window.remoteAuthority });\n\t\t\t}\n\t\t}\n\n\t\t// if the window was opened on an untitled workspace, delete it.\n\t\tif (isWorkspaceIdentifier(window.openedWorkspace) && this.isUntitledWorkspace(window.openedWorkspace)) {\n\t\t\tawait this.deleteUntitledWorkspace(window.openedWorkspace);\n\t\t}\n\n\t\t// Update window configuration properly based on transition to workspace\n\t\twindow.config.workspace = workspace;\n\t\twindow.config.backupPath = backupPath;\n\n\t\treturn { workspace, backupPath };\n\t}\n}\n"]}