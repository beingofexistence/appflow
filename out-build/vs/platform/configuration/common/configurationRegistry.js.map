{"version":3,"sources":["vs/platform/configuration/common/configurationRegistry.ts"],"names":[],"mappings":"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","file":"configurationRegistry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from 'vs/base/common/arrays';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport * as types from 'vs/base/common/types';\nimport * as nls from 'vs/nls';\nimport { getLanguageTagSettingPlainKey } from 'vs/platform/configuration/common/configuration';\nimport { Extensions as JSONExtensions, IJSONContributionRegistry } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { PolicyName } from 'vs/platform/policy/common/policy';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport enum EditPresentationTypes {\n\tMultiline = 'multilineText',\n\tSingleline = 'singlelineText'\n}\n\nexport const Extensions = {\n\tConfiguration: 'base.contributions.configuration'\n};\n\nexport interface IConfigurationDelta {\n\tremovedDefaults?: IConfigurationDefaults[];\n\tremovedConfigurations?: IConfigurationNode[];\n\taddedDefaults?: IConfigurationDefaults[];\n\taddedConfigurations?: IConfigurationNode[];\n}\n\nexport interface IConfigurationRegistry {\n\n\t/**\n\t * Register a configuration to the registry.\n\t */\n\tregisterConfiguration(configuration: IConfigurationNode): void;\n\n\t/**\n\t * Register multiple configurations to the registry.\n\t */\n\tregisterConfigurations(configurations: IConfigurationNode[], validate?: boolean): void;\n\n\t/**\n\t * Deregister multiple configurations from the registry.\n\t */\n\tderegisterConfigurations(configurations: IConfigurationNode[]): void;\n\n\t/**\n\t * update the configuration registry by\n\t * \t- registering the configurations to add\n\t * \t- dereigstering the configurations to remove\n\t */\n\tupdateConfigurations(configurations: { add: IConfigurationNode[]; remove: IConfigurationNode[] }): void;\n\n\t/**\n\t * Register multiple default configurations to the registry.\n\t */\n\tregisterDefaultConfigurations(defaultConfigurations: IConfigurationDefaults[]): void;\n\n\t/**\n\t * Deregister multiple default configurations from the registry.\n\t */\n\tderegisterDefaultConfigurations(defaultConfigurations: IConfigurationDefaults[]): void;\n\n\t/**\n\t * Bulk update of the configuration registry (default and configurations, remove and add)\n\t * @param delta\n\t */\n\tdeltaConfiguration(delta: IConfigurationDelta): void;\n\n\t/**\n\t * Return the registered configuration defaults overrides\n\t */\n\tgetConfigurationDefaultsOverrides(): Map<string, IConfigurationDefaultOverride>;\n\n\t/**\n\t * Signal that the schema of a configuration setting has changes. It is currently only supported to change enumeration values.\n\t * Property or default value changes are not allowed.\n\t */\n\tnotifyConfigurationSchemaUpdated(...configurations: IConfigurationNode[]): void;\n\n\t/**\n\t * Event that fires whenever a configuration has been\n\t * registered.\n\t */\n\treadonly onDidSchemaChange: Event<void>;\n\n\t/**\n\t * Event that fires whenever a configuration has been\n\t * registered.\n\t */\n\treadonly onDidUpdateConfiguration: Event<{ properties: ReadonlySet<string>; defaultsOverrides?: boolean }>;\n\n\t/**\n\t * Returns all configuration nodes contributed to this registry.\n\t */\n\tgetConfigurations(): IConfigurationNode[];\n\n\t/**\n\t * Returns all configurations settings of all configuration nodes contributed to this registry.\n\t */\n\tgetConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\n\t/**\n\t * Return all configurations by policy name\n\t */\n\tgetPolicyConfigurations(): Map<PolicyName, string>;\n\n\t/**\n\t * Returns all excluded configurations settings of all configuration nodes contributed to this registry.\n\t */\n\tgetExcludedConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\n\t/**\n\t * Register the identifiers for editor configurations\n\t */\n\tregisterOverrideIdentifiers(identifiers: string[]): void;\n}\n\nexport const enum ConfigurationScope {\n\t/**\n\t * Application specific configuration, which can be configured only in local user settings.\n\t */\n\tAPPLICATION = 1,\n\t/**\n\t * Machine specific configuration, which can be configured only in local and remote user settings.\n\t */\n\tMACHINE,\n\t/**\n\t * Window specific configuration, which can be configured in the user or workspace settings.\n\t */\n\tWINDOW,\n\t/**\n\t * Resource specific configuration, which can be configured in the user, workspace or folder settings.\n\t */\n\tRESOURCE,\n\t/**\n\t * Resource specific configuration that can be configured in language specific settings\n\t */\n\tLANGUAGE_OVERRIDABLE,\n\t/**\n\t * Machine specific configuration that can also be configured in workspace or folder settings.\n\t */\n\tMACHINE_OVERRIDABLE,\n}\n\nexport interface IPolicy {\n\n\t/**\n\t * The policy name.\n\t */\n\treadonly name: PolicyName;\n\n\t/**\n\t * The Code version in which this policy was introduced.\n\t */\n\treadonly minimumVersion: `${number}.${number}`;\n}\n\nexport interface IConfigurationPropertySchema extends IJSONSchema {\n\n\tscope?: ConfigurationScope;\n\n\t/**\n\t * When restricted, value of this configuration will be read only from trusted sources.\n\t * For eg., If the workspace is not trusted, then the value of this configuration is not read from workspace settings file.\n\t */\n\trestricted?: boolean;\n\n\t/**\n\t * When `false` this property is excluded from the registry. Default is to include.\n\t */\n\tincluded?: boolean;\n\n\t/**\n\t * List of tags associated to the property.\n\t *  - A tag can be used for filtering\n\t *  - Use `experimental` tag for marking the setting as experimental. **Note:** Defaults of experimental settings can be changed by the running experiments.\n\t */\n\ttags?: string[];\n\n\t/**\n\t * When enabled this setting is ignored during sync and user can override this.\n\t */\n\tignoreSync?: boolean;\n\n\t/**\n\t * When enabled this setting is ignored during sync and user cannot override this.\n\t */\n\tdisallowSyncIgnore?: boolean;\n\n\t/**\n\t * Labels for enumeration items\n\t */\n\tenumItemLabels?: string[];\n\n\t/**\n\t * When specified, controls the presentation format of string settings.\n\t * Otherwise, the presentation format defaults to `singleline`.\n\t */\n\teditPresentation?: EditPresentationTypes;\n\n\t/**\n\t * When specified, gives an order number for the setting\n\t * within the settings editor. Otherwise, the setting is placed at the end.\n\t */\n\torder?: number;\n\n\t/**\n\t * When specified, this setting's value can always be overwritten by\n\t * a system-wide policy.\n\t */\n\tpolicy?: IPolicy;\n}\n\nexport interface IExtensionInfo {\n\tid: string;\n\tdisplayName?: string;\n}\n\nexport interface IConfigurationNode {\n\tid?: string;\n\torder?: number;\n\ttype?: string | string[];\n\ttitle?: string;\n\tdescription?: string;\n\tproperties?: IStringDictionary<IConfigurationPropertySchema>;\n\tallOf?: IConfigurationNode[];\n\tscope?: ConfigurationScope;\n\textensionInfo?: IExtensionInfo;\n\trestrictedProperties?: string[];\n}\n\nexport interface IConfigurationDefaults {\n\toverrides: IStringDictionary<any>;\n\tsource?: IExtensionInfo | string;\n}\n\nexport type IRegisteredConfigurationPropertySchema = IConfigurationPropertySchema & {\n\tdefaultDefaultValue?: any;\n\tsource?: IExtensionInfo; // Source of the Property\n\tdefaultValueSource?: IExtensionInfo | string; // Source of the Default Value\n};\n\nexport type IConfigurationDefaultOverride = {\n\treadonly value: any;\n\treadonly source?: IExtensionInfo | string;  // Source of the default override\n\treadonly valuesSources?: Map<string, IExtensionInfo | string>; // Source of each value in default language overrides\n};\n\nexport const allSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const applicationSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const machineSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const windowSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\nexport const resourceSettings: { properties: IStringDictionary<IConfigurationPropertySchema>; patternProperties: IStringDictionary<IConfigurationPropertySchema> } = { properties: {}, patternProperties: {} };\n\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nexport const configurationDefaultsSchemaId = 'vscode://schemas/settings/configurationDefaults';\n\nconst contributionRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\n\nclass ConfigurationRegistry implements IConfigurationRegistry {\n\n\tprivate readonly configurationDefaultsOverrides: Map<string, IConfigurationDefaultOverride>;\n\tprivate readonly defaultLanguageConfigurationOverridesNode: IConfigurationNode;\n\tprivate readonly configurationContributors: IConfigurationNode[];\n\tprivate readonly configurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\tprivate readonly policyConfigurations: Map<PolicyName, string>;\n\tprivate readonly excludedConfigurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>;\n\tprivate readonly resourceLanguageSettingsSchema: IJSONSchema;\n\tprivate readonly overrideIdentifiers = new Set<string>();\n\n\tprivate readonly _onDidSchemaChange = new Emitter<void>();\n\treadonly onDidSchemaChange: Event<void> = this._onDidSchemaChange.event;\n\n\tprivate readonly _onDidUpdateConfiguration = new Emitter<{ properties: ReadonlySet<string>; defaultsOverrides?: boolean }>();\n\treadonly onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;\n\n\tconstructor() {\n\t\tthis.configurationDefaultsOverrides = new Map<string, IConfigurationDefaultOverride>();\n\t\tthis.defaultLanguageConfigurationOverridesNode = {\n\t\t\tid: 'defaultOverrides',\n\t\t\ttitle: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n\t\t\tproperties: {}\n\t\t};\n\t\tthis.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n\t\tthis.resourceLanguageSettingsSchema = {\n\t\t\tproperties: {},\n\t\t\tpatternProperties: {},\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true\n\t\t};\n\t\tthis.configurationProperties = {};\n\t\tthis.policyConfigurations = new Map<PolicyName, string>();\n\t\tthis.excludedConfigurationProperties = {};\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t\tthis.registerOverridePropertyPatternKey();\n\t}\n\n\tpublic registerConfiguration(configuration: IConfigurationNode, validate: boolean = true): void {\n\t\tthis.registerConfigurations([configuration], validate);\n\t}\n\n\tpublic registerConfigurations(configurations: IConfigurationNode[], validate: boolean = true): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doRegisterConfigurations(configurations, validate, properties);\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties });\n\t}\n\n\tpublic deregisterConfigurations(configurations: IConfigurationNode[]): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doDeregisterConfigurations(configurations, properties);\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties });\n\t}\n\n\tpublic updateConfigurations({ add, remove }: { add: IConfigurationNode[]; remove: IConfigurationNode[] }): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doDeregisterConfigurations(remove, properties);\n\t\tthis.doRegisterConfigurations(add, false, properties);\n\n\t\tcontributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties });\n\t}\n\n\tpublic registerDefaultConfigurations(configurationDefaults: IConfigurationDefaults[]): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doRegisterDefaultConfigurations(configurationDefaults, properties);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n\t}\n\n\tprivate doRegisterDefaultConfigurations(configurationDefaults: IConfigurationDefaults[], bucket: Set<string>) {\n\n\t\tconst overrideIdentifiers: string[] = [];\n\n\t\tfor (const { overrides, source } of configurationDefaults) {\n\t\t\tfor (const key in overrides) {\n\t\t\t\tbucket.add(key);\n\n\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tconst configurationDefaultOverride = this.configurationDefaultsOverrides.get(key);\n\t\t\t\t\tconst valuesSources = configurationDefaultOverride?.valuesSources ?? new Map<string, IExtensionInfo | string>();\n\t\t\t\t\tif (source) {\n\t\t\t\t\t\tfor (const configuration of Object.keys(overrides[key])) {\n\t\t\t\t\t\t\tvaluesSources.set(configuration, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst defaultValue = { ...(configurationDefaultOverride?.value || {}), ...overrides[key] };\n\t\t\t\t\tthis.configurationDefaultsOverrides.set(key, { source, value: defaultValue, valuesSources });\n\t\t\t\t\tconst plainKey = getLanguageTagSettingPlainKey(key);\n\t\t\t\t\tconst property: IRegisteredConfigurationPropertySchema = {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tdefault: defaultValue,\n\t\t\t\t\t\tdescription: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", plainKey),\n\t\t\t\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t\t\t\t\tdefaultDefaultValue: defaultValue,\n\t\t\t\t\t\tsource: types.isString(source) ? undefined : source,\n\t\t\t\t\t\tdefaultValueSource: source\n\t\t\t\t\t};\n\t\t\t\t\toverrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n\t\t\t\t\tthis.configurationProperties[key] = property;\n\t\t\t\t\tthis.defaultLanguageConfigurationOverridesNode.properties![key] = property;\n\t\t\t\t} else {\n\t\t\t\t\tthis.configurationDefaultsOverrides.set(key, { value: overrides[key], source });\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\t\t\t\t\t\tthis.updateSchema(key, property);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.doRegisterOverrideIdentifiers(overrideIdentifiers);\n\t}\n\n\tpublic deregisterDefaultConfigurations(defaultConfigurations: IConfigurationDefaults[]): void {\n\t\tconst properties = new Set<string>();\n\t\tthis.doDeregisterDefaultConfigurations(defaultConfigurations, properties);\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n\t}\n\n\tprivate doDeregisterDefaultConfigurations(defaultConfigurations: IConfigurationDefaults[], bucket: Set<string>): void {\n\n\t\tfor (const { overrides, source } of defaultConfigurations) {\n\t\t\tfor (const key in overrides) {\n\t\t\t\tconst configurationDefaultsOverride = this.configurationDefaultsOverrides.get(key);\n\t\t\t\tconst id = types.isString(source) ? source : source?.id;\n\t\t\t\tconst configurationDefaultsOverrideSourceId = types.isString(configurationDefaultsOverride?.source) ? configurationDefaultsOverride?.source : configurationDefaultsOverride?.source?.id;\n\t\t\t\tif (id !== configurationDefaultsOverrideSourceId) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbucket.add(key);\n\t\t\t\tthis.configurationDefaultsOverrides.delete(key);\n\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tdelete this.configurationProperties[key];\n\t\t\t\t\tdelete this.defaultLanguageConfigurationOverridesNode.properties![key];\n\t\t\t\t} else {\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\t\t\t\t\t\tthis.updateSchema(key, property);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.updateOverridePropertyPatternKey();\n\t}\n\n\tpublic deltaConfiguration(delta: IConfigurationDelta): void {\n\t\t// defaults: remove\n\t\tlet defaultsOverrides = false;\n\t\tconst properties = new Set<string>();\n\t\tif (delta.removedDefaults) {\n\t\t\tthis.doDeregisterDefaultConfigurations(delta.removedDefaults, properties);\n\t\t\tdefaultsOverrides = true;\n\t\t}\n\t\t// defaults: add\n\t\tif (delta.addedDefaults) {\n\t\t\tthis.doRegisterDefaultConfigurations(delta.addedDefaults, properties);\n\t\t\tdefaultsOverrides = true;\n\t\t}\n\t\t// configurations: remove\n\t\tif (delta.removedConfigurations) {\n\t\t\tthis.doDeregisterConfigurations(delta.removedConfigurations, properties);\n\t\t}\n\t\t// configurations: add\n\t\tif (delta.addedConfigurations) {\n\t\t\tthis.doRegisterConfigurations(delta.addedConfigurations, false, properties);\n\t\t}\n\t\tthis._onDidSchemaChange.fire();\n\t\tthis._onDidUpdateConfiguration.fire({ properties, defaultsOverrides });\n\t}\n\n\tpublic notifyConfigurationSchemaUpdated(...configurations: IConfigurationNode[]) {\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tpublic registerOverrideIdentifiers(overrideIdentifiers: string[]): void {\n\t\tthis.doRegisterOverrideIdentifiers(overrideIdentifiers);\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tprivate doRegisterOverrideIdentifiers(overrideIdentifiers: string[]) {\n\t\tfor (const overrideIdentifier of overrideIdentifiers) {\n\t\t\tthis.overrideIdentifiers.add(overrideIdentifier);\n\t\t}\n\t\tthis.updateOverridePropertyPatternKey();\n\t}\n\n\tprivate doRegisterConfigurations(configurations: IConfigurationNode[], validate: boolean, bucket: Set<string>): void {\n\n\t\tconfigurations.forEach(configuration => {\n\n\t\t\tthis.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties, undefined, bucket);\n\n\t\t\tthis.configurationContributors.push(configuration);\n\t\t\tthis.registerJSONConfiguration(configuration);\n\t\t});\n\t}\n\n\tprivate doDeregisterConfigurations(configurations: IConfigurationNode[], bucket: Set<string>): void {\n\n\t\tconst deregisterConfiguration = (configuration: IConfigurationNode) => {\n\t\t\tif (configuration.properties) {\n\t\t\t\tfor (const key in configuration.properties) {\n\t\t\t\t\tbucket.add(key);\n\t\t\t\t\tconst property = this.configurationProperties[key];\n\t\t\t\t\tif (property?.policy?.name) {\n\t\t\t\t\t\tthis.policyConfigurations.delete(property.policy.name);\n\t\t\t\t\t}\n\t\t\t\t\tdelete this.configurationProperties[key];\n\t\t\t\t\tthis.removeFromSchema(key, configuration.properties[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconfiguration.allOf?.forEach(node => deregisterConfiguration(node));\n\t\t};\n\t\tfor (const configuration of configurations) {\n\t\t\tderegisterConfiguration(configuration);\n\t\t\tconst index = this.configurationContributors.indexOf(configuration);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.configurationContributors.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate validateAndRegisterProperties(configuration: IConfigurationNode, validate: boolean = true, extensionInfo: IExtensionInfo | undefined, restrictedProperties: string[] | undefined, scope: ConfigurationScope = ConfigurationScope.WINDOW, bucket: Set<string>): void {\n\t\tscope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n\t\tconst properties = configuration.properties;\n\t\tif (properties) {\n\t\t\tfor (const key in properties) {\n\t\t\t\tconst property: IRegisteredConfigurationPropertySchema = properties[key];\n\t\t\t\tif (validate && validateProperty(key, property)) {\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tproperty.source = extensionInfo;\n\n\t\t\t\t// update default value\n\t\t\t\tproperty.defaultDefaultValue = properties[key].default;\n\t\t\t\tthis.updatePropertyDefaultValue(key, property);\n\n\t\t\t\t// update scope\n\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tproperty.scope = undefined; // No scope for overridable properties `[${identifier}]`\n\t\t\t\t} else {\n\t\t\t\t\tproperty.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n\t\t\t\t\tproperty.restricted = types.isUndefinedOrNull(property.restricted) ? !!restrictedProperties?.includes(key) : property.restricted;\n\t\t\t\t}\n\n\t\t\t\t// Add to properties maps\n\t\t\t\t// Property is included by default if 'included' is unspecified\n\t\t\t\tif (properties[key].hasOwnProperty('included') && !properties[key].included) {\n\t\t\t\t\tthis.excludedConfigurationProperties[key] = properties[key];\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tthis.configurationProperties[key] = properties[key];\n\t\t\t\t\tif (properties[key].policy?.name) {\n\t\t\t\t\t\tthis.policyConfigurations.set(properties[key].policy!.name, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n\t\t\t\t\t// If not set, default deprecationMessage to the markdown source\n\t\t\t\t\tproperties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n\t\t\t\t}\n\n\t\t\t\tbucket.add(key);\n\t\t\t}\n\t\t}\n\t\tconst subNodes = configuration.allOf;\n\t\tif (subNodes) {\n\t\t\tfor (const node of subNodes) {\n\t\t\t\tthis.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope, bucket);\n\t\t\t}\n\t\t}\n\t}\n\n\t// TODO: @sandy081 - Remove this method and include required info in getConfigurationProperties\n\tgetConfigurations(): IConfigurationNode[] {\n\t\treturn this.configurationContributors;\n\t}\n\n\tgetConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema> {\n\t\treturn this.configurationProperties;\n\t}\n\n\tgetPolicyConfigurations(): Map<PolicyName, string> {\n\t\treturn this.policyConfigurations;\n\t}\n\n\tgetExcludedConfigurationProperties(): IStringDictionary<IRegisteredConfigurationPropertySchema> {\n\t\treturn this.excludedConfigurationProperties;\n\t}\n\n\tgetConfigurationDefaultsOverrides(): Map<string, IConfigurationDefaultOverride> {\n\t\treturn this.configurationDefaultsOverrides;\n\t}\n\n\tprivate registerJSONConfiguration(configuration: IConfigurationNode) {\n\t\tconst register = (configuration: IConfigurationNode) => {\n\t\t\tconst properties = configuration.properties;\n\t\t\tif (properties) {\n\t\t\t\tfor (const key in properties) {\n\t\t\t\t\tthis.updateSchema(key, properties[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst subNodes = configuration.allOf;\n\t\t\tsubNodes?.forEach(register);\n\t\t};\n\t\tregister(configuration);\n\t}\n\n\tprivate updateSchema(key: string, property: IConfigurationPropertySchema): void {\n\t\tallSettings.properties[key] = property;\n\t\tswitch (property.scope) {\n\t\t\tcase ConfigurationScope.APPLICATION:\n\t\t\t\tapplicationSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE:\n\t\t\t\tmachineSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE_OVERRIDABLE:\n\t\t\t\tmachineOverridableSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.WINDOW:\n\t\t\t\twindowSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.RESOURCE:\n\t\t\t\tresourceSettings.properties[key] = property;\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.LANGUAGE_OVERRIDABLE:\n\t\t\t\tresourceSettings.properties[key] = property;\n\t\t\t\tthis.resourceLanguageSettingsSchema.properties![key] = property;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate removeFromSchema(key: string, property: IConfigurationPropertySchema): void {\n\t\tdelete allSettings.properties[key];\n\t\tswitch (property.scope) {\n\t\t\tcase ConfigurationScope.APPLICATION:\n\t\t\t\tdelete applicationSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE:\n\t\t\t\tdelete machineSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.MACHINE_OVERRIDABLE:\n\t\t\t\tdelete machineOverridableSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.WINDOW:\n\t\t\t\tdelete windowSettings.properties[key];\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationScope.RESOURCE:\n\t\t\tcase ConfigurationScope.LANGUAGE_OVERRIDABLE:\n\t\t\t\tdelete resourceSettings.properties[key];\n\t\t\t\tdelete this.resourceLanguageSettingsSchema.properties![key];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate updateOverridePropertyPatternKey(): void {\n\t\tfor (const overrideIdentifier of this.overrideIdentifiers.values()) {\n\t\t\tconst overrideIdentifierProperty = `[${overrideIdentifier}]`;\n\t\t\tconst resourceLanguagePropertiesSchema: IJSONSchema = {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n\t\t\t\terrorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n\t\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t\t};\n\t\t\tthis.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n\t\t\tallSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tapplicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tmachineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tmachineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\twindowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t\tresourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n\t\t}\n\t}\n\n\tprivate registerOverridePropertyPatternKey(): void {\n\t\tconst resourceLanguagePropertiesSchema: IJSONSchema = {\n\t\t\ttype: 'object',\n\t\t\tdescription: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n\t\t\terrorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t};\n\t\tallSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\tapplicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\tmachineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\tmachineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\twindowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\tresourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n\t\tthis._onDidSchemaChange.fire();\n\t}\n\n\tprivate updatePropertyDefaultValue(key: string, property: IRegisteredConfigurationPropertySchema): void {\n\t\tconst configurationdefaultOverride = this.configurationDefaultsOverrides.get(key);\n\t\tlet defaultValue = configurationdefaultOverride?.value;\n\t\tlet defaultSource = configurationdefaultOverride?.source;\n\t\tif (types.isUndefined(defaultValue)) {\n\t\t\tdefaultValue = property.defaultDefaultValue;\n\t\t\tdefaultSource = undefined;\n\t\t}\n\t\tif (types.isUndefined(defaultValue)) {\n\t\t\tdefaultValue = getDefaultValue(property.type);\n\t\t}\n\t\tproperty.default = defaultValue;\n\t\tproperty.defaultValueSource = defaultSource;\n\t}\n}\n\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\n\nexport function overrideIdentifiersFromKey(key: string): string[] {\n\tconst identifiers: string[] = [];\n\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\tlet matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n\t\twhile (matches?.length) {\n\t\t\tconst identifier = matches[1].trim();\n\t\t\tif (identifier) {\n\t\t\t\tidentifiers.push(identifier);\n\t\t\t}\n\t\t\tmatches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n\t\t}\n\t}\n\treturn distinct(identifiers);\n}\n\nexport function keyFromOverrideIdentifiers(overrideIdentifiers: string[]): string {\n\treturn overrideIdentifiers.reduce((result, overrideIdentifier) => `${result}[${overrideIdentifier}]`, '');\n}\n\nexport function getDefaultValue(type: string | string[] | undefined): any {\n\tconst t = Array.isArray(type) ? (<string[]>type)[0] : <string>type;\n\tswitch (t) {\n\t\tcase 'boolean':\n\t\t\treturn false;\n\t\tcase 'integer':\n\t\tcase 'number':\n\t\t\treturn 0;\n\t\tcase 'string':\n\t\t\treturn '';\n\t\tcase 'array':\n\t\t\treturn [];\n\t\tcase 'object':\n\t\t\treturn {};\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\n\nexport function validateProperty(property: string, schema: IRegisteredConfigurationPropertySchema): string | null {\n\tif (!property.trim()) {\n\t\treturn nls.localize('config.property.empty', \"Cannot register an empty property\");\n\t}\n\tif (OVERRIDE_PROPERTY_REGEX.test(property)) {\n\t\treturn nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n\t}\n\tif (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n\t\treturn nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n\t}\n\tif (schema.policy?.name && configurationRegistry.getPolicyConfigurations().get(schema.policy?.name) !== undefined) {\n\t\treturn nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, schema.policy?.name, configurationRegistry.getPolicyConfigurations().get(schema.policy?.name));\n\t}\n\treturn null;\n}\n\nexport function getScopes(): [string, ConfigurationScope | undefined][] {\n\tconst scopes: [string, ConfigurationScope | undefined][] = [];\n\tconst configurationProperties = configurationRegistry.getConfigurationProperties();\n\tfor (const key of Object.keys(configurationProperties)) {\n\t\tscopes.push([key, configurationProperties[key].scope]);\n\t}\n\tscopes.push(['launch', ConfigurationScope.RESOURCE]);\n\tscopes.push(['task', ConfigurationScope.RESOURCE]);\n\treturn scopes;\n}\n"]}