{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/configuration/common/configurations.ts"],"names":[],"mappings":"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","file":"configurations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from 'vs/base/common/arrays';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { equals } from 'vs/base/common/objects';\nimport { isEmptyObject } from 'vs/base/common/types';\nimport { ConfigurationModel } from 'vs/platform/configuration/common/configurationModels';\nimport { Extensions, IConfigurationRegistry, IRegisteredConfigurationPropertySchema } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IPolicyService, PolicyDefinition, PolicyName, PolicyValue } from 'vs/platform/policy/common/policy';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport class DefaultConfiguration extends Disposable {\n\n\tprivate readonly _onDidChangeConfiguration = this._register(new Emitter<{ defaults: ConfigurationModel; properties: string[] }>());\n\treadonly onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n\n\tprivate _configurationModel = new ConfigurationModel();\n\tget configurationModel(): ConfigurationModel {\n\t\treturn this._configurationModel;\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tthis.resetConfigurationModel();\n\t\tthis._register(Registry.as<IConfigurationRegistry>(Extensions.Configuration).onDidUpdateConfiguration(({ properties, defaultsOverrides }) => this.onDidUpdateConfiguration(Array.from(properties), defaultsOverrides)));\n\t\treturn this.configurationModel;\n\t}\n\n\treload(): ConfigurationModel {\n\t\tthis.resetConfigurationModel();\n\t\treturn this.configurationModel;\n\t}\n\n\tprotected onDidUpdateConfiguration(properties: string[], defaultsOverrides?: boolean): void {\n\t\tthis.updateConfigurationModel(properties, Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties());\n\t\tthis._onDidChangeConfiguration.fire({ defaults: this.configurationModel, properties });\n\t}\n\n\tprotected getConfigurationDefaultOverrides(): IStringDictionary<any> {\n\t\treturn {};\n\t}\n\n\tprivate resetConfigurationModel(): void {\n\t\tthis._configurationModel = new ConfigurationModel();\n\t\tconst properties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tthis.updateConfigurationModel(Object.keys(properties), properties);\n\t}\n\n\tprivate updateConfigurationModel(properties: string[], configurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>): void {\n\t\tconst configurationDefaultsOverrides = this.getConfigurationDefaultOverrides();\n\t\tfor (const key of properties) {\n\t\t\tconst defaultOverrideValue = configurationDefaultsOverrides[key];\n\t\t\tconst propertySchema = configurationProperties[key];\n\t\t\tif (defaultOverrideValue !== undefined) {\n\t\t\t\tthis._configurationModel.addValue(key, defaultOverrideValue);\n\t\t\t} else if (propertySchema) {\n\t\t\t\tthis._configurationModel.addValue(key, propertySchema.default);\n\t\t\t} else {\n\t\t\t\tthis._configurationModel.removeValue(key);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nexport interface IPolicyConfiguration {\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel>;\n\treadonly configurationModel: ConfigurationModel;\n\tinitialize(): Promise<ConfigurationModel>;\n}\n\nexport class NullPolicyConfiguration implements IPolicyConfiguration {\n\treadonly onDidChangeConfiguration = Event.None;\n\treadonly configurationModel = new ConfigurationModel();\n\tasync initialize() { return this.configurationModel; }\n}\n\nexport class PolicyConfiguration extends Disposable implements IPolicyConfiguration {\n\n\tprivate readonly _onDidChangeConfiguration = this._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n\n\tprivate _configurationModel = new ConfigurationModel();\n\tget configurationModel() { return this._configurationModel; }\n\n\tconstructor(\n\t\tprivate readonly defaultConfiguration: DefaultConfiguration,\n\t\t@IPolicyService private readonly policyService: IPolicyService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tthis.logService.trace('PolicyConfiguration#initialize');\n\t\tthis.update(await this.updatePolicyDefinitions(this.defaultConfiguration.configurationModel.keys), false);\n\t\tthis._register(this.policyService.onDidChange(policyNames => this.onDidChangePolicies(policyNames)));\n\t\tthis._register(this.defaultConfiguration.onDidChangeConfiguration(async ({ properties }) => this.update(await this.updatePolicyDefinitions(properties), true)));\n\t\treturn this._configurationModel;\n\t}\n\n\tprivate async updatePolicyDefinitions(properties: string[]): Promise<string[]> {\n\t\tthis.logService.trace('PolicyConfiguration#updatePolicyDefinitions', properties);\n\t\tconst policyDefinitions: IStringDictionary<PolicyDefinition> = {};\n\t\tconst keys: string[] = [];\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\n\t\tfor (const key of properties) {\n\t\t\tconst config = configurationProperties[key];\n\t\t\tif (!config) {\n\t\t\t\t// Config is removed. So add it to the list if in case it was registered as policy before\n\t\t\t\tkeys.push(key);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (config.policy) {\n\t\t\t\tif (config.type !== 'string' && config.type !== 'number') {\n\t\t\t\t\tthis.logService.warn(`Policy ${config.policy.name} has unsupported type ${config.type}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tkeys.push(key);\n\t\t\t\tpolicyDefinitions[config.policy.name] = { type: config.type };\n\t\t\t}\n\t\t}\n\n\t\tif (!isEmptyObject(policyDefinitions)) {\n\t\t\tawait this.policyService.updatePolicyDefinitions(policyDefinitions);\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\tprivate onDidChangePolicies(policyNames: readonly PolicyName[]): void {\n\t\tthis.logService.trace('PolicyConfiguration#onDidChangePolicies', policyNames);\n\t\tconst policyConfigurations = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getPolicyConfigurations();\n\t\tconst keys = coalesce(policyNames.map(policyName => policyConfigurations.get(policyName)));\n\t\tthis.update(keys, true);\n\t}\n\n\tprivate update(keys: string[], trigger: boolean): void {\n\t\tthis.logService.trace('PolicyConfiguration#update', keys);\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tconst changed: [string, PolicyValue | undefined][] = [];\n\t\tconst wasEmpty = this._configurationModel.isEmpty();\n\n\t\tfor (const key of keys) {\n\t\t\tconst policyName = configurationProperties[key]?.policy?.name;\n\t\t\tif (policyName) {\n\t\t\t\tconst policyValue = this.policyService.getPolicyValue(policyName);\n\t\t\t\tif (wasEmpty ? policyValue !== undefined : !equals(this._configurationModel.getValue(key), policyValue)) {\n\t\t\t\t\tchanged.push([key, policyValue]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._configurationModel.getValue(key) !== undefined) {\n\t\t\t\t\tchanged.push([key, undefined]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (changed.length) {\n\t\t\tthis.logService.trace('PolicyConfiguration#changed', changed);\n\t\t\tconst old = this._configurationModel;\n\t\t\tthis._configurationModel = new ConfigurationModel();\n\t\t\tfor (const key of old.keys) {\n\t\t\t\tthis._configurationModel.setValue(key, old.getValue(key));\n\t\t\t}\n\t\t\tfor (const [key, policyValue] of changed) {\n\t\t\t\tif (policyValue === undefined) {\n\t\t\t\t\tthis._configurationModel.removeValue(key);\n\t\t\t\t} else {\n\t\t\t\t\tthis._configurationModel.setValue(key, policyValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (trigger) {\n\t\t\t\tthis._onDidChangeConfiguration.fire(this._configurationModel);\n\t\t\t}\n\t\t}\n\t}\n\n\n}\n"]}