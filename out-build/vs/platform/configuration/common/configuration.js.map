{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/configuration/common/configuration.ts"],"names":[],"mappings":"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","file":"configuration.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport * as types from 'vs/base/common/types';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\n\nexport const IConfigurationService = createDecorator<IConfigurationService>('configurationService');\n\nexport function isConfigurationOverrides(thing: any): thing is IConfigurationOverrides {\n\treturn thing\n\t\t&& typeof thing === 'object'\n\t\t&& (!thing.overrideIdentifier || typeof thing.overrideIdentifier === 'string')\n\t\t&& (!thing.resource || thing.resource instanceof URI);\n}\n\nexport interface IConfigurationOverrides {\n\toverrideIdentifier?: string | null;\n\tresource?: URI | null;\n}\n\nexport function isConfigurationUpdateOverrides(thing: any): thing is IConfigurationUpdateOverrides {\n\treturn thing\n\t\t&& typeof thing === 'object'\n\t\t&& (!thing.overrideIdentifiers || Array.isArray(thing.overrideIdentifiers))\n\t\t&& !thing.overrideIdentifier\n\t\t&& (!thing.resource || thing.resource instanceof URI);\n}\n\nexport type IConfigurationUpdateOverrides = Omit<IConfigurationOverrides, 'overrideIdentifier'> & { overrideIdentifiers?: string[] | null };\n\nexport const enum ConfigurationTarget {\n\tAPPLICATION = 1,\n\tUSER,\n\tUSER_LOCAL,\n\tUSER_REMOTE,\n\tWORKSPACE,\n\tWORKSPACE_FOLDER,\n\tDEFAULT,\n\tMEMORY\n}\nexport function ConfigurationTargetToString(configurationTarget: ConfigurationTarget) {\n\tswitch (configurationTarget) {\n\t\tcase ConfigurationTarget.APPLICATION: return 'APPLICATION';\n\t\tcase ConfigurationTarget.USER: return 'USER';\n\t\tcase ConfigurationTarget.USER_LOCAL: return 'USER_LOCAL';\n\t\tcase ConfigurationTarget.USER_REMOTE: return 'USER_REMOTE';\n\t\tcase ConfigurationTarget.WORKSPACE: return 'WORKSPACE';\n\t\tcase ConfigurationTarget.WORKSPACE_FOLDER: return 'WORKSPACE_FOLDER';\n\t\tcase ConfigurationTarget.DEFAULT: return 'DEFAULT';\n\t\tcase ConfigurationTarget.MEMORY: return 'MEMORY';\n\t}\n}\n\nexport interface IConfigurationChange {\n\tkeys: string[];\n\toverrides: [string, string[]][];\n}\n\nexport interface IConfigurationChangeEvent {\n\n\treadonly source: ConfigurationTarget;\n\treadonly affectedKeys: ReadonlySet<string>;\n\treadonly change: IConfigurationChange;\n\n\taffectsConfiguration(configuration: string, overrides?: IConfigurationOverrides): boolean;\n\n\t// Following data is used for telemetry\n\treadonly sourceConfig: any;\n}\n\nexport interface IConfigurationValue<T> {\n\n\treadonly defaultValue?: T;\n\treadonly applicationValue?: T;\n\treadonly userValue?: T;\n\treadonly userLocalValue?: T;\n\treadonly userRemoteValue?: T;\n\treadonly workspaceValue?: T;\n\treadonly workspaceFolderValue?: T;\n\treadonly memoryValue?: T;\n\treadonly policyValue?: T;\n\treadonly value?: T;\n\n\treadonly default?: { value?: T; override?: T };\n\treadonly application?: { value?: T; override?: T };\n\treadonly user?: { value?: T; override?: T };\n\treadonly userLocal?: { value?: T; override?: T };\n\treadonly userRemote?: { value?: T; override?: T };\n\treadonly workspace?: { value?: T; override?: T };\n\treadonly workspaceFolder?: { value?: T; override?: T };\n\treadonly memory?: { value?: T; override?: T };\n\treadonly policy?: { value?: T };\n\n\treadonly overrideIdentifiers?: string[];\n}\n\nexport function isConfigured<T>(configValue: IConfigurationValue<T>): configValue is IConfigurationValue<T> & { value: T } {\n\treturn configValue.applicationValue !== undefined ||\n\t\tconfigValue.userValue !== undefined ||\n\t\tconfigValue.userLocalValue !== undefined ||\n\t\tconfigValue.userRemoteValue !== undefined ||\n\t\tconfigValue.workspaceValue !== undefined ||\n\t\tconfigValue.workspaceFolderValue !== undefined;\n}\n\nexport interface IConfigurationUpdateOptions {\n\t/**\n\t * If `true`, do not notifies the error to user by showing the message box. Default is `false`.\n\t */\n\tdonotNotifyError?: boolean;\n\t/**\n\t * How to handle dirty file when updating the configuration.\n\t */\n\thandleDirtyFile?: 'save' | 'revert';\n}\n\nexport interface IConfigurationService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeConfiguration: Event<IConfigurationChangeEvent>;\n\n\tgetConfigurationData(): IConfigurationData | null;\n\n\t/**\n\t * Fetches the value of the section for the given overrides.\n\t * Value can be of native type or an object keyed off the section name.\n\t *\n\t * @param section - Section of the configuration. Can be `null` or `undefined`.\n\t * @param overrides - Overrides that has to be applied while fetching\n\t *\n\t */\n\tgetValue<T>(): T;\n\tgetValue<T>(section: string): T;\n\tgetValue<T>(overrides: IConfigurationOverrides): T;\n\tgetValue<T>(section: string, overrides: IConfigurationOverrides): T;\n\n\t/**\n\t * Update a configuration value.\n\t *\n\t * Use `target` to update the configuration in a specific `ConfigurationTarget`.\n\t *\n\t * Use `overrides` to update the configuration for a resource or for override identifiers or both.\n\t *\n\t * Passing a resource through overrides will update the configuration in the workspace folder containing that resource.\n\t *\n\t * *Note 1:* Updating configuration to a default value will remove the configuration from the requested target. If not target is passed, it will be removed from all writeable targets.\n\t *\n\t * *Note 2:* Use `undefined` value to remove the configuration from the given target. If not target is passed, it will be removed from all writeable targets.\n\t *\n\t * Use `donotNotifyError` and set it to `true` to surpresss errors.\n\t *\n\t * @param key setting to be updated\n\t * @param value The new value\n\t */\n\tupdateValue(key: string, value: any): Promise<void>;\n\tupdateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides | IConfigurationUpdateOverrides): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides | IConfigurationUpdateOverrides, target: ConfigurationTarget, options?: IConfigurationUpdateOptions): Promise<void>;\n\n\tinspect<T>(key: string, overrides?: IConfigurationOverrides): IConfigurationValue<Readonly<T>>;\n\n\treloadConfiguration(target?: ConfigurationTarget | IWorkspaceFolder): Promise<void>;\n\n\tkeys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t\tmemory?: string[];\n\t};\n}\n\nexport interface IConfigurationModel {\n\tcontents: any;\n\tkeys: string[];\n\toverrides: IOverrides[];\n}\n\nexport interface IOverrides {\n\tkeys: string[];\n\tcontents: any;\n\tidentifiers: string[];\n}\n\nexport interface IConfigurationData {\n\tdefaults: IConfigurationModel;\n\tpolicy: IConfigurationModel;\n\tapplication: IConfigurationModel;\n\tuser: IConfigurationModel;\n\tworkspace: IConfigurationModel;\n\tfolders: [UriComponents, IConfigurationModel][];\n}\n\nexport interface IConfigurationCompareResult {\n\tadded: string[];\n\tremoved: string[];\n\tupdated: string[];\n\toverrides: [string, string[]][];\n}\n\nexport function toValuesTree(properties: { [qualifiedKey: string]: any }, conflictReporter: (message: string) => void): any {\n\tconst root = Object.create(null);\n\n\tfor (const key in properties) {\n\t\taddToValueTree(root, key, properties[key], conflictReporter);\n\t}\n\n\treturn root;\n}\n\nexport function addToValueTree(settingsTreeRoot: any, key: string, value: any, conflictReporter: (message: string) => void): void {\n\tconst segments = key.split('.');\n\tconst last = segments.pop()!;\n\n\tlet curr = settingsTreeRoot;\n\tfor (let i = 0; i < segments.length; i++) {\n\t\tconst s = segments[i];\n\t\tlet obj = curr[s];\n\t\tswitch (typeof obj) {\n\t\t\tcase 'undefined':\n\t\t\t\tobj = curr[s] = Object.create(null);\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n\t\t\t\treturn;\n\t\t}\n\t\tcurr = obj;\n\t}\n\n\tif (typeof curr === 'object' && curr !== null) {\n\t\ttry {\n\t\t\tcurr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n\t\t} catch (e) {\n\t\t\tconflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n\t\t}\n\t} else {\n\t\tconflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n\t}\n}\n\nexport function removeFromValueTree(valueTree: any, key: string): void {\n\tconst segments = key.split('.');\n\tdoRemoveFromValueTree(valueTree, segments);\n}\n\nfunction doRemoveFromValueTree(valueTree: any, segments: string[]): void {\n\tconst first = segments.shift()!;\n\tif (segments.length === 0) {\n\t\t// Reached last segment\n\t\tdelete valueTree[first];\n\t\treturn;\n\t}\n\n\tif (Object.keys(valueTree).indexOf(first) !== -1) {\n\t\tconst value = valueTree[first];\n\t\tif (typeof value === 'object' && !Array.isArray(value)) {\n\t\t\tdoRemoveFromValueTree(value, segments);\n\t\t\tif (Object.keys(value).length === 0) {\n\t\t\t\tdelete valueTree[first];\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue<T>(config: any, settingPath: string, defaultValue?: T): T {\n\tfunction accessSetting(config: any, path: string[]): any {\n\t\tlet current = config;\n\t\tfor (const component of path) {\n\t\t\tif (typeof current !== 'object' || current === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tcurrent = current[component];\n\t\t}\n\t\treturn <T>current;\n\t}\n\n\tconst path = settingPath.split('.');\n\tconst result = accessSetting(config, path);\n\n\treturn typeof result === 'undefined' ? defaultValue : result;\n}\n\nexport function merge(base: any, add: any, overwrite: boolean): void {\n\tObject.keys(add).forEach(key => {\n\t\tif (key !== '__proto__') {\n\t\t\tif (key in base) {\n\t\t\t\tif (types.isObject(base[key]) && types.isObject(add[key])) {\n\t\t\t\t\tmerge(base[key], add[key], overwrite);\n\t\t\t\t} else if (overwrite) {\n\t\t\t\t\tbase[key] = add[key];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbase[key] = add[key];\n\t\t\t}\n\t\t}\n\t});\n}\n\nexport function getLanguageTagSettingPlainKey(settingKey: string) {\n\treturn settingKey.replace(/[\\[\\]]/g, '');\n}\n"]}