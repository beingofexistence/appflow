{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/configuration/common/configurationService.ts"],"names":[],"mappings":"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","file":"configurationService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { extUriBiasedIgnorePathCase } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { ConfigurationTarget, IConfigurationChange, IConfigurationChangeEvent, IConfigurationData, IConfigurationOverrides, IConfigurationService, IConfigurationValue, isConfigurationOverrides } from 'vs/platform/configuration/common/configuration';\nimport { Configuration, ConfigurationChangeEvent, ConfigurationModel, UserSettings } from 'vs/platform/configuration/common/configurationModels';\nimport { DefaultConfiguration, IPolicyConfiguration, NullPolicyConfiguration, PolicyConfiguration } from 'vs/platform/configuration/common/configurations';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IPolicyService, NullPolicyService } from 'vs/platform/policy/common/policy';\n\nexport class ConfigurationService extends Disposable implements IConfigurationService, IDisposable {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate configuration: Configuration;\n\tprivate readonly defaultConfiguration: DefaultConfiguration;\n\tprivate readonly policyConfiguration: IPolicyConfiguration;\n\tprivate readonly userConfiguration: UserSettings;\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<IConfigurationChangeEvent> = this._register(new Emitter<IConfigurationChangeEvent>());\n\treadonly onDidChangeConfiguration: Event<IConfigurationChangeEvent> = this._onDidChangeConfiguration.event;\n\n\tconstructor(\n\t\tprivate readonly settingsResource: URI,\n\t\tfileService: IFileService,\n\t\tpolicyService: IPolicyService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.defaultConfiguration = this._register(new DefaultConfiguration());\n\t\tthis.policyConfiguration = policyService instanceof NullPolicyService ? new NullPolicyConfiguration() : this._register(new PolicyConfiguration(this.defaultConfiguration, policyService, logService));\n\t\tthis.userConfiguration = this._register(new UserSettings(this.settingsResource, {}, extUriBiasedIgnorePathCase, fileService));\n\t\tthis.configuration = new Configuration(this.defaultConfiguration.configurationModel, this.policyConfiguration.configurationModel, new ConfigurationModel(), new ConfigurationModel());\n\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this.reloadConfiguration(), 50));\n\t\tthis._register(this.defaultConfiguration.onDidChangeConfiguration(({ defaults, properties }) => this.onDidDefaultConfigurationChange(defaults, properties)));\n\t\tthis._register(this.policyConfiguration.onDidChangeConfiguration(model => this.onDidPolicyConfigurationChange(model)));\n\t\tthis._register(this.userConfiguration.onDidChange(() => this.reloadConfigurationScheduler.schedule()));\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tconst [defaultModel, policyModel, userModel] = await Promise.all([this.defaultConfiguration.initialize(), this.policyConfiguration.initialize(), this.userConfiguration.loadConfiguration()]);\n\t\tthis.configuration = new Configuration(defaultModel, policyModel, new ConfigurationModel(), userModel);\n\t}\n\n\tgetConfigurationData(): IConfigurationData {\n\t\treturn this.configuration.toData();\n\t}\n\n\tgetValue<T>(): T;\n\tgetValue<T>(section: string): T;\n\tgetValue<T>(overrides: IConfigurationOverrides): T;\n\tgetValue<T>(section: string, overrides: IConfigurationOverrides): T;\n\tgetValue(arg1?: any, arg2?: any): any {\n\t\tconst section = typeof arg1 === 'string' ? arg1 : undefined;\n\t\tconst overrides = isConfigurationOverrides(arg1) ? arg1 : isConfigurationOverrides(arg2) ? arg2 : {};\n\t\treturn this.configuration.getValue(section, overrides, undefined);\n\t}\n\n\tupdateValue(key: string, value: any): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;\n\tupdateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget): Promise<void>;\n\tupdateValue(key: string, value: any, arg3?: any, arg4?: any): Promise<void> {\n\t\treturn Promise.reject(new Error('not supported'));\n\t}\n\n\tinspect<T>(key: string): IConfigurationValue<T> {\n\t\treturn this.configuration.inspect<T>(key, {}, undefined);\n\t}\n\n\tkeys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t} {\n\t\treturn this.configuration.keys(undefined);\n\t}\n\n\tasync reloadConfiguration(): Promise<void> {\n\t\tconst configurationModel = await this.userConfiguration.loadConfiguration();\n\t\tthis.onDidChangeUserConfiguration(configurationModel);\n\t}\n\n\tprivate onDidChangeUserConfiguration(userConfigurationModel: ConfigurationModel): void {\n\t\tconst previous = this.configuration.toData();\n\t\tconst change = this.configuration.compareAndUpdateLocalUserConfiguration(userConfigurationModel);\n\t\tthis.trigger(change, previous, ConfigurationTarget.USER);\n\t}\n\n\tprivate onDidDefaultConfigurationChange(defaultConfigurationModel: ConfigurationModel, properties: string[]): void {\n\t\tconst previous = this.configuration.toData();\n\t\tconst change = this.configuration.compareAndUpdateDefaultConfiguration(defaultConfigurationModel, properties);\n\t\tthis.trigger(change, previous, ConfigurationTarget.DEFAULT);\n\t}\n\n\tprivate onDidPolicyConfigurationChange(policyConfiguration: ConfigurationModel): void {\n\t\tconst previous = this.configuration.toData();\n\t\tconst change = this.configuration.compareAndUpdatePolicyConfiguration(policyConfiguration);\n\t\tthis.trigger(change, previous, ConfigurationTarget.DEFAULT);\n\t}\n\n\tprivate trigger(configurationChange: IConfigurationChange, previous: IConfigurationData, source: ConfigurationTarget): void {\n\t\tconst event = new ConfigurationChangeEvent(configurationChange, { data: previous }, this.configuration);\n\t\tevent.source = source;\n\t\tevent.sourceConfig = this.getTargetConfiguration(source);\n\t\tthis._onDidChangeConfiguration.fire(event);\n\t}\n\n\tprivate getTargetConfiguration(target: ConfigurationTarget): any {\n\t\tswitch (target) {\n\t\t\tcase ConfigurationTarget.DEFAULT:\n\t\t\t\treturn this.configuration.defaults.contents;\n\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\treturn this.configuration.localUserConfiguration.contents;\n\t\t}\n\t\treturn {};\n\t}\n}\n"]}