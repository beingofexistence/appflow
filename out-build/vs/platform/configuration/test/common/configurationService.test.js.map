{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/configuration/test/common/configurationService.test.ts"],"names":[],"mappings":"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","file":"configurationService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Event } from 'vs/base/common/event';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { ConfigurationTarget, isConfigured } from 'vs/platform/configuration/common/configuration';\nimport { Extensions as ConfigurationExtensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ConfigurationService } from 'vs/platform/configuration/common/configurationService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { NullPolicyService } from 'vs/platform/policy/common/policy';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nsuite('ConfigurationService.test.ts', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet fileService: IFileService;\n\tlet settingsResource: URI;\n\n\tsetup(async () => {\n\t\tfileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst diskFileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(Schemas.file, diskFileSystemProvider));\n\t\tsettingsResource = URI.file('settings.json');\n\t});\n\n\ttest('simple', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"bar\" }'));\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tconst config = testObject.getValue<{\n\t\t\tfoo: string;\n\t\t}>();\n\n\t\tassert.ok(config);\n\t\tassert.strictEqual(config.foo, 'bar');\n\t}));\n\n\ttest('config gets flattened', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"testworkbench.editor.tabs\": true }'));\n\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tconst config = testObject.getValue<{\n\t\t\ttestworkbench: {\n\t\t\t\teditor: {\n\t\t\t\t\ttabs: boolean;\n\t\t\t\t};\n\t\t\t};\n\t\t}>();\n\n\t\tassert.ok(config);\n\t\tassert.ok(config.testworkbench);\n\t\tassert.ok(config.testworkbench.editor);\n\t\tassert.strictEqual(config.testworkbench.editor.tabs, true);\n\t}));\n\n\ttest('error case does not explode', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString(',,,,'));\n\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tconst config = testObject.getValue<{\n\t\t\tfoo: string;\n\t\t}>();\n\n\t\tassert.ok(config);\n\t}));\n\n\ttest('missing file does not explode', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst testObject = disposables.add(new ConfigurationService(URI.file('__testFile'), fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tconst config = testObject.getValue<{ foo: string }>();\n\n\t\tassert.ok(config);\n\t}));\n\n\ttest('trigger configuration change event when file does not exist', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tdisposables.add(Event.filter(testObject.onDidChangeConfiguration, e => e.source === ConfigurationTarget.USER)(() => {\n\t\t\t\tassert.strictEqual(testObject.getValue('foo'), 'bar');\n\t\t\t\tc();\n\t\t\t}));\n\t\t\tfileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"bar\" }')).catch(e);\n\t\t});\n\n\t}));\n\n\ttest('trigger configuration change event when file exists', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"bar\" }'));\n\t\tawait testObject.initialize();\n\n\t\treturn new Promise<void>((c) => {\n\t\t\tdisposables.add(Event.filter(testObject.onDidChangeConfiguration, e => e.source === ConfigurationTarget.USER)(async (e) => {\n\t\t\t\tassert.strictEqual(testObject.getValue('foo'), 'barz');\n\t\t\t\tc();\n\t\t\t}));\n\t\t\tfileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"barz\" }'));\n\t\t});\n\t}));\n\n\ttest('reloadConfiguration', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"bar\" }'));\n\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tlet config = testObject.getValue<{\n\t\t\tfoo: string;\n\t\t}>();\n\t\tassert.ok(config);\n\t\tassert.strictEqual(config.foo, 'bar');\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"foo\": \"changed\" }'));\n\n\t\t// force a reload to get latest\n\t\tawait testObject.reloadConfiguration();\n\t\tconfig = testObject.getValue<{\n\t\t\tfoo: string;\n\t\t}>();\n\t\tassert.ok(config);\n\t\tassert.strictEqual(config.foo, 'changed');\n\t}));\n\n\ttest('model defaults', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tinterface ITestSetting {\n\t\t\tconfiguration: {\n\t\t\t\tservice: {\n\t\t\t\t\ttestSetting: string;\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configuration.service.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tlet testObject = disposables.add(new ConfigurationService(URI.file('__testFile'), fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\t\tlet setting = testObject.getValue<ITestSetting>();\n\n\t\tassert.ok(setting);\n\t\tassert.strictEqual(setting.configuration.service.testSetting, 'isSet');\n\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"testworkbench.editor.tabs\": true }'));\n\t\ttestObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tsetting = testObject.getValue<ITestSetting>();\n\n\t\tassert.ok(setting);\n\t\tassert.strictEqual(setting.configuration.service.testSetting, 'isSet');\n\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"configuration.service.testSetting\": \"isChanged\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tsetting = testObject.getValue<ITestSetting>();\n\t\tassert.ok(setting);\n\t\tassert.strictEqual(setting.configuration.service.testSetting, 'isChanged');\n\t}));\n\n\ttest('lookup', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'lookup.service.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tlet res = testObject.inspect('something.missing');\n\t\tassert.strictEqual(res.value, undefined);\n\t\tassert.strictEqual(res.defaultValue, undefined);\n\t\tassert.strictEqual(res.userValue, undefined);\n\t\tassert.strictEqual(isConfigured(res), false);\n\n\t\tres = testObject.inspect('lookup.service.testSetting');\n\t\tassert.strictEqual(res.defaultValue, 'isSet');\n\t\tassert.strictEqual(res.value, 'isSet');\n\t\tassert.strictEqual(res.userValue, undefined);\n\t\tassert.strictEqual(isConfigured(res), false);\n\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"lookup.service.testSetting\": \"bar\" }'));\n\n\t\tawait testObject.reloadConfiguration();\n\t\tres = testObject.inspect('lookup.service.testSetting');\n\t\tassert.strictEqual(res.defaultValue, 'isSet');\n\t\tassert.strictEqual(res.userValue, 'bar');\n\t\tassert.strictEqual(res.value, 'bar');\n\t\tassert.strictEqual(isConfigured(res), true);\n\n\t}));\n\n\ttest('lookup with null', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_testNull',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'lookup.service.testNullSetting': {\n\t\t\t\t\t'type': 'null',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst testObject = disposables.add(new ConfigurationService(settingsResource, fileService, new NullPolicyService(), new NullLogService()));\n\t\tawait testObject.initialize();\n\n\t\tlet res = testObject.inspect('lookup.service.testNullSetting');\n\t\tassert.strictEqual(res.defaultValue, null);\n\t\tassert.strictEqual(res.value, null);\n\t\tassert.strictEqual(res.userValue, undefined);\n\n\t\tawait fileService.writeFile(settingsResource, VSBuffer.fromString('{ \"lookup.service.testNullSetting\": null }'));\n\n\t\tawait testObject.reloadConfiguration();\n\n\t\tres = testObject.inspect('lookup.service.testNullSetting');\n\t\tassert.strictEqual(res.defaultValue, null);\n\t\tassert.strictEqual(res.value, null);\n\t\tassert.strictEqual(res.userValue, null);\n\t}));\n});\n"]}