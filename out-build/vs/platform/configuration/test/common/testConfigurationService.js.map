{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/configuration/test/common/testConfigurationService.ts"],"names":[],"mappings":"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","file":"testConfigurationService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { TernarySearchTree } from 'vs/base/common/ternarySearchTree';\nimport { URI } from 'vs/base/common/uri';\nimport { getConfigurationValue, IConfigurationChangeEvent, IConfigurationOverrides, IConfigurationService, IConfigurationValue, isConfigurationOverrides } from 'vs/platform/configuration/common/configuration';\nimport { Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport class TestConfigurationService implements IConfigurationService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate configuration: any;\n\treadonly onDidChangeConfigurationEmitter = new Emitter<IConfigurationChangeEvent>();\n\treadonly onDidChangeConfiguration = this.onDidChangeConfigurationEmitter.event;\n\n\tconstructor(configuration?: any) {\n\t\tthis.configuration = configuration || Object.create(null);\n\t}\n\n\tprivate configurationByRoot: TernarySearchTree<string, any> = TernarySearchTree.forPaths<any>();\n\n\tpublic reloadConfiguration<T>(): Promise<T> {\n\t\treturn Promise.resolve(this.getValue());\n\t}\n\n\tpublic getValue(arg1?: any, arg2?: any): any {\n\t\tlet configuration;\n\t\tconst overrides = isConfigurationOverrides(arg1) ? arg1 : isConfigurationOverrides(arg2) ? arg2 : undefined;\n\t\tif (overrides) {\n\t\t\tif (overrides.resource) {\n\t\t\t\tconfiguration = this.configurationByRoot.findSubstr(overrides.resource.fsPath);\n\t\t\t}\n\t\t}\n\t\tconfiguration = configuration ? configuration : this.configuration;\n\t\tif (arg1 && typeof arg1 === 'string') {\n\t\t\treturn configuration[arg1] ?? getConfigurationValue(configuration, arg1);\n\t\t}\n\t\treturn configuration;\n\t}\n\n\tpublic updateValue(key: string, value: any): Promise<void> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic setUserConfiguration(key: any, value: any, root?: URI): Promise<void> {\n\t\tif (root) {\n\t\t\tconst configForRoot = this.configurationByRoot.get(root.fsPath) || Object.create(null);\n\t\t\tconfigForRoot[key] = value;\n\t\t\tthis.configurationByRoot.set(root.fsPath, configForRoot);\n\t\t} else {\n\t\t\tthis.configuration[key] = value;\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate overrideIdentifiers: Map<string, string[]> = new Map();\n\tpublic setOverrideIdentifiers(key: string, identifiers: string[]): void {\n\t\tthis.overrideIdentifiers.set(key, identifiers);\n\t}\n\n\tpublic inspect<T>(key: string, overrides?: IConfigurationOverrides): IConfigurationValue<T> {\n\t\tconst config = this.getValue(undefined, overrides);\n\n\t\treturn {\n\t\t\tvalue: getConfigurationValue<T>(config, key),\n\t\t\tdefaultValue: getConfigurationValue<T>(config, key),\n\t\t\tuserValue: getConfigurationValue<T>(config, key),\n\t\t\toverrideIdentifiers: this.overrideIdentifiers.get(key)\n\t\t};\n\t}\n\n\tpublic keys() {\n\t\treturn {\n\t\t\tdefault: Object.keys(Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties()),\n\t\t\tuser: Object.keys(this.configuration),\n\t\t\tworkspace: [],\n\t\t\tworkspaceFolder: []\n\t\t};\n\t}\n\n\tpublic getConfigurationData() {\n\t\treturn null;\n\t}\n}\n"]}