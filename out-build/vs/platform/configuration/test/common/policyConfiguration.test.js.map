{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/configuration/test/common/policyConfiguration.test.ts"],"names":[],"mappings":"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","file":"policyConfiguration.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { DefaultConfiguration, PolicyConfiguration } from 'vs/platform/configuration/common/configurations';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { Extensions, IConfigurationNode, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { deepClone } from 'vs/base/common/objects';\nimport { IPolicyService } from 'vs/platform/policy/common/policy';\nimport { FilePolicyService } from 'vs/platform/policy/common/filePolicyService';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('PolicyConfiguration', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet testObject: PolicyConfiguration;\n\tlet fileService: IFileService;\n\tlet policyService: IPolicyService;\n\tconst policyFile = URI.file('policyFile').with({ scheme: 'vscode-tests' });\n\tconst policyConfigurationNode: IConfigurationNode = {\n\t\t'id': 'policyConfiguration',\n\t\t'order': 1,\n\t\t'title': 'a',\n\t\t'type': 'object',\n\t\t'properties': {\n\t\t\t'policy.settingA': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'default': 'defaultValueA',\n\t\t\t\tpolicy: {\n\t\t\t\t\tname: 'PolicySettingA',\n\t\t\t\t\tminimumVersion: '1.0.0',\n\t\t\t\t}\n\t\t\t},\n\t\t\t'policy.settingB': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'default': 'defaultValueB',\n\t\t\t\tpolicy: {\n\t\t\t\t\tname: 'PolicySettingB',\n\t\t\t\t\tminimumVersion: '1.0.0',\n\t\t\t\t}\n\t\t\t},\n\t\t\t'nonPolicy.setting': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true\n\t\t\t}\n\t\t}\n\t};\n\n\tsuiteSetup(() => Registry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration(policyConfigurationNode));\n\tsuiteTeardown(() => Registry.as<IConfigurationRegistry>(Extensions.Configuration).deregisterConfigurations([policyConfigurationNode]));\n\n\tsetup(async () => {\n\t\tconst defaultConfiguration = disposables.add(new DefaultConfiguration());\n\t\tawait defaultConfiguration.initialize();\n\t\tfileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst diskFileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(policyFile.scheme, diskFileSystemProvider));\n\t\tpolicyService = disposables.add(new FilePolicyService(policyFile, fileService, new NullLogService()));\n\t\ttestObject = disposables.add(new PolicyConfiguration(defaultConfiguration, policyService, new NullLogService()));\n\t});\n\n\ttest('initialize: with policies', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA' })));\n\n\t\tawait testObject.initialize();\n\t\tconst acutal = testObject.configurationModel;\n\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), 'policyValueA');\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, ['policy.settingA']);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('initialize: no policies', async () => {\n\t\tawait testObject.initialize();\n\t\tconst acutal = testObject.configurationModel;\n\n\t\tassert.deepStrictEqual(acutal.keys, []);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), undefined);\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t});\n\n\ttest('initialize: with policies but not registered', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA', 'PolicySettingB': 'policyValueB', 'PolicySettingC': 'policyValueC' })));\n\n\t\tawait testObject.initialize();\n\t\tconst acutal = testObject.configurationModel;\n\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), 'policyValueA');\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), 'policyValueB');\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, ['policy.settingA', 'policy.settingB']);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('change: when policy is added', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA' })));\n\t\tawait testObject.initialize();\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA', 'PolicySettingB': 'policyValueB', 'PolicySettingC': 'policyValueC' })));\n\t\t\tawait promise;\n\t\t});\n\n\t\tconst acutal = testObject.configurationModel;\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), 'policyValueA');\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), 'policyValueB');\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, ['policy.settingA', 'policy.settingB']);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('change: when policy is updated', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA' })));\n\t\tawait testObject.initialize();\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueAChanged' })));\n\t\t\tawait promise;\n\t\t});\n\n\t\tconst acutal = testObject.configurationModel;\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), 'policyValueAChanged');\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, ['policy.settingA']);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('change: when policy is removed', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA' })));\n\t\tawait testObject.initialize();\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({})));\n\t\t\tawait promise;\n\t\t});\n\n\t\tconst acutal = testObject.configurationModel;\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), undefined);\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, []);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('change: when policy setting is registered', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingC': 'policyValueC' })));\n\t\tawait testObject.initialize();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tpolicyConfigurationNode.properties!['policy.settingC'] = {\n\t\t\t'type': 'string',\n\t\t\t'default': 'defaultValueC',\n\t\t\tpolicy: {\n\t\t\t\tname: 'PolicySettingC',\n\t\t\t\tminimumVersion: '1.0.0',\n\t\t\t}\n\t\t};\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration(deepClone(policyConfigurationNode));\n\t\tawait promise;\n\n\t\tconst acutal = testObject.configurationModel;\n\t\tassert.strictEqual(acutal.getValue('policy.settingC'), 'policyValueC');\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), undefined);\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, ['policy.settingC']);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n\ttest('change: when policy setting is deregistered', async () => {\n\t\tawait fileService.writeFile(policyFile, VSBuffer.fromString(JSON.stringify({ 'PolicySettingA': 'policyValueA' })));\n\t\tawait testObject.initialize();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).deregisterConfigurations([policyConfigurationNode]);\n\t\tawait promise;\n\n\t\tconst acutal = testObject.configurationModel;\n\t\tassert.strictEqual(acutal.getValue('policy.settingA'), undefined);\n\t\tassert.strictEqual(acutal.getValue('policy.settingB'), undefined);\n\t\tassert.strictEqual(acutal.getValue('nonPolicy.setting'), undefined);\n\t\tassert.deepStrictEqual(acutal.keys, []);\n\t\tassert.deepStrictEqual(acutal.overrides, []);\n\t});\n\n});\n"]}