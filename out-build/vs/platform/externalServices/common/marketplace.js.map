{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/externalServices/common/marketplace.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYzF,KAAK,UAAU,GAAG,CAAuB,OAAe,EAC9D,cAAmB,EACnB,kBAAuB,EACvB,oBAAyB,EACzB,WAAgB,EAChB,cAA2C,EAC3C,gBAAqB;QAErB,MAAM,OAAO,GAAa;YACzB,oBAAoB,EAAE,UAAU,OAAO,EAAE;YACzC,YAAY,EAAE,UAAU,OAAO,KAAK,cAAc,CAAC,SAAS,GAAG;SAC/D,CAAC;QAEF,IAAI,IAAA,oBAAG,EAAe,cAAc,EAAE,kBAAkB,CAAC,IAAI,IAAA,oBAAG,EAAe,oBAAoB,CAAC,iCAAyB,EAAE;YAC9H,MAAM,gBAAgB,GAAG,MAAM,IAAA,sBAAG,EAAiB,kBAAkB,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;YACpG,OAAO,CAAC,kBAAkB,CAAC,GAAG,gBAAgB,CAAC;YAC/C,oGAAoG;YACpG,iHAAiH;YACjH,6EAA6E;YAC7E,OAAO,CAAC,kBAAkB,CAAC,GAAG,gBAAgB,CAAC,SAAS,IAAI,gBAAgB,CAAC;SAC7E;QAED,OAAO,OAAO,CAAC;IAChB,CAAC;IAvBD,kBAuBC","file":"marketplace.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IHeaders } from 'vs/base/parts/request/common/request';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { getServiceMachineId } from 'vs/platform/externalServices/common/serviceMachineId';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService, TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { getTelemetryLevel, supportsTelemetry } from 'vs/platform/telemetry/common/telemetryUtils';\n\nexport async function resolveMarketplaceHeaders(version: string,\n\tproductService: IProductService,\n\tenvironmentService: IEnvironmentService,\n\tconfigurationService: IConfigurationService,\n\tfileService: IFileService,\n\tstorageService: IStorageService | undefined,\n\ttelemetryService: ITelemetryService): Promise<IHeaders> {\n\n\tconst headers: IHeaders = {\n\t\t'X-Market-Client-Id': `VSCode ${version}`,\n\t\t'User-Agent': `VSCode ${version} (${productService.nameShort})`\n\t};\n\n\tif (supportsTelemetry(productService, environmentService) && getTelemetryLevel(configurationService) === TelemetryLevel.USAGE) {\n\t\tconst serviceMachineId = await getServiceMachineId(environmentService, fileService, storageService);\n\t\theaders['X-Market-User-Id'] = serviceMachineId;\n\t\t// Send machineId as VSCode-SessionId so we can correlate telemetry events across different services\n\t\t// machineId can be undefined sometimes (eg: when launching from CLI), so send serviceMachineId instead otherwise\n\t\t// Marketplace will reject the request if there is no VSCode-SessionId header\n\t\theaders['VSCode-SessionId'] = telemetryService.machineId || serviceMachineId;\n\t}\n\n\treturn headers;\n}\n"]}