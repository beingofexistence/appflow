{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/externalServices/common/serviceMachineId.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQzF,KAAK,UAAU,GAAG,CAAiB,kBAAuB,EAAkB,WAAgB,EAAW,cAA2C;QACxJ,IAAI,IAAI,GAAkB,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,0BAA0B,oCAA2B,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QACnI,IAAI,IAAI,EAAE;YACT,OAAO,IAAI,CAAC;SACZ;QACD,IAAI;YACH,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,QAAQ,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,CAAC;YACzF,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACxC,IAAI,GAAG,IAAA,UAAG,EAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;SACpC;QAAC,OAAO,CAAC,EAAE;YACX,IAAI,GAAG,IAAI,CAAC;SACZ;QAED,IAAI,CAAC,IAAI,EAAE;YACV,IAAI,GAAG,IAAA,UAAG,GAAW,CAAC;YACtB,IAAI;gBACH,MAAM,WAAW,CAAC,SAAS,CAAC,kBAAkB,CAAC,wBAAwB,EAAE,YAAG,CAAM,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;aACpG;YAAC,OAAO,KAAK,EAAE;gBACf,MAAM;aACN;SACD;QAED,cAAc,EAAE,KAAK,CAAC,0BAA0B,EAAE,IAAI,mEAAkD,CAAC;QAEzG,OAAO,IAAI,CAAC;IACb,CAAC;IAzBD,kBAyBC","file":"serviceMachineId.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { generateUuid, isUUID } from 'vs/base/common/uuid';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\n\nexport async function getServiceMachineId(environmentService: IEnvironmentService, fileService: IFileService, storageService: IStorageService | undefined): Promise<string> {\n\tlet uuid: string | null = storageService ? storageService.get('storage.serviceMachineId', StorageScope.APPLICATION) || null : null;\n\tif (uuid) {\n\t\treturn uuid;\n\t}\n\ttry {\n\t\tconst contents = await fileService.readFile(environmentService.serviceMachineIdResource);\n\t\tconst value = contents.value.toString();\n\t\tuuid = isUUID(value) ? value : null;\n\t} catch (e) {\n\t\tuuid = null;\n\t}\n\n\tif (!uuid) {\n\t\tuuid = generateUuid();\n\t\ttry {\n\t\t\tawait fileService.writeFile(environmentService.serviceMachineIdResource, VSBuffer.fromString(uuid));\n\t\t} catch (error) {\n\t\t\t//noop\n\t\t}\n\t}\n\n\tstorageService?.store('storage.serviceMachineId', uuid, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\n\treturn uuid;\n}\n"]}