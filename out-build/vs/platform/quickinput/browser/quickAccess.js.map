{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/quickinput/browser/quickAccess.ts"],"names":[],"mappings":"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","file":"quickAccess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { once } from 'vs/base/common/functional';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { DefaultQuickAccessFilterValue, Extensions, IQuickAccessController, IQuickAccessOptions, IQuickAccessProvider, IQuickAccessProviderDescriptor, IQuickAccessProviderRunOptions, IQuickAccessRegistry } from 'vs/platform/quickinput/common/quickAccess';\nimport { IQuickInputService, IQuickPick, IQuickPickItem, ItemActivation } from 'vs/platform/quickinput/common/quickInput';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport class QuickAccessController extends Disposable implements IQuickAccessController {\n\n\tprivate readonly registry = Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess);\n\tprivate readonly mapProviderToDescriptor = new Map<IQuickAccessProviderDescriptor, IQuickAccessProvider>();\n\n\tprivate readonly lastAcceptedPickerValues = new Map<IQuickAccessProviderDescriptor, string>();\n\n\tprivate visibleQuickAccess: {\n\t\treadonly picker: IQuickPick<IQuickPickItem>;\n\t\treadonly descriptor: IQuickAccessProviderDescriptor | undefined;\n\t\treadonly value: string;\n\t} | undefined = undefined;\n\n\tconstructor(\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t}\n\n\tpick(value = '', options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined> {\n\t\treturn this.doShowOrPick(value, true, options);\n\t}\n\n\tshow(value = '', options?: IQuickAccessOptions): void {\n\t\tthis.doShowOrPick(value, false, options);\n\t}\n\n\tprivate doShowOrPick(value: string, pick: true, options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined>;\n\tprivate doShowOrPick(value: string, pick: false, options?: IQuickAccessOptions): void;\n\tprivate doShowOrPick(value: string, pick: boolean, options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined> | void {\n\n\t\t// Find provider for the value to show\n\t\tconst [provider, descriptor] = this.getOrInstantiateProvider(value);\n\n\t\t// Return early if quick access is already showing on that same prefix\n\t\tconst visibleQuickAccess = this.visibleQuickAccess;\n\t\tconst visibleDescriptor = visibleQuickAccess?.descriptor;\n\t\tif (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n\n\t\t\t// Apply value only if it is more specific than the prefix\n\t\t\t// from the provider and we are not instructed to preserve\n\t\t\tif (value !== descriptor.prefix && !options?.preserveValue) {\n\t\t\t\tvisibleQuickAccess.picker.value = value;\n\t\t\t}\n\n\t\t\t// Always adjust selection\n\t\t\tthis.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Rewrite the filter value based on certain rules unless disabled\n\t\tif (descriptor && !options?.preserveValue) {\n\t\t\tlet newValue: string | undefined = undefined;\n\n\t\t\t// If we have a visible provider with a value, take it's filter value but\n\t\t\t// rewrite to new provider prefix in case they differ\n\t\t\tif (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n\t\t\t\tconst newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n\t\t\t\tif (newValueCandidateWithoutPrefix) {\n\t\t\t\t\tnewValue = `${descriptor.prefix}${newValueCandidateWithoutPrefix}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise, take a default value as instructed\n\t\t\tif (!newValue) {\n\t\t\t\tconst defaultFilterValue = provider?.defaultFilterValue;\n\t\t\t\tif (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n\t\t\t\t\tnewValue = this.lastAcceptedPickerValues.get(descriptor);\n\t\t\t\t} else if (typeof defaultFilterValue === 'string') {\n\t\t\t\t\tnewValue = `${descriptor.prefix}${defaultFilterValue}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof newValue === 'string') {\n\t\t\t\tvalue = newValue;\n\t\t\t}\n\t\t}\n\n\t\t// Create a picker for the provider to use with the initial value\n\t\t// and adjust the filtering to exclude the prefix from filtering\n\t\tconst disposables = new DisposableStore();\n\t\tconst picker = disposables.add(this.quickInputService.createQuickPick());\n\t\tpicker.value = value;\n\t\tthis.adjustValueSelection(picker, descriptor, options);\n\t\tpicker.placeholder = descriptor?.placeholder;\n\t\tpicker.quickNavigate = options?.quickNavigateConfiguration;\n\t\tpicker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n\t\tif (typeof options?.itemActivation === 'number' || options?.quickNavigateConfiguration) {\n\t\t\tpicker.itemActivation = options?.itemActivation ?? ItemActivation.SECOND /* quick nav is always second */;\n\t\t}\n\t\tpicker.contextKey = descriptor?.contextKey;\n\t\tpicker.filterValue = (value: string) => value.substring(descriptor ? descriptor.prefix.length : 0);\n\n\t\t// Pick mode: setup a promise that can be resolved\n\t\t// with the selected items and prevent execution\n\t\tlet pickPromise: DeferredPromise<IQuickPickItem[]> | undefined = undefined;\n\t\tif (pick) {\n\t\t\tpickPromise = new DeferredPromise<IQuickPickItem[]>();\n\t\t\tdisposables.add(once(picker.onWillAccept)(e => {\n\t\t\t\te.veto();\n\t\t\t\tpicker.hide();\n\t\t\t}));\n\t\t}\n\n\t\t// Register listeners\n\t\tdisposables.add(this.registerPickerListeners(picker, provider, descriptor, value, options?.providerOptions));\n\n\t\t// Ask provider to fill the picker as needed if we have one\n\t\t// and pass over a cancellation token that will indicate when\n\t\t// the picker is hiding without a pick being made.\n\t\tconst cts = disposables.add(new CancellationTokenSource());\n\t\tif (provider) {\n\t\t\tdisposables.add(provider.provide(picker, cts.token, options?.providerOptions));\n\t\t}\n\n\t\t// Finally, trigger disposal and cancellation when the picker\n\t\t// hides depending on items selected or not.\n\t\tonce(picker.onDidHide)(() => {\n\t\t\tif (picker.selectedItems.length === 0) {\n\t\t\t\tcts.cancel();\n\t\t\t}\n\n\t\t\t// Start to dispose once picker hides\n\t\t\tdisposables.dispose();\n\n\t\t\t// Resolve pick promise with selected items\n\t\t\tpickPromise?.complete(picker.selectedItems.slice(0));\n\t\t});\n\n\t\t// Finally, show the picker. This is important because a provider\n\t\t// may not call this and then our disposables would leak that rely\n\t\t// on the onDidHide event.\n\t\tpicker.show();\n\n\t\t// Pick mode: return with promise\n\t\tif (pick) {\n\t\t\treturn pickPromise?.p;\n\t\t}\n\t}\n\n\tprivate adjustValueSelection(picker: IQuickPick<IQuickPickItem>, descriptor?: IQuickAccessProviderDescriptor, options?: IQuickAccessOptions): void {\n\t\tlet valueSelection: [number, number];\n\n\t\t// Preserve: just always put the cursor at the end\n\t\tif (options?.preserveValue) {\n\t\t\tvalueSelection = [picker.value.length, picker.value.length];\n\t\t}\n\n\t\t// Otherwise: select the value up until the prefix\n\t\telse {\n\t\t\tvalueSelection = [descriptor?.prefix.length ?? 0, picker.value.length];\n\t\t}\n\n\t\tpicker.valueSelection = valueSelection;\n\t}\n\n\tprivate registerPickerListeners(\n\t\tpicker: IQuickPick<IQuickPickItem>,\n\t\tprovider: IQuickAccessProvider | undefined,\n\t\tdescriptor: IQuickAccessProviderDescriptor | undefined,\n\t\tvalue: string,\n\t\tproviderOptions?: IQuickAccessProviderRunOptions\n\t): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Remember as last visible picker and clean up once picker get's disposed\n\t\tconst visibleQuickAccess = this.visibleQuickAccess = { picker, descriptor, value };\n\t\tdisposables.add(toDisposable(() => {\n\t\t\tif (visibleQuickAccess === this.visibleQuickAccess) {\n\t\t\t\tthis.visibleQuickAccess = undefined;\n\t\t\t}\n\t\t}));\n\n\t\t// Whenever the value changes, check if the provider has\n\t\t// changed and if so - re-create the picker from the beginning\n\t\tdisposables.add(picker.onDidChangeValue(value => {\n\t\t\tconst [providerForValue] = this.getOrInstantiateProvider(value);\n\t\t\tif (providerForValue !== provider) {\n\t\t\t\tthis.show(value, {\n\t\t\t\t\t// do not rewrite value from user typing!\n\t\t\t\t\tpreserveValue: true,\n\t\t\t\t\t// persist the value of the providerOptions from the original showing\n\t\t\t\t\tproviderOptions\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvisibleQuickAccess.value = value; // remember the value in our visible one\n\t\t\t}\n\t\t}));\n\n\t\t// Remember picker input for future use when accepting\n\t\tif (descriptor) {\n\t\t\tdisposables.add(picker.onDidAccept(() => {\n\t\t\t\tthis.lastAcceptedPickerValues.set(descriptor, picker.value);\n\t\t\t}));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\tprivate getOrInstantiateProvider(value: string): [IQuickAccessProvider | undefined, IQuickAccessProviderDescriptor | undefined] {\n\t\tconst providerDescriptor = this.registry.getQuickAccessProvider(value);\n\t\tif (!providerDescriptor) {\n\t\t\treturn [undefined, undefined];\n\t\t}\n\n\t\tlet provider = this.mapProviderToDescriptor.get(providerDescriptor);\n\t\tif (!provider) {\n\t\t\tprovider = this.instantiationService.createInstance(providerDescriptor.ctor);\n\t\t\tthis.mapProviderToDescriptor.set(providerDescriptor, provider);\n\t\t}\n\n\t\treturn [provider, providerDescriptor];\n\t}\n}\n"]}