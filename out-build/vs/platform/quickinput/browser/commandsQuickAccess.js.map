{"version":3,"sources":["vs/platform/quickinput/browser/commandsQuickAccess.ts"],"names":[],"mappings":"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","file":"commandsQuickAccess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WorkbenchActionExecutedClassification, WorkbenchActionExecutedEvent } from 'vs/base/common/actions';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { isCancellationError } from 'vs/base/common/errors';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from 'vs/base/common/filters';\nimport { once } from 'vs/base/common/functional';\nimport { Disposable, DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { LRUCache } from 'vs/base/common/map';\nimport { TfIdfCalculator, normalizeTfIdfScores } from 'vs/base/common/tfIdf';\nimport { localize } from 'vs/nls';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationChangeEvent, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { FastAndSlowPicks, IPickerQuickAccessItem, IPickerQuickAccessProviderOptions, PickerQuickAccessProvider, Picks } from 'vs/platform/quickinput/browser/pickerQuickAccess';\nimport { IQuickAccessProviderRunOptions } from 'vs/platform/quickinput/common/quickAccess';\nimport { IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\nexport interface ICommandQuickPick extends IPickerQuickAccessItem {\n\treadonly commandId: string;\n\treadonly commandAlias?: string;\n\ttfIdfScore?: number;\n\treadonly args?: any[];\n}\n\nexport interface ICommandsQuickAccessOptions extends IPickerQuickAccessProviderOptions<ICommandQuickPick> {\n\treadonly showAlias: boolean;\n\tsuggestedCommandIds?: Set<string>;\n}\n\nexport abstract class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider<ICommandQuickPick> implements IDisposable {\n\n\tstatic PREFIX = '>';\n\n\tprivate static readonly TFIDF_THRESHOLD = 0.5;\n\tprivate static readonly TFIDF_MAX_RESULTS = 5;\n\n\tprivate static WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\n\n\tprivate readonly commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n\n\tprotected override readonly options: ICommandsQuickAccessOptions;\n\n\tconstructor(\n\t\toptions: ICommandsQuickAccessOptions,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IDialogService private readonly dialogService: IDialogService\n\t) {\n\t\tsuper(AbstractCommandsQuickAccessProvider.PREFIX, options);\n\n\t\tthis.options = options;\n\t}\n\n\tprotected async _getPicks(filter: string, _disposables: DisposableStore, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): Promise<Picks<ICommandQuickPick> | FastAndSlowPicks<ICommandQuickPick>> {\n\n\t\t// Ask subclass for all command picks\n\t\tconst allCommandPicks = await this.getCommandPicks(token);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst runTfidf = once(() => {\n\t\t\tconst tfidf = new TfIdfCalculator();\n\t\t\ttfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n\t\t\t\tkey: commandPick.commandId,\n\t\t\t\ttextChunks: [commandPick.label + (commandPick.commandAlias ? ` ${commandPick.commandAlias}` : '')]\n\t\t\t})));\n\t\t\tconst result = tfidf.calculateScores(filter, token);\n\n\t\t\treturn normalizeTfIdfScores(result)\n\t\t\t\t.filter(score => score.score > AbstractCommandsQuickAccessProvider.TFIDF_THRESHOLD)\n\t\t\t\t.slice(0, AbstractCommandsQuickAccessProvider.TFIDF_MAX_RESULTS);\n\t\t});\n\n\t\t// Filter\n\t\tconst filteredCommandPicks: ICommandQuickPick[] = [];\n\t\tfor (const commandPick of allCommandPicks) {\n\t\t\tconst labelHighlights = AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.label) ?? undefined;\n\t\t\tconst aliasHighlights = commandPick.commandAlias ? AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.commandAlias) ?? undefined : undefined;\n\n\t\t\t// Add if matching in label or alias\n\t\t\tif (labelHighlights || aliasHighlights) {\n\t\t\t\tcommandPick.highlights = {\n\t\t\t\t\tlabel: labelHighlights,\n\t\t\t\t\tdetail: this.options.showAlias ? aliasHighlights : undefined\n\t\t\t\t};\n\n\t\t\t\tfilteredCommandPicks.push(commandPick);\n\t\t\t}\n\n\t\t\t// Also add if we have a 100% command ID match\n\t\t\telse if (filter === commandPick.commandId) {\n\t\t\t\tfilteredCommandPicks.push(commandPick);\n\t\t\t}\n\n\t\t\t// Handle tf-idf scoring for the rest if there's a filter\n\t\t\telse if (filter.length >= 3) {\n\t\t\t\tconst tfidf = runTfidf();\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\t// Add if we have a tf-idf score\n\t\t\t\tconst tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n\t\t\t\tif (tfidfScore) {\n\t\t\t\t\tcommandPick.tfIdfScore = tfidfScore.score;\n\t\t\t\t\tfilteredCommandPicks.push(commandPick);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add description to commands that have duplicate labels\n\t\tconst mapLabelToCommand = new Map<string, ICommandQuickPick>();\n\t\tfor (const commandPick of filteredCommandPicks) {\n\t\t\tconst existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n\t\t\tif (existingCommandForLabel) {\n\t\t\t\tcommandPick.description = commandPick.commandId;\n\t\t\t\texistingCommandForLabel.description = existingCommandForLabel.commandId;\n\t\t\t} else {\n\t\t\t\tmapLabelToCommand.set(commandPick.label, commandPick);\n\t\t\t}\n\t\t}\n\n\t\t// Sort by MRU order and fallback to name otherwise\n\t\tfilteredCommandPicks.sort((commandPickA, commandPickB) => {\n\t\t\t// If a result came from tf-idf, we want to put that towards the bottom\n\t\t\tif (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n\t\t\t\tif (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n\t\t\t\t\treturn commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n\t\t\t\t}\n\t\t\t\treturn commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n\t\t\t} else if (commandPickA.tfIdfScore) {\n\t\t\t\treturn 1; // first command has a score but other doesn't so other wins\n\t\t\t} else if (commandPickB.tfIdfScore) {\n\t\t\t\treturn -1; // other command has a score but first doesn't so first wins\n\t\t\t}\n\n\t\t\tconst commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n\t\t\tconst commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n\n\t\t\tif (commandACounter && commandBCounter) {\n\t\t\t\treturn commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n\t\t\t}\n\n\t\t\tif (commandACounter) {\n\t\t\t\treturn -1; // first command was used, so it wins over the non used one\n\t\t\t}\n\n\t\t\tif (commandBCounter) {\n\t\t\t\treturn 1; // other command was used so it wins over the command\n\t\t\t}\n\n\t\t\tif (this.options.suggestedCommandIds) {\n\t\t\t\tconst commandASuggestion = this.options.suggestedCommandIds.has(commandPickA.commandId);\n\t\t\t\tconst commandBSuggestion = this.options.suggestedCommandIds.has(commandPickB.commandId);\n\t\t\t\tif (commandASuggestion && commandBSuggestion) {\n\t\t\t\t\treturn 0; // honor the order of the array\n\t\t\t\t}\n\n\t\t\t\tif (commandASuggestion) {\n\t\t\t\t\treturn -1; // first command was suggested, so it wins over the non suggested one\n\t\t\t\t}\n\n\t\t\t\tif (commandBSuggestion) {\n\t\t\t\t\treturn 1; // other command was suggested so it wins over the command\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// both commands were never used, so we sort by name\n\t\t\treturn commandPickA.label.localeCompare(commandPickB.label);\n\t\t});\n\n\t\tconst commandPicks: Array<ICommandQuickPick | IQuickPickSeparator> = [];\n\n\t\tlet addOtherSeparator = false;\n\t\tlet addSuggestedSeparator = true;\n\t\tlet addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n\t\tfor (let i = 0; i < filteredCommandPicks.length; i++) {\n\t\t\tconst commandPick = filteredCommandPicks[i];\n\n\t\t\t// Separator: recently used\n\t\t\tif (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n\t\t\t\tcommandPicks.push({ type: 'separator', label: localize('recentlyUsed', \"recently used\") });\n\t\t\t\taddOtherSeparator = true;\n\t\t\t}\n\n\t\t\tif (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n\t\t\t\tcommandPicks.push({ type: 'separator', label: localize('suggested', \"similar commands\") });\n\t\t\t\taddSuggestedSeparator = false;\n\t\t\t}\n\n\t\t\t// Separator: commonly used\n\t\t\tif (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n\t\t\t\tcommandPicks.push({ type: 'separator', label: localize('commonlyUsed', \"commonly used\") });\n\t\t\t\taddOtherSeparator = true;\n\t\t\t\taddCommonlyUsedSeparator = false;\n\t\t\t}\n\n\t\t\t// Separator: other commands\n\t\t\tif (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n\t\t\t\tcommandPicks.push({ type: 'separator', label: localize('morecCommands', \"other commands\") });\n\t\t\t\taddOtherSeparator = false;\n\t\t\t}\n\n\t\t\t// Command\n\t\t\tcommandPicks.push(this.toCommandPick(commandPick, runOptions));\n\t\t}\n\n\t\tif (!this.hasAdditionalCommandPicks(filter, token)) {\n\t\t\treturn commandPicks;\n\t\t}\n\n\t\treturn {\n\t\t\tpicks: commandPicks,\n\t\t\tadditionalPicks: (async (): Promise<Picks<ICommandQuickPick>> => {\n\t\t\t\tconst additionalCommandPicks = await this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tconst commandPicks: Array<ICommandQuickPick | IQuickPickSeparator> = additionalCommandPicks.map(commandPick => this.toCommandPick(commandPick, runOptions));\n\t\t\t\t// Basically, if we haven't already added a separator, we add one before the additional picks so long\n\t\t\t\t// as one hasn't been added to the start of the array.\n\t\t\t\tif (addSuggestedSeparator && commandPicks[0]?.type !== 'separator') {\n\t\t\t\t\tcommandPicks.unshift({ type: 'separator', label: localize('suggested', \"similar commands\") });\n\t\t\t\t}\n\t\t\t\treturn commandPicks;\n\t\t\t})()\n\t\t};\n\t}\n\n\tprivate toCommandPick(commandPick: ICommandQuickPick | IQuickPickSeparator, runOptions?: IQuickAccessProviderRunOptions): ICommandQuickPick | IQuickPickSeparator {\n\t\tif (commandPick.type === 'separator') {\n\t\t\treturn commandPick;\n\t\t}\n\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n\t\tconst ariaLabel = keybinding ?\n\t\t\tlocalize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) :\n\t\t\tcommandPick.label;\n\n\t\treturn {\n\t\t\t...commandPick,\n\t\t\tariaLabel,\n\t\t\tdetail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n\t\t\tkeybinding,\n\t\t\taccept: async () => {\n\n\t\t\t\t// Add to history\n\t\t\t\tthis.commandsHistory.push(commandPick.commandId);\n\n\t\t\t\t// Telementry\n\t\t\t\tthis.telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', {\n\t\t\t\t\tid: commandPick.commandId,\n\t\t\t\t\tfrom: runOptions?.from ?? 'quick open'\n\t\t\t\t});\n\n\t\t\t\t// Run\n\t\t\t\ttry {\n\t\t\t\t\tcommandPick.args?.length\n\t\t\t\t\t\t? await this.commandService.executeCommand(commandPick.commandId, ...commandPick.args)\n\t\t\t\t\t\t: await this.commandService.executeCommand(commandPick.commandId);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (!isCancellationError(error)) {\n\t\t\t\t\t\tthis.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprotected abstract getCommandPicks(token: CancellationToken): Promise<Array<ICommandQuickPick>>;\n\n\tprotected abstract hasAdditionalCommandPicks(filter: string, token: CancellationToken): boolean;\n\tprotected abstract getAdditionalCommandPicks(allPicks: ICommandQuickPick[], picksSoFar: ICommandQuickPick[], filter: string, token: CancellationToken): Promise<Array<ICommandQuickPick | IQuickPickSeparator>>;\n}\n\ninterface ISerializedCommandHistory {\n\treadonly usesLRU?: boolean;\n\treadonly entries: { key: string; value: number }[];\n}\n\ninterface ICommandsQuickAccessConfiguration {\n\treadonly workbench: {\n\t\treadonly commandPalette: {\n\t\t\treadonly history: number;\n\t\t\treadonly preserveInput: boolean;\n\t\t};\n\t};\n}\n\nexport class CommandsHistory extends Disposable {\n\n\tstatic readonly DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\n\n\tprivate static readonly PREF_KEY_CACHE = 'commandPalette.mru.cache';\n\tprivate static readonly PREF_KEY_COUNTER = 'commandPalette.mru.counter';\n\n\tprivate static cache: LRUCache<string, number> | undefined;\n\tprivate static counter = 1;\n\n\tprivate configuredCommandsHistoryLength = 0;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.updateConfiguration();\n\t\tthis.load();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n\t}\n\n\tprivate updateConfiguration(e?: IConfigurationChangeEvent): void {\n\t\tif (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.configuredCommandsHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(this.configurationService);\n\n\t\tif (CommandsHistory.cache && CommandsHistory.cache.limit !== this.configuredCommandsHistoryLength) {\n\t\t\tCommandsHistory.cache.limit = this.configuredCommandsHistoryLength;\n\n\t\t\tCommandsHistory.saveState(this.storageService);\n\t\t}\n\t}\n\n\tprivate load(): void {\n\t\tconst raw = this.storageService.get(CommandsHistory.PREF_KEY_CACHE, StorageScope.PROFILE);\n\t\tlet serializedCache: ISerializedCommandHistory | undefined;\n\t\tif (raw) {\n\t\t\ttry {\n\t\t\t\tserializedCache = JSON.parse(raw);\n\t\t\t} catch (error) {\n\t\t\t\t// invalid data\n\t\t\t}\n\t\t}\n\n\t\tconst cache = CommandsHistory.cache = new LRUCache<string, number>(this.configuredCommandsHistoryLength, 1);\n\t\tif (serializedCache) {\n\t\t\tlet entries: { key: string; value: number }[];\n\t\t\tif (serializedCache.usesLRU) {\n\t\t\t\tentries = serializedCache.entries;\n\t\t\t} else {\n\t\t\t\tentries = serializedCache.entries.sort((a, b) => a.value - b.value);\n\t\t\t}\n\t\t\tentries.forEach(entry => cache.set(entry.key, entry.value));\n\t\t}\n\n\t\tCommandsHistory.counter = this.storageService.getNumber(CommandsHistory.PREF_KEY_COUNTER, StorageScope.PROFILE, CommandsHistory.counter);\n\t}\n\n\tpush(commandId: string): void {\n\t\tif (!CommandsHistory.cache) {\n\t\t\treturn;\n\t\t}\n\n\t\tCommandsHistory.cache.set(commandId, CommandsHistory.counter++); // set counter to command\n\n\t\tCommandsHistory.saveState(this.storageService);\n\t}\n\n\tpeek(commandId: string): number | undefined {\n\t\treturn CommandsHistory.cache?.peek(commandId);\n\t}\n\n\tstatic saveState(storageService: IStorageService): void {\n\t\tif (!CommandsHistory.cache) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst serializedCache: ISerializedCommandHistory = { usesLRU: true, entries: [] };\n\t\tCommandsHistory.cache.forEach((value, key) => serializedCache.entries.push({ key, value }));\n\n\t\tstorageService.store(CommandsHistory.PREF_KEY_CACHE, JSON.stringify(serializedCache), StorageScope.PROFILE, StorageTarget.USER);\n\t\tstorageService.store(CommandsHistory.PREF_KEY_COUNTER, CommandsHistory.counter, StorageScope.PROFILE, StorageTarget.USER);\n\t}\n\n\tstatic getConfiguredCommandHistoryLength(configurationService: IConfigurationService): number {\n\t\tconst config = <ICommandsQuickAccessConfiguration>configurationService.getValue();\n\n\t\tconst configuredCommandHistoryLength = config.workbench?.commandPalette?.history;\n\t\tif (typeof configuredCommandHistoryLength === 'number') {\n\t\t\treturn configuredCommandHistoryLength;\n\t\t}\n\n\t\treturn CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH;\n\t}\n\n\tstatic clearHistory(configurationService: IConfigurationService, storageService: IStorageService): void {\n\t\tconst commandHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(configurationService);\n\t\tCommandsHistory.cache = new LRUCache<string, number>(commandHistoryLength);\n\t\tCommandsHistory.counter = 1;\n\n\t\tCommandsHistory.saveState(storageService);\n\t}\n}\n"]}