{"version":3,"sources":["vs/platform/quickinput/browser/helpQuickAccess.ts"],"names":[],"mappings":"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","file":"helpQuickAccess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { Extensions, IQuickAccessProvider, IQuickAccessProviderDescriptor, IQuickAccessRegistry } from 'vs/platform/quickinput/common/quickAccess';\nimport { IQuickInputService, IQuickPick, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\n\ninterface IHelpQuickAccessPickItem extends IQuickPickItem {\n\treadonly prefix: string;\n}\n\nexport class HelpQuickAccessProvider implements IQuickAccessProvider {\n\n\tstatic PREFIX = '?';\n\n\tprivate readonly registry = Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess);\n\n\tconstructor(\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) { }\n\n\tprovide(picker: IQuickPick<IHelpQuickAccessPickItem>): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Open a picker with the selected value if picked\n\t\tdisposables.add(picker.onDidAccept(() => {\n\t\t\tconst [item] = picker.selectedItems;\n\t\t\tif (item) {\n\t\t\t\tthis.quickInputService.quickAccess.show(item.prefix, { preserveValue: true });\n\t\t\t}\n\t\t}));\n\n\t\t// Also open a picker when we detect the user typed the exact\n\t\t// name of a provider (e.g. `?term` for terminals)\n\t\tdisposables.add(picker.onDidChangeValue(value => {\n\t\t\tconst providerDescriptor = this.registry.getQuickAccessProvider(value.substr(HelpQuickAccessProvider.PREFIX.length));\n\t\t\tif (providerDescriptor && providerDescriptor.prefix && providerDescriptor.prefix !== HelpQuickAccessProvider.PREFIX) {\n\t\t\t\tthis.quickInputService.quickAccess.show(providerDescriptor.prefix, { preserveValue: true });\n\t\t\t}\n\t\t}));\n\n\t\t// Fill in all providers\n\t\tpicker.items = this.getQuickAccessProviders().filter(p => p.prefix !== HelpQuickAccessProvider.PREFIX);\n\n\t\treturn disposables;\n\t}\n\n\tgetQuickAccessProviders(): IHelpQuickAccessPickItem[] {\n\t\tconst providers: IHelpQuickAccessPickItem[] = this.registry\n\t\t\t.getQuickAccessProviders()\n\t\t\t.sort((providerA, providerB) => providerA.prefix.localeCompare(providerB.prefix))\n\t\t\t.flatMap(provider => this.createPicks(provider));\n\n\t\treturn providers;\n\t}\n\n\tprivate createPicks(provider: IQuickAccessProviderDescriptor): IHelpQuickAccessPickItem[] {\n\t\treturn provider.helpEntries.map(helpEntry => {\n\t\t\tconst prefix = helpEntry.prefix || provider.prefix;\n\t\t\tconst label = prefix || '\\u2026' /* ... */;\n\n\t\t\treturn {\n\t\t\t\tprefix,\n\t\t\t\tlabel,\n\t\t\t\tkeybinding: helpEntry.commandId ? this.keybindingService.lookupKeybinding(helpEntry.commandId) : undefined,\n\t\t\t\tariaLabel: localize('helpPickAriaLabel', \"{0}, {1}\", label, helpEntry.description),\n\t\t\t\tdescription: helpEntry.description\n\t\t\t};\n\t\t});\n\t}\n}\n"]}