{"version":3,"sources":["vs/platform/quickinput/browser/quickPickPin.ts"],"names":[],"mappings":"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","file":"quickPickPin.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from 'vs/base/common/codicons';\nimport { localize } from 'vs/nls';\nimport { IQuickPick, IQuickPickItem, QuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ThemeIcon } from 'vs/base/common/themables';\n\nconst pinButtonClass = ThemeIcon.asClassName(Codicon.pin);\nconst pinnedButtonClass = ThemeIcon.asClassName(Codicon.pinned);\nconst buttonClasses = [pinButtonClass, pinnedButtonClass];\n/**\n * Initially, adds pin buttons to all @param quickPick items.\n * When pinned, a copy of the item will be moved to the end of the pinned list and any duplicate within the pinned list will\n * be removed if @param filterDupliates has been provided. Pin and pinned button events trigger updates to the underlying storage.\n * Shows the quickpick once formatted.\n */\nexport async function showWithPinnedItems(storageService: IStorageService, storageKey: string, quickPick: IQuickPick<IQuickPickItem>, filterDuplicates?: boolean): Promise<void> {\n\tconst itemsWithoutPinned = quickPick.items;\n\tlet itemsWithPinned = _formatPinnedItems(storageKey, quickPick, storageService, undefined, filterDuplicates);\n\tquickPick.onDidTriggerItemButton(async buttonEvent => {\n\t\tconst expectedButton = buttonEvent.button.iconClass && buttonClasses.includes(buttonEvent.button.iconClass);\n\t\tif (expectedButton) {\n\t\t\tquickPick.items = itemsWithoutPinned;\n\t\t\titemsWithPinned = _formatPinnedItems(storageKey, quickPick, storageService, buttonEvent.item, filterDuplicates);\n\t\t\tquickPick.items = quickPick.value ? itemsWithoutPinned : itemsWithPinned;\n\t\t}\n\t});\n\tquickPick.onDidChangeValue(async value => {\n\t\tif (quickPick.items === itemsWithPinned && value) {\n\t\t\tquickPick.items = itemsWithoutPinned;\n\t\t} else if (quickPick.items === itemsWithoutPinned && !value) {\n\t\t\tquickPick.items = itemsWithPinned;\n\t\t}\n\t});\n\n\tquickPick.items = quickPick.value ? itemsWithoutPinned : itemsWithPinned;\n\tquickPick.show();\n}\n\nfunction _formatPinnedItems(storageKey: string, quickPick: IQuickPick<IQuickPickItem>, storageService: IStorageService, changedItem?: IQuickPickItem, filterDuplicates?: boolean): QuickPickItem[] {\n\tconst formattedItems: QuickPickItem[] = [];\n\tlet pinnedItems;\n\tif (changedItem) {\n\t\tpinnedItems = updatePinnedItems(storageKey, changedItem, storageService);\n\t} else {\n\t\tpinnedItems = getPinnedItems(storageKey, storageService);\n\t}\n\tif (pinnedItems.length) {\n\t\tformattedItems.push({ type: 'separator', label: localize(\"terminal.commands.pinned\", 'pinned') });\n\t}\n\tconst pinnedIds = new Set();\n\tfor (const itemToFind of pinnedItems) {\n\t\tconst itemToPin = quickPick.items.find(item => itemsMatch(item, itemToFind));\n\t\tif (itemToPin) {\n\t\t\tconst pinnedItemId = getItemIdentifier(itemToPin);\n\t\t\tconst pinnedItem: IQuickPickItem = Object.assign({} as IQuickPickItem, itemToPin);\n\t\t\tif (!filterDuplicates || !pinnedIds.has(pinnedItemId)) {\n\t\t\t\tpinnedIds.add(pinnedItemId);\n\t\t\t\tupdateButtons(pinnedItem, false);\n\t\t\t\tformattedItems.push(pinnedItem);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const item of quickPick.items) {\n\t\tupdateButtons(item, true);\n\t\tformattedItems.push(item);\n\t}\n\treturn formattedItems;\n}\n\nfunction getItemIdentifier(item: QuickPickItem): string {\n\treturn item.type === 'separator' ? '' : item.id || `${item.label}${item.description}${item.detail}}`;\n}\n\nfunction updateButtons(item: QuickPickItem, removePin: boolean): void {\n\tif (item.type === 'separator') {\n\t\treturn;\n\t}\n\n\t// remove button classes before adding the new one\n\tconst newButtons = item.buttons?.filter(button => button.iconClass && !buttonClasses.includes(button.iconClass)) ?? [];\n\tnewButtons.unshift({\n\t\ticonClass: removePin ? pinButtonClass : pinnedButtonClass,\n\t\ttooltip: removePin ? localize('pinCommand', \"Pin command\") : localize('pinnedCommand', \"Pinned command\"),\n\t\talwaysVisible: false\n\t});\n\titem.buttons = newButtons;\n}\n\nfunction itemsMatch(itemA: QuickPickItem, itemB: QuickPickItem): boolean {\n\treturn getItemIdentifier(itemA) === getItemIdentifier(itemB);\n}\n\nfunction updatePinnedItems(storageKey: string, changedItem: IQuickPickItem, storageService: IStorageService): IQuickPickItem[] {\n\tconst removePin = changedItem.buttons?.find(b => b.iconClass === pinnedButtonClass);\n\tlet items = getPinnedItems(storageKey, storageService);\n\tif (removePin) {\n\t\titems = items.filter(item => getItemIdentifier(item) !== getItemIdentifier(changedItem));\n\t} else {\n\t\titems.push(changedItem);\n\t}\n\tstorageService.store(storageKey, JSON.stringify(items), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\treturn items;\n}\n\nfunction getPinnedItems(storageKey: string, storageService: IStorageService): IQuickPickItem[] {\n\tconst items = storageService.get(storageKey, StorageScope.WORKSPACE);\n\treturn items ? JSON.parse(items) : [];\n}\n"]}