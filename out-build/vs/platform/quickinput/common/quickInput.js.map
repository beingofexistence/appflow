{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/quickinput/common/quickInput.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IA8DnF,QAAA,GAAG,GAAqB,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;IAuHpE,IAAY,oBAgBX;IAhBD,WAAY,oBAAoB;QAE/B;;WAEG;QACH,+DAAQ,CAAA;QAER;;WAEG;QACH,qEAAO,CAAA;QAEP;;WAEG;QACH,iEAAK,CAAA;IACN,CAAC,EAhBW,oBAAoB,oCAApB,oBAAoB,QAgB/B;IAsED,IAAY,cAKX;IALD,WAAY,cAAc;QACzB,mDAAI,CAAA;QACJ,qDAAK,CAAA;QACL,uDAAM,CAAA;QACN,mDAAI,CAAA;IACL,CAAC,EALW,cAAc,8BAAd,cAAc,QAKzB;IAyMD,MAAa,GAAG;QAEf,YAAoB,CAA2D;YAA3D,MAAC,GAAD,CAAC,CAA0D;QAAI,CAAC;QAEpF,YAAY,CAAC,KAAiC;YAC7C,OAAO,KAAK,CAAC,KAAK,CAAC;QACpB,CAAC;QAED,kBAAkB,CAAC,KAAiC;YACnD,IAAI,IAAI,CAAC,CAAC,EAAQ,eAAe,EAAE;gBAClC,OAAO,SAAS,CAAC;aACjB;YAED,OAAO,KAAK,CAAC,WAAW,CAAC;QAC1B,CAAC;QAED,WAAW,CAAC,KAAiC;YAC5C,IAAI,IAAI,CAAC,CAAC,EAAQ,QAAQ,EAAE;gBAC3B,OAAO,SAAS,CAAC;aACjB;YAED,IAAI,KAAK,CAAC,QAAQ,EAAE,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBAC5C,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC7B;YAED,OAAO,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC;QAC7B,CAAC;KACD;IA3BD,kBA2BC;IAEY,QAAA,GAAG,GAA2B,IAAI,GAAG,EAA0B,CAAC;IAE7E,YAAY;IAEC,QAAA,GAAG,GAAkB,IAAA,mBAAG,EAAiC,mBAAmB,CAAC,CAAC","file":"quickInput.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IQuickAccessController } from 'vs/platform/quickinput/common/quickAccess';\nimport { IMatch } from 'vs/base/common/filters';\nimport { IItemAccessor } from 'vs/base/common/fuzzyScorer';\nimport { ResolvedKeybinding } from 'vs/base/common/keybindings';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport Severity from 'vs/base/common/severity';\nimport { URI } from 'vs/base/common/uri';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\n\nexport interface IQuickPickItemHighlights {\n\tlabel?: IMatch[];\n\tdescription?: IMatch[];\n\tdetail?: IMatch[];\n}\n\nexport type QuickPickItem = IQuickPickSeparator | IQuickPickItem;\n\nexport interface IQuickPickItem {\n\ttype?: 'item';\n\tid?: string;\n\tlabel: string;\n\tariaLabel?: string;\n\tdescription?: string;\n\tdetail?: string;\n\ttooltip?: string | IMarkdownString;\n\t/**\n\t * Allows to show a keybinding next to the item to indicate\n\t * how the item can be triggered outside of the picker using\n\t * keyboard shortcut.\n\t */\n\tkeybinding?: ResolvedKeybinding;\n\ticonClasses?: readonly string[];\n\ticonPath?: { dark: URI; light?: URI };\n\ticonClass?: string;\n\titalic?: boolean;\n\tstrikethrough?: boolean;\n\thighlights?: IQuickPickItemHighlights;\n\tbuttons?: readonly IQuickInputButton[];\n\tpicked?: boolean;\n\talwaysShow?: boolean;\n}\n\nexport interface IQuickPickSeparator {\n\ttype: 'separator';\n\tid?: string;\n\tlabel?: string;\n\tariaLabel?: string;\n\tbuttons?: readonly IQuickInputButton[];\n\ttooltip?: string | IMarkdownString;\n}\n\nexport interface IKeyMods {\n\treadonly ctrlCmd: boolean;\n\treadonly alt: boolean;\n}\n\nexport const NO_KEY_MODS: IKeyMods = { ctrlCmd: false, alt: false };\n\nexport interface IQuickNavigateConfiguration {\n\tkeybindings: readonly ResolvedKeybinding[];\n}\n\nexport interface IPickOptions<T extends IQuickPickItem> {\n\n\t/**\n\t * an optional string to show as the title of the quick input\n\t */\n\ttitle?: string;\n\n\t/**\n\t * an optional string to show as placeholder in the input box to guide the user what she picks on\n\t */\n\tplaceHolder?: string;\n\n\t/**\n\t * an optional flag to include the description when filtering the picks\n\t */\n\tmatchOnDescription?: boolean;\n\n\t/**\n\t * an optional flag to include the detail when filtering the picks\n\t */\n\tmatchOnDetail?: boolean;\n\n\t/**\n\t * an optional flag to filter the picks based on label. Defaults to true.\n\t */\n\tmatchOnLabel?: boolean;\n\n\t/**\n\t * an option flag to control whether focus is always automatically brought to a list item. Defaults to true.\n\t */\n\tautoFocusOnList?: boolean;\n\n\t/**\n\t * an optional flag to not close the picker on focus lost\n\t */\n\tignoreFocusLost?: boolean;\n\n\t/**\n\t * an optional flag to make this picker multi-select\n\t */\n\tcanPickMany?: boolean;\n\n\t/**\n\t * enables quick navigate in the picker to open an element without typing\n\t */\n\tquickNavigate?: IQuickNavigateConfiguration;\n\n\t/**\n\t * Hides the input box from the picker UI. This is typically used\n\t * in combination with quick-navigation where no search UI should\n\t * be presented.\n\t */\n\thideInput?: boolean;\n\n\t/**\n\t * a context key to set when this picker is active\n\t */\n\tcontextKey?: string;\n\n\t/**\n\t * an optional property for the item to focus initially.\n\t */\n\tactiveItem?: Promise<T> | T;\n\n\tonKeyMods?: (keyMods: IKeyMods) => void;\n\tonDidFocus?: (entry: T) => void;\n\tonDidTriggerItemButton?: (context: IQuickPickItemButtonContext<T>) => void;\n\tonDidTriggerSeparatorButton?: (context: IQuickPickSeparatorButtonEvent) => void;\n}\n\nexport interface IInputOptions {\n\n\t/**\n\t * an optional string to show as the title of the quick input\n\t */\n\ttitle?: string;\n\n\t/**\n\t * the value to prefill in the input box\n\t */\n\tvalue?: string;\n\n\t/**\n\t * the selection of value, default to the whole prefilled value\n\t */\n\tvalueSelection?: readonly [number, number];\n\n\t/**\n\t * the text to display underneath the input box\n\t */\n\tprompt?: string;\n\n\t/**\n\t * an optional string to show as placeholder in the input box to guide the user what to type\n\t */\n\tplaceHolder?: string;\n\n\t/**\n\t * Controls if a password input is shown. Password input hides the typed text.\n\t */\n\tpassword?: boolean;\n\n\t/**\n\t * an optional flag to not close the input on focus lost\n\t */\n\tignoreFocusLost?: boolean;\n\n\t/**\n\t * an optional function that is used to validate user input.\n\t */\n\tvalidateInput?: (input: string) => Promise<string | null | undefined | { content: string; severity: Severity }>;\n}\n\nexport enum QuickInputHideReason {\n\n\t/**\n\t * Focus moved away from the quick input.\n\t */\n\tBlur = 1,\n\n\t/**\n\t * An explicit user gesture, e.g. pressing Escape key.\n\t */\n\tGesture,\n\n\t/**\n\t * Anything else.\n\t */\n\tOther\n}\n\nexport interface IQuickInputHideEvent {\n\treason: QuickInputHideReason;\n}\n\nexport interface IQuickInput extends IDisposable {\n\n\treadonly onDidHide: Event<IQuickInputHideEvent>;\n\treadonly onDispose: Event<void>;\n\n\ttitle: string | undefined;\n\n\tdescription: string | undefined;\n\n\t/**\n\t * Should be an HTMLElement.\n\t * @deprecated Use an IQuickWidget instead\n\t */\n\twidget: any | undefined;\n\n\tstep: number | undefined;\n\n\ttotalSteps: number | undefined;\n\n\tbuttons: ReadonlyArray<IQuickInputButton>;\n\n\treadonly onDidTriggerButton: Event<IQuickInputButton>;\n\n\tenabled: boolean;\n\n\tcontextKey: string | undefined;\n\n\tbusy: boolean;\n\n\tignoreFocusOut: boolean;\n\n\tshow(): void;\n\n\thide(): void;\n\n\tdidHide(reason?: QuickInputHideReason): void;\n}\n\nexport interface IQuickWidget extends IQuickInput {\n\t/**\n\t * Should be an HTMLElement (TODO: move this entire file into browser)\n\t */\n\twidget: any | undefined;\n}\n\nexport interface IQuickPickWillAcceptEvent {\n\n\t/**\n\t * Allows to disable the default accept handling\n\t * of the picker. If `veto` is called, the picker\n\t * will not trigger the `onDidAccept` event.\n\t */\n\tveto(): void;\n}\n\nexport interface IQuickPickDidAcceptEvent {\n\n\t/**\n\t * Signals if the picker item is to be accepted\n\t * in the background while keeping the picker open.\n\t */\n\tinBackground: boolean;\n}\n\nexport enum ItemActivation {\n\tNONE,\n\tFIRST,\n\tSECOND,\n\tLAST\n}\n\nexport interface IQuickPick<T extends IQuickPickItem> extends IQuickInput {\n\n\tvalue: string;\n\n\t/**\n\t * A method that allows to massage the value used\n\t * for filtering, e.g, to remove certain parts.\n\t */\n\tfilterValue: (value: string) => string;\n\n\tariaLabel: string | undefined;\n\n\tplaceholder: string | undefined;\n\n\treadonly onDidChangeValue: Event<string>;\n\n\treadonly onWillAccept: Event<IQuickPickWillAcceptEvent>;\n\treadonly onDidAccept: Event<IQuickPickDidAcceptEvent>;\n\n\t/**\n\t * If enabled, will fire the `onDidAccept` event when\n\t * pressing the arrow-right key with the idea of accepting\n\t * the selected item without closing the picker.\n\t */\n\tcanAcceptInBackground: boolean;\n\n\tok: boolean | 'default';\n\n\treadonly onDidCustom: Event<void>;\n\n\tcustomButton: boolean;\n\n\tcustomLabel: string | undefined;\n\n\tcustomHover: string | undefined;\n\n\treadonly onDidTriggerItemButton: Event<IQuickPickItemButtonEvent<T>>;\n\n\treadonly onDidTriggerSeparatorButton: Event<IQuickPickSeparatorButtonEvent>;\n\n\titems: ReadonlyArray<T | IQuickPickSeparator>;\n\n\tscrollTop: number; // used in tests\n\n\tcanSelectMany: boolean;\n\n\tmatchOnDescription: boolean;\n\n\tmatchOnDetail: boolean;\n\n\tmatchOnLabel: boolean;\n\n\t/**\n\t * The mode to filter label with. Fuzzy will use fuzzy searching and\n\t * contiguous will make filter entries that do not contain the exact string\n\t * (including whitespace). This defaults to `'fuzzy'`.\n\t */\n\tmatchOnLabelMode: 'fuzzy' | 'contiguous';\n\n\tsortByLabel: boolean;\n\n\tautoFocusOnList: boolean;\n\n\tkeepScrollPosition: boolean;\n\n\tquickNavigate: IQuickNavigateConfiguration | undefined;\n\n\tactiveItems: ReadonlyArray<T>;\n\n\treadonly onDidChangeActive: Event<T[]>;\n\n\t/**\n\t * Allows to control which entry should be activated by default.\n\t */\n\titemActivation: ItemActivation;\n\n\tselectedItems: ReadonlyArray<T>;\n\n\treadonly onDidChangeSelection: Event<T[]>;\n\n\treadonly keyMods: IKeyMods;\n\n\tvalueSelection: Readonly<[number, number]> | undefined;\n\n\tvalidationMessage: string | undefined;\n\n\tseverity: Severity;\n\n\tinputHasFocus(): boolean;\n\n\tfocusOnInput(): void;\n\n\t/**\n\t * Hides the input box from the picker UI. This is typically used\n\t * in combination with quick-navigation where no search UI should\n\t * be presented.\n\t */\n\thideInput: boolean;\n\n\t/**\n\t * Allows to control if the count for the items should be shown\n\t */\n\thideCountBadge: boolean;\n\n\thideCheckAll: boolean;\n\n\t/**\n\t * A set of `Toggle` objects to add to the input box.\n\t */\n\ttoggles: IQuickInputToggle[] | undefined;\n}\n\nexport interface IQuickInputToggle {\n\tonChange: Event<boolean /* via keyboard */>;\n}\n\nexport interface IInputBox extends IQuickInput {\n\n\t/**\n\t * Value shown in the input box.\n\t */\n\tvalue: string;\n\n\t/**\n\t * Provide start and end values to be selected in the input box.\n\t */\n\tvalueSelection: Readonly<[number, number]> | undefined;\n\n\t/**\n\t * Value shown as example for input.\n\t */\n\tplaceholder: string | undefined;\n\n\t/**\n\t * Determines if the input value should be hidden while typing.\n\t */\n\tpassword: boolean;\n\n\t/**\n\t * Event called when the input value changes.\n\t */\n\treadonly onDidChangeValue: Event<string>;\n\n\t/**\n\t * Event called when the user submits the input.\n\t */\n\treadonly onDidAccept: Event<void>;\n\n\t/**\n\t * Text show below the input box.\n\t */\n\tprompt: string | undefined;\n\n\t/**\n\t * An optional validation message indicating a problem with the current input value.\n\t * Returning undefined clears the validation message.\n\t */\n\tvalidationMessage: string | undefined;\n\n\t/**\n\t * Severity of the input validation message.\n\t */\n\tseverity: Severity;\n}\n\nexport interface IQuickInputButton {\n\t/** iconPath or iconClass required */\n\ticonPath?: { dark: URI; light?: URI };\n\t/** iconPath or iconClass required */\n\ticonClass?: string;\n\ttooltip?: string;\n\t/**\n\t * Whether to always show the button. By default buttons\n\t * are only visible when hovering over them with the mouse\n\t */\n\talwaysVisible?: boolean;\n}\n\nexport interface IQuickPickItemButtonEvent<T extends IQuickPickItem> {\n\tbutton: IQuickInputButton;\n\titem: T;\n}\n\nexport interface IQuickPickSeparatorButtonEvent {\n\tbutton: IQuickInputButton;\n\tseparator: IQuickPickSeparator;\n}\n\nexport interface IQuickPickItemButtonContext<T extends IQuickPickItem> extends IQuickPickItemButtonEvent<T> {\n\tremoveItem(): void;\n}\n\nexport type QuickPickInput<T = IQuickPickItem> = T | IQuickPickSeparator;\n\n\n//#region Fuzzy Scorer Support\n\nexport type IQuickPickItemWithResource = IQuickPickItem & { resource?: URI };\n\nexport class QuickPickItemScorerAccessor implements IItemAccessor<IQuickPickItemWithResource> {\n\n\tconstructor(private options?: { skipDescription?: boolean; skipPath?: boolean }) { }\n\n\tgetItemLabel(entry: IQuickPickItemWithResource): string {\n\t\treturn entry.label;\n\t}\n\n\tgetItemDescription(entry: IQuickPickItemWithResource): string | undefined {\n\t\tif (this.options?.skipDescription) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn entry.description;\n\t}\n\n\tgetItemPath(entry: IQuickPickItemWithResource): string | undefined {\n\t\tif (this.options?.skipPath) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (entry.resource?.scheme === Schemas.file) {\n\t\t\treturn entry.resource.fsPath;\n\t\t}\n\n\t\treturn entry.resource?.path;\n\t}\n}\n\nexport const quickPickItemScorerAccessor = new QuickPickItemScorerAccessor();\n\n//#endregion\n\nexport const IQuickInputService = createDecorator<IQuickInputService>('quickInputService');\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport interface IQuickInputService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Provides access to the back button in quick input.\n\t */\n\treadonly backButton: IQuickInputButton;\n\n\t/**\n\t * Provides access to the quick access providers.\n\t */\n\treadonly quickAccess: IQuickAccessController;\n\n\t/**\n\t * Allows to register on the event that quick input is showing.\n\t */\n\treadonly onShow: Event<void>;\n\n\t/**\n\t * Allows to register on the event that quick input is hiding.\n\t */\n\treadonly onHide: Event<void>;\n\n\t/**\n\t * Opens the quick input box for selecting items and returns a promise\n\t * with the user selected item(s) if any.\n\t */\n\tpick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: IPickOptions<T> & { canPickMany: true }, token?: CancellationToken): Promise<T[] | undefined>;\n\tpick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: IPickOptions<T> & { canPickMany: false }, token?: CancellationToken): Promise<T | undefined>;\n\tpick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: Omit<IPickOptions<T>, 'canPickMany'>, token?: CancellationToken): Promise<T | undefined>;\n\n\t/**\n\t * Opens the quick input box for text input and returns a promise with the user typed value if any.\n\t */\n\tinput(options?: IInputOptions, token?: CancellationToken): Promise<string | undefined>;\n\n\t/**\n\t * Provides raw access to the quick pick controller.\n\t */\n\tcreateQuickPick<T extends IQuickPickItem>(): IQuickPick<T>;\n\n\t/**\n\t * Provides raw access to the input box controller.\n\t */\n\tcreateInputBox(): IInputBox;\n\n\t/**\n\t * Provides raw access to the quick widget controller.\n\t */\n\tcreateQuickWidget(): IQuickWidget;\n\n\t/**\n\t * Moves focus into quick input.\n\t */\n\tfocus(): void;\n\n\t/**\n\t * Toggle the checked state of the selected item.\n\t */\n\ttoggle(): void;\n\n\t/**\n\t * Navigate inside the opened quick input list.\n\t */\n\tnavigate(next: boolean, quickNavigate?: IQuickNavigateConfiguration): void;\n\n\t/**\n\t * Navigate back in a multi-step quick input.\n\t */\n\tback(): Promise<void>;\n\n\t/**\n\t * Accept the selected item.\n\t *\n\t * @param keyMods allows to override the state of key\n\t * modifiers that should be present when invoking.\n\t */\n\taccept(keyMods?: IKeyMods): Promise<void>;\n\n\t/**\n\t * Cancels quick input and closes it.\n\t */\n\tcancel(): Promise<void>;\n}\n"]}