{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/protocol/electron-main/protocolMainService.ts"],"names":[],"mappings":"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","file":"protocolMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { session } from 'electron';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { COI, FileAccess, Schemas } from 'vs/base/common/network';\nimport { basename, extname, normalize } from 'vs/base/common/path';\nimport { isLinux } from 'vs/base/common/platform';\nimport { TernarySearchTree } from 'vs/base/common/ternarySearchTree';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { validatedIpcMain } from 'vs/base/parts/ipc/electron-main/ipcMain';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IIPCObjectUrl, IProtocolMainService } from 'vs/platform/protocol/electron-main/protocol';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\n\ntype ProtocolCallback = { (result: string | Electron.FilePathWithHeaders | { error: number }): void };\n\nexport class ProtocolMainService extends Disposable implements IProtocolMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly validRoots = TernarySearchTree.forPaths<boolean>(!isLinux);\n\tprivate readonly validExtensions = new Set(['.svg', '.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp']); // https://github.com/microsoft/vscode/issues/119384\n\n\tconstructor(\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\t// Define an initial set of roots we allow loading from\n\t\t// - appRoot\t: all files installed as part of the app\n\t\t// - extensions : all files shipped from extensions\n\t\t// - storage    : all files in global and workspace storage (https://github.com/microsoft/vscode/issues/116735)\n\t\tthis.addValidFileRoot(environmentService.appRoot);\n\t\tthis.addValidFileRoot(environmentService.extensionsPath);\n\t\tthis.addValidFileRoot(userDataProfilesService.defaultProfile.globalStorageHome.with({ scheme: Schemas.file }).fsPath);\n\t\tthis.addValidFileRoot(environmentService.workspaceStorageHome.with({ scheme: Schemas.file }).fsPath);\n\n\t\t// Handle protocols\n\t\tthis.handleProtocols();\n\t}\n\n\tprivate handleProtocols(): void {\n\t\tconst { defaultSession } = session;\n\n\t\t// Register vscode-file:// handler\n\t\tdefaultSession.protocol.registerFileProtocol(Schemas.vscodeFileResource, (request, callback) => this.handleResourceRequest(request, callback));\n\n\t\t// Block any file:// access\n\t\tdefaultSession.protocol.interceptFileProtocol(Schemas.file, (request, callback) => this.handleFileRequest(request, callback));\n\n\t\t// Cleanup\n\t\tthis._register(toDisposable(() => {\n\t\t\tdefaultSession.protocol.unregisterProtocol(Schemas.vscodeFileResource);\n\t\t\tdefaultSession.protocol.uninterceptProtocol(Schemas.file);\n\t\t}));\n\t}\n\n\taddValidFileRoot(root: string): IDisposable {\n\n\t\t// Pass to `normalize` because we later also do the\n\t\t// same for all paths to check against.\n\t\tconst normalizedRoot = normalize(root);\n\n\t\tif (!this.validRoots.get(normalizedRoot)) {\n\t\t\tthis.validRoots.set(normalizedRoot, true);\n\n\t\t\treturn toDisposable(() => this.validRoots.delete(normalizedRoot));\n\t\t}\n\n\t\treturn Disposable.None;\n\t}\n\n\t//#region file://\n\n\tprivate handleFileRequest(request: Electron.ProtocolRequest, callback: ProtocolCallback) {\n\t\tconst uri = URI.parse(request.url);\n\n\t\tthis.logService.error(`Refused to load resource ${uri.fsPath} from ${Schemas.file}: protocol (original URL: ${request.url})`);\n\n\t\treturn callback({ error: -3 /* ABORTED */ });\n\t}\n\n\t//#endregion\n\n\t//#region vscode-file://\n\n\tprivate handleResourceRequest(request: Electron.ProtocolRequest, callback: ProtocolCallback): void {\n\t\tconst path = this.requestToNormalizedFilePath(request);\n\n\t\tlet headers: Record<string, string> | undefined;\n\t\tif (this.environmentService.crossOriginIsolated) {\n\t\t\tif (basename(path) === 'workbench.html' || basename(path) === 'workbench-dev.html') {\n\t\t\t\theaders = COI.CoopAndCoep;\n\t\t\t} else {\n\t\t\t\theaders = COI.getHeadersFromQuery(request.url);\n\t\t\t}\n\t\t}\n\n\t\t// first check by validRoots\n\t\tif (this.validRoots.findSubstr(path)) {\n\t\t\treturn callback({ path, headers });\n\t\t}\n\n\t\t// then check by validExtensions\n\t\tif (this.validExtensions.has(extname(path).toLowerCase())) {\n\t\t\treturn callback({ path });\n\t\t}\n\n\t\t// finally block to load the resource\n\t\tthis.logService.error(`${Schemas.vscodeFileResource}: Refused to load resource ${path} from ${Schemas.vscodeFileResource}: protocol (original URL: ${request.url})`);\n\n\t\treturn callback({ error: -3 /* ABORTED */ });\n\t}\n\n\tprivate requestToNormalizedFilePath(request: Electron.ProtocolRequest): string {\n\n\t\t// 1.) Use `URI.parse()` util from us to convert the raw\n\t\t//     URL into our URI.\n\t\tconst requestUri = URI.parse(request.url);\n\n\t\t// 2.) Use `FileAccess.asFileUri` to convert back from a\n\t\t//     `vscode-file:` URI to a `file:` URI.\n\t\tconst unnormalizedFileUri = FileAccess.uriToFileUri(requestUri);\n\n\t\t// 3.) Strip anything from the URI that could result in\n\t\t//     relative paths (such as \"..\") by using `normalize`\n\t\treturn normalize(unnormalizedFileUri.fsPath);\n\t}\n\n\t//#endregion\n\n\t//#region IPC Object URLs\n\n\tcreateIPCObjectUrl<T>(): IIPCObjectUrl<T> {\n\t\tlet obj: T | undefined = undefined;\n\n\t\t// Create unique URI\n\t\tconst resource = URI.from({\n\t\t\tscheme: 'vscode', // used for all our IPC communication (vscode:<channel>)\n\t\t\tpath: generateUuid()\n\t\t});\n\n\t\t// Install IPC handler\n\t\tconst channel = resource.toString();\n\t\tconst handler = async (): Promise<T | undefined> => obj;\n\t\tvalidatedIpcMain.handle(channel, handler);\n\n\t\tthis.logService.trace(`IPC Object URL: Registered new channel ${channel}.`);\n\n\t\treturn {\n\t\t\tresource,\n\t\t\tupdate: updatedObj => obj = updatedObj,\n\t\t\tdispose: () => {\n\t\t\t\tthis.logService.trace(`IPC Object URL: Removed channel ${channel}.`);\n\n\t\t\t\tvalidatedIpcMain.removeHandler(channel);\n\t\t\t}\n\t\t};\n\t}\n\n\t//#endregion\n}\n"]}