{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/secrets/test/common/secrets.test.ts"],"names":[],"mappings":"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","file":"secrets.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { IEncryptionService, KnownStorageProvider } from 'vs/platform/encryption/common/encryptionService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { BaseSecretStorageService } from 'vs/platform/secrets/common/secrets';\nimport { InMemoryStorageService } from 'vs/platform/storage/common/storage';\n\nclass TestEncryptionService implements IEncryptionService {\n\t_serviceBrand: undefined;\n\tprivate encryptedPrefix = 'encrypted+'; // prefix to simulate encryption\n\tsetUsePlainTextEncryption(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\tgetKeyStorageProvider(): Promise<KnownStorageProvider> {\n\t\treturn Promise.resolve(KnownStorageProvider.basicText);\n\t}\n\tencrypt(value: string): Promise<string> {\n\t\treturn Promise.resolve(this.encryptedPrefix + value);\n\t}\n\tdecrypt(value: string): Promise<string> {\n\t\treturn Promise.resolve(value.substring(this.encryptedPrefix.length));\n\t}\n\tisEncryptionAvailable(): Promise<boolean> {\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nclass TestNoEncryptionService implements IEncryptionService {\n\t_serviceBrand: undefined;\n\tsetUsePlainTextEncryption(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetKeyStorageProvider(): Promise<KnownStorageProvider> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tencrypt(value: string): Promise<string> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tdecrypt(value: string): Promise<string> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tisEncryptionAvailable(): Promise<boolean> {\n\t\treturn Promise.resolve(false);\n\t}\n}\n\nsuite('secrets', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('BaseSecretStorageService useInMemoryStorage=true', () => {\n\t\tlet service: BaseSecretStorageService;\n\t\tlet spyEncryptionService: sinon.SinonSpiedInstance<TestEncryptionService>;\n\t\tlet sandbox: sinon.SinonSandbox;\n\n\t\tsetup(() => {\n\t\t\tsandbox = sinon.createSandbox();\n\t\t\tspyEncryptionService = sandbox.spy(new TestEncryptionService());\n\t\t\tservice = store.add(new BaseSecretStorageService(\n\t\t\t\ttrue,\n\t\t\t\tstore.add(new InMemoryStorageService()),\n\t\t\t\tspyEncryptionService,\n\t\t\t\tstore.add(new NullLogService())\n\t\t\t));\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tsandbox.restore();\n\t\t});\n\n\t\ttest('type', async () => {\n\t\t\tassert.strictEqual(service.type, 'unknown');\n\t\t\t// trigger lazy initialization\n\t\t\tawait service.set('my-secret', 'my-secret-value');\n\n\t\t\tassert.strictEqual(service.type, 'in-memory');\n\t\t});\n\n\t\ttest('set and get', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tawait service.set(key, value);\n\t\t\tconst result = await service.get(key);\n\t\t\tassert.strictEqual(result, value);\n\n\t\t\t// Additionally ensure the encryptionservice was not used\n\t\t\tassert.strictEqual(spyEncryptionService.encrypt.callCount, 0);\n\t\t\tassert.strictEqual(spyEncryptionService.decrypt.callCount, 0);\n\t\t});\n\n\t\ttest('delete', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tawait service.set(key, value);\n\t\t\tawait service.delete(key);\n\t\t\tconst result = await service.get(key);\n\t\t\tassert.strictEqual(result, undefined);\n\t\t});\n\n\t\ttest('onDidChangeSecret', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tlet eventFired = false;\n\t\t\tstore.add(service.onDidChangeSecret((changedKey) => {\n\t\t\t\tassert.strictEqual(changedKey, key);\n\t\t\t\teventFired = true;\n\t\t\t}));\n\t\t\tawait service.set(key, value);\n\t\t\tassert.strictEqual(eventFired, true);\n\t\t});\n\t});\n\n\tsuite('BaseSecretStorageService useInMemoryStorage=false', () => {\n\t\tlet service: BaseSecretStorageService;\n\t\tlet spyEncryptionService: sinon.SinonSpiedInstance<TestEncryptionService>;\n\t\tlet sandbox: sinon.SinonSandbox;\n\n\t\tsetup(() => {\n\t\t\tsandbox = sinon.createSandbox();\n\t\t\tspyEncryptionService = sandbox.spy(new TestEncryptionService());\n\t\t\tservice = store.add(new BaseSecretStorageService(\n\t\t\t\tfalse,\n\t\t\t\tstore.add(new InMemoryStorageService()),\n\t\t\t\tspyEncryptionService,\n\t\t\t\tstore.add(new NullLogService()))\n\t\t\t);\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tsandbox.restore();\n\t\t});\n\n\t\ttest('type', async () => {\n\t\t\tassert.strictEqual(service.type, 'unknown');\n\t\t\t// trigger lazy initialization\n\t\t\tawait service.set('my-secret', 'my-secret-value');\n\n\t\t\tassert.strictEqual(service.type, 'persisted');\n\t\t});\n\n\t\ttest('set and get', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tawait service.set(key, value);\n\t\t\tconst result = await service.get(key);\n\t\t\tassert.strictEqual(result, value);\n\n\t\t\t// Additionally ensure the encryptionservice was not used\n\t\t\tassert.strictEqual(spyEncryptionService.encrypt.callCount, 1);\n\t\t\tassert.strictEqual(spyEncryptionService.decrypt.callCount, 1);\n\t\t});\n\n\t\ttest('delete', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tawait service.set(key, value);\n\t\t\tawait service.delete(key);\n\t\t\tconst result = await service.get(key);\n\t\t\tassert.strictEqual(result, undefined);\n\t\t});\n\n\t\ttest('onDidChangeSecret', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tlet eventFired = false;\n\t\t\tstore.add(service.onDidChangeSecret((changedKey) => {\n\t\t\t\tassert.strictEqual(changedKey, key);\n\t\t\t\teventFired = true;\n\t\t\t}));\n\t\t\tawait service.set(key, value);\n\t\t\tassert.strictEqual(eventFired, true);\n\t\t});\n\t});\n\n\tsuite('BaseSecretStorageService useInMemoryStorage=false, encryption not available', () => {\n\t\tlet service: BaseSecretStorageService;\n\t\tlet spyNoEncryptionService: sinon.SinonSpiedInstance<TestEncryptionService>;\n\t\tlet sandbox: sinon.SinonSandbox;\n\n\t\tsetup(() => {\n\t\t\tsandbox = sinon.createSandbox();\n\t\t\tspyNoEncryptionService = sandbox.spy(new TestNoEncryptionService());\n\t\t\tservice = store.add(new BaseSecretStorageService(\n\t\t\t\tfalse,\n\t\t\t\tstore.add(new InMemoryStorageService()),\n\t\t\t\tspyNoEncryptionService,\n\t\t\t\tstore.add(new NullLogService()))\n\t\t\t);\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tsandbox.restore();\n\t\t});\n\n\t\ttest('type', async () => {\n\t\t\tassert.strictEqual(service.type, 'unknown');\n\t\t\t// trigger lazy initialization\n\t\t\tawait service.set('my-secret', 'my-secret-value');\n\n\t\t\tassert.strictEqual(service.type, 'in-memory');\n\t\t});\n\n\t\ttest('set and get', async () => {\n\t\t\tconst key = 'my-secret';\n\t\t\tconst value = 'my-secret-value';\n\t\t\tawait service.set(key, value);\n\t\t\tconst result = await service.get(key);\n\t\t\tassert.strictEqual(result, value);\n\n\t\t\t// Additionally ensure the encryptionservice was not used\n\t\t\tassert.strictEqual(spyNoEncryptionService.encrypt.callCount, 0);\n\t\t\tassert.strictEqual(spyNoEncryptionService.decrypt.callCount, 0);\n\t\t});\n\t});\n});\n"]}