{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/registry/test/common/platform.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAMhG,KAAK,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAEjC,IAAI,CAAC,gBAAgB,EAAE;YACtB,MAAM,CAAC,EAAE,CAAC,IAAA,WAAG,EAAQ,cAAG,CAAM,GAAG,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,EAAE,CAAC,IAAA,WAAG,EAAQ,cAAG,CAAM,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,EAAE,CAAC,IAAA,WAAG,EAAQ,cAAG,CAAM,KAAK,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE;YAExB,cAAG,CAAM,GAAG,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;YAEnC,MAAM,CAAC,EAAE,CAAC,cAAG,CAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,EAAE,CAAC,cAAG,CAAM,EAAE,CAAM,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;YACvC,MAAM,CAAC,WAAW,CAAC,cAAG,CAAM,EAAE,CAAM,KAAK,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sBAAsB,EAAE;YAE5B,MAAM,GAAG,GAAG,EAAE,CAAC;YAEf,cAAG,CAAM,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;YAE9B,MAAM,CAAC,EAAE,CAAC,cAAG,CAAM,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,EAAE,CAAC,CAAC,cAAG,CAAM,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;YAE3C,MAAM,CAAC,EAAE,CAAC,cAAG,CAAM,EAAE,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC;YAC3C,MAAM,CAAC,EAAE,CAAC,cAAG,CAAM,EAAE,CAAC,cAAc,CAAC,KAAK,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE;YAEhD,cAAG,CAAM,GAAG,CAAC,SAAS,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;YAEvC,IAAI;gBACH,cAAG,CAAM,GAAG,CAAC,SAAS,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;gBACxC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;aACjB;YAAC,OAAO,CAAC,EAAE;gBACX,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;aAChB;QACF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"platform.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { isFunction } from 'vs/base/common/types';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nsuite('Platform / Registry', () => {\n\n\ttest('registry - api', function () {\n\t\tassert.ok(isFunction(Registry.add));\n\t\tassert.ok(isFunction(Registry.as));\n\t\tassert.ok(isFunction(Registry.knows));\n\t});\n\n\ttest('registry - mixin', function () {\n\n\t\tRegistry.add('foo', { bar: true });\n\n\t\tassert.ok(Registry.knows('foo'));\n\t\tassert.ok(Registry.as<any>('foo').bar);\n\t\tassert.strictEqual(Registry.as<any>('foo').bar, true);\n\t});\n\n\ttest('registry - knows, as', function () {\n\n\t\tconst ext = {};\n\n\t\tRegistry.add('knows,as', ext);\n\n\t\tassert.ok(Registry.knows('knows,as'));\n\t\tassert.ok(!Registry.knows('knows,as1234'));\n\n\t\tassert.ok(Registry.as('knows,as') === ext);\n\t\tassert.ok(Registry.as('knows,as1234') === null);\n\t});\n\n\ttest('registry - mixin, fails on duplicate ids', function () {\n\n\t\tRegistry.add('foo-dup', { bar: true });\n\n\t\ttry {\n\t\t\tRegistry.add('foo-dup', { bar: false });\n\t\t\tassert.ok(false);\n\t\t} catch (e) {\n\t\t\tassert.ok(true);\n\t\t}\n\t});\n});\n"]}