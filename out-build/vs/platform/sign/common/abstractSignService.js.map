{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/sign/common/abstractSignService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG,MAAsB,IAAI;QAA1B;YAIkB,MAAC,GAAY,IAAI,GAAG,EAA0B,CAAC;QAkDjE,CAAC;iBAnDe,MAAC,GAAS,CAAT,AAAU,CAAC;QAMpB,KAAK,CAAC,gBAAgB,CAAC,KAAa;YAC1C,IAAI;gBACH,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,CAAC,EAAa,CAAC;gBAC5C,IAAI,SAAS,EAAE;oBACd,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAgB,CAAC,EAAQ,CAAC,CAAC;oBACjD,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;oBACnC,OAAO;wBACN,EAAE,EAAE,EAAE;wBACN,IAAI,EAAE,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC;qBACvC,CAAC;iBACF;aACD;YAAC,OAAO,CAAC,EAAE;gBACX,yBAAyB;aACzB;YACD,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;QAChC,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,OAAiB,EAAE,KAAa;YAC9C,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE;gBAChB,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAClD,IAAI,CAAC,SAAS,EAAE;gBACf,OAAO,KAAK,CAAC;aACb;YACD,IAAI,CAAC,CAAC,CAAU,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACnC,IAAI;gBACH,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;aAC5C;YAAC,OAAO,CAAC,EAAE;gBACX,yBAAyB;gBACzB,OAAO,KAAK,CAAC;aACb;oBAAS;gBACT,SAAS,CAAC,OAAO,EAAE,EAAE,CAAC;aACtB;QACF,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,KAAa;YACvB,IAAI;gBACH,OAAO,MAAM,IAAI,CAAC,CAAC,CAAS,KAAK,CAAC,CAAC;aACnC;YAAC,OAAO,CAAC,EAAE;gBACX,yBAAyB;aACzB;YACD,OAAO,KAAK,CAAC;QACd,CAAC;;IArDF,oBAsDC","file":"abstractSignService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMessage, ISignService } from 'vs/platform/sign/common/sign';\n\nexport interface IVsdaSigner {\n\tsign(arg: string): string;\n}\n\nexport interface IVsdaValidator {\n\tcreateNewMessage(arg: string): string;\n\tvalidate(arg: string): 'ok' | 'error';\n\tdispose?(): void;\n}\n\nexport abstract class AbstractSignService implements ISignService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static _nextId = 1;\n\tprivate readonly validators = new Map<string, IVsdaValidator>();\n\n\tprotected abstract getValidator(): Promise<IVsdaValidator>;\n\tprotected abstract signValue(arg: string): Promise<string>;\n\n\tpublic async createNewMessage(value: string): Promise<IMessage> {\n\t\ttry {\n\t\t\tconst validator = await this.getValidator();\n\t\t\tif (validator) {\n\t\t\t\tconst id = String(AbstractSignService._nextId++);\n\t\t\t\tthis.validators.set(id, validator);\n\t\t\t\treturn {\n\t\t\t\t\tid: id,\n\t\t\t\t\tdata: validator.createNewMessage(value)\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// ignore errors silently\n\t\t}\n\t\treturn { id: '', data: value };\n\t}\n\n\tasync validate(message: IMessage, value: string): Promise<boolean> {\n\t\tif (!message.id) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst validator = this.validators.get(message.id);\n\t\tif (!validator) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.validators.delete(message.id);\n\t\ttry {\n\t\t\treturn (validator.validate(value) === 'ok');\n\t\t} catch (e) {\n\t\t\t// ignore errors silently\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tvalidator.dispose?.();\n\t\t}\n\t}\n\n\tasync sign(value: string): Promise<string> {\n\t\ttry {\n\t\t\treturn await this.signValue(value);\n\t\t} catch (e) {\n\t\t\t// ignore errors silently\n\t\t}\n\t\treturn value;\n\t}\n}\n"]}