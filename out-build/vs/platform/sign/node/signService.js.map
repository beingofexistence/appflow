{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/sign/node/signService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAmBhG,MAAa,IAAY,SAAQ,0BAAI;QACjB,CAAC;YACnB,OAAO,IAAI,CAAC,CAAC,EAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QACvD,CAAC;QACkB,CAAC,CAAS,GAAW;YACvC,OAAO,IAAI,CAAC,CAAC,EAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9D,CAAC;QAEO,CAAC;YACR,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;QAC7E,CAAC;KACD;IAXD,oBAWC","file":"signService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AbstractSignService, IVsdaValidator } from 'vs/platform/sign/common/abstractSignService';\nimport { ISignService } from 'vs/platform/sign/common/sign';\n\ndeclare module vsda {\n\t// the signer is a native module that for historical reasons uses a lower case class name\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\texport class signer {\n\t\tsign(arg: string): string;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\texport class validator {\n\t\tcreateNewMessage(arg: string): string;\n\t\tvalidate(arg: string): 'ok' | 'error';\n\t}\n}\n\nexport class SignService extends AbstractSignService implements ISignService {\n\tprotected override getValidator(): Promise<IVsdaValidator> {\n\t\treturn this.vsda().then(vsda => new vsda.validator());\n\t}\n\tprotected override signValue(arg: string): Promise<string> {\n\t\treturn this.vsda().then(vsda => new vsda.signer().sign(arg));\n\t}\n\n\tprivate vsda(): Promise<typeof vsda> {\n\t\treturn new Promise((resolve, reject) => require(['vsda'], resolve, reject));\n\t}\n}\n"]}