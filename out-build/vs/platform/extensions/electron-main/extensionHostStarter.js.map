{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensions/electron-main/extensionHostStarter.ts"],"names":[],"mappings":"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","file":"extensionHostStarter.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { canceled } from 'vs/base/common/errors';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IExtensionHostProcessOptions, IExtensionHostStarter } from 'vs/platform/extensions/common/extensionHostStarter';\nimport { Event } from 'vs/base/common/event';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { Promises } from 'vs/base/common/async';\nimport { WindowUtilityProcess } from 'vs/platform/utilityProcess/electron-main/utilityProcess';\nimport { IWindowsMainService } from 'vs/platform/windows/electron-main/windows';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\nexport class ExtensionHostStarter implements IDisposable, IExtensionHostStarter {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate static _lastId: number = 0;\n\n\tprivate readonly _extHosts = new Map<string, WindowUtilityProcess>();\n\tprivate _shutdown = false;\n\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILifecycleMainService private readonly _lifecycleMainService: ILifecycleMainService,\n\t\t@IWindowsMainService private readonly _windowsMainService: IWindowsMainService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t) {\n\n\t\t// On shutdown: gracefully await extension host shutdowns\n\t\tthis._lifecycleMainService.onWillShutdown(e => {\n\t\t\tthis._shutdown = true;\n\t\t\te.join('extHostStarter', this._waitForAllExit(6000));\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\t// Intentionally not killing the extension host processes\n\t}\n\n\tprivate _getExtHost(id: string): WindowUtilityProcess {\n\t\tconst extHostProcess = this._extHosts.get(id);\n\t\tif (!extHostProcess) {\n\t\t\tthrow new Error(`Unknown extension host!`);\n\t\t}\n\t\treturn extHostProcess;\n\t}\n\n\tonDynamicStdout(id: string): Event<string> {\n\t\treturn this._getExtHost(id).onStdout;\n\t}\n\n\tonDynamicStderr(id: string): Event<string> {\n\t\treturn this._getExtHost(id).onStderr;\n\t}\n\n\tonDynamicMessage(id: string): Event<any> {\n\t\treturn this._getExtHost(id).onMessage;\n\t}\n\n\tonDynamicExit(id: string): Event<{ code: number; signal: string }> {\n\t\treturn this._getExtHost(id).onExit;\n\t}\n\n\tasync createExtensionHost(): Promise<{ id: string }> {\n\t\tif (this._shutdown) {\n\t\t\tthrow canceled();\n\t\t}\n\t\tconst id = String(++ExtensionHostStarter._lastId);\n\t\tconst extHost = new WindowUtilityProcess(this._logService, this._windowsMainService, this._telemetryService, this._lifecycleMainService);\n\t\tthis._extHosts.set(id, extHost);\n\t\textHost.onExit(({ pid, code, signal }) => {\n\t\t\tthis._logService.info(`Extension host with pid ${pid} exited with code: ${code}, signal: ${signal}.`);\n\t\t\tsetTimeout(() => {\n\t\t\t\textHost.dispose();\n\t\t\t\tthis._extHosts.delete(id);\n\t\t\t});\n\t\t});\n\t\treturn { id };\n\t}\n\n\tasync start(id: string, opts: IExtensionHostProcessOptions): Promise<void> {\n\t\tif (this._shutdown) {\n\t\t\tthrow canceled();\n\t\t}\n\t\tthis._getExtHost(id).start({\n\t\t\t...opts,\n\t\t\ttype: 'extensionHost',\n\t\t\tentryPoint: 'vs/workbench/api/node/extensionHostProcess',\n\t\t\targs: ['--skipWorkspaceStorageLock'],\n\t\t\texecArgv: opts.execArgv,\n\t\t\tallowLoadingUnsignedLibraries: true,\n\t\t\tforceAllocationsToV8Sandbox: true,\n\t\t\tcorrelationId: id\n\t\t});\n\t}\n\n\tasync enableInspectPort(id: string): Promise<boolean> {\n\t\tif (this._shutdown) {\n\t\t\tthrow canceled();\n\t\t}\n\t\tconst extHostProcess = this._extHosts.get(id);\n\t\tif (!extHostProcess) {\n\t\t\treturn false;\n\t\t}\n\t\treturn extHostProcess.enableInspectPort();\n\t}\n\n\tasync kill(id: string): Promise<void> {\n\t\tif (this._shutdown) {\n\t\t\tthrow canceled();\n\t\t}\n\t\tconst extHostProcess = this._extHosts.get(id);\n\t\tif (!extHostProcess) {\n\t\t\t// already gone!\n\t\t\treturn;\n\t\t}\n\t\textHostProcess.kill();\n\t}\n\n\tasync _killAllNow(): Promise<void> {\n\t\tfor (const [, extHost] of this._extHosts) {\n\t\t\textHost.kill();\n\t\t}\n\t}\n\n\tasync _waitForAllExit(maxWaitTimeMs: number): Promise<void> {\n\t\tconst exitPromises: Promise<void>[] = [];\n\t\tfor (const [, extHost] of this._extHosts) {\n\t\t\texitPromises.push(extHost.waitForExit(maxWaitTimeMs));\n\t\t}\n\t\treturn Promises.settled(exitPromises).then(() => { });\n\t}\n}\n"]}