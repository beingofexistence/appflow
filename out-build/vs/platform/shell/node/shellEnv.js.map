{"version":3,"sources":["vs/platform/shell/node/shellEnv.ts"],"names":[],"mappings":"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","file":"shellEnv.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { spawn } from 'child_process';\nimport { basename } from 'vs/base/common/path';\nimport { localize } from 'vs/nls';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { CancellationError, isCancellationError } from 'vs/base/common/errors';\nimport { IProcessEnvironment, isWindows, OS } from 'vs/base/common/platform';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { getSystemShell } from 'vs/base/node/shell';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { isLaunchedFromCli } from 'vs/platform/environment/node/argvHelper';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Promises } from 'vs/base/common/async';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { clamp } from 'vs/base/common/numbers';\n\nlet unixShellEnvPromise: Promise<typeof process.env> | undefined = undefined;\n\n/**\n * Resolves the shell environment by spawning a shell. This call will cache\n * the shell spawning so that subsequent invocations use that cached result.\n *\n * Will throw an error if:\n * - we hit a timeout of `MAX_SHELL_RESOLVE_TIME`\n * - any other error from spawning a shell to figure out the environment\n */\nexport async function getResolvedShellEnv(configurationService: IConfigurationService, logService: ILogService, args: NativeParsedArgs, env: IProcessEnvironment): Promise<typeof process.env> {\n\n\t// Skip if --force-disable-user-env\n\tif (args['force-disable-user-env']) {\n\t\tlogService.trace('resolveShellEnv(): skipped (--force-disable-user-env)');\n\n\t\treturn {};\n\t}\n\n\t// Skip on windows\n\telse if (isWindows) {\n\t\tlogService.trace('resolveShellEnv(): skipped (Windows)');\n\n\t\treturn {};\n\t}\n\n\t// Skip if running from CLI already\n\telse if (isLaunchedFromCli(env) && !args['force-user-env']) {\n\t\tlogService.trace('resolveShellEnv(): skipped (VSCODE_CLI is set)');\n\n\t\treturn {};\n\t}\n\n\t// Otherwise resolve (macOS, Linux)\n\telse {\n\t\tif (isLaunchedFromCli(env)) {\n\t\t\tlogService.trace('resolveShellEnv(): running (--force-user-env)');\n\t\t} else {\n\t\t\tlogService.trace('resolveShellEnv(): running (macOS/Linux)');\n\t\t}\n\n\t\t// Call this only once and cache the promise for\n\t\t// subsequent calls since this operation can be\n\t\t// expensive (spawns a process).\n\t\tif (!unixShellEnvPromise) {\n\t\t\tunixShellEnvPromise = Promises.withAsyncBody<NodeJS.ProcessEnv>(async (resolve, reject) => {\n\t\t\t\tconst cts = new CancellationTokenSource();\n\n\t\t\t\tlet timeoutValue = 10000; // default to 10 seconds\n\t\t\t\tconst configuredTimeoutValue = configurationService.getValue<unknown>('application.shellEnvironmentResolutionTimeout');\n\t\t\t\tif (typeof configuredTimeoutValue === 'number') {\n\t\t\t\t\ttimeoutValue = clamp(configuredTimeoutValue, 1, 120) * 1000 /* convert from seconds */;\n\t\t\t\t}\n\n\t\t\t\t// Give up resolving shell env after some time\n\t\t\t\tconst timeout = setTimeout(() => {\n\t\t\t\t\tcts.dispose(true);\n\t\t\t\t\treject(new Error(localize('resolveShellEnvTimeout', \"Unable to resolve your shell environment in a reasonable time. Please review your shell configuration and restart.\")));\n\t\t\t\t}, timeoutValue);\n\n\t\t\t\t// Resolve shell env and handle errors\n\t\t\t\ttry {\n\t\t\t\t\tresolve(await doResolveUnixShellEnv(logService, cts.token));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (!isCancellationError(error) && !cts.token.isCancellationRequested) {\n\t\t\t\t\t\treject(new Error(localize('resolveShellEnvError', \"Unable to resolve your shell environment: {0}\", toErrorMessage(error))));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve({});\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\tcts.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn unixShellEnvPromise;\n\t}\n}\n\nasync function doResolveUnixShellEnv(logService: ILogService, token: CancellationToken): Promise<typeof process.env> {\n\tconst runAsNode = process.env['ELECTRON_RUN_AS_NODE'];\n\tlogService.trace('getUnixShellEnvironment#runAsNode', runAsNode);\n\n\tconst noAttach = process.env['ELECTRON_NO_ATTACH_CONSOLE'];\n\tlogService.trace('getUnixShellEnvironment#noAttach', noAttach);\n\n\tconst mark = generateUuid().replace(/-/g, '').substr(0, 12);\n\tconst regex = new RegExp(mark + '({.*})' + mark);\n\n\tconst env = {\n\t\t...process.env,\n\t\tELECTRON_RUN_AS_NODE: '1',\n\t\tELECTRON_NO_ATTACH_CONSOLE: '1',\n\t\tVSCODE_RESOLVING_ENVIRONMENT: '1'\n\t};\n\n\tlogService.trace('getUnixShellEnvironment#env', env);\n\tconst systemShellUnix = await getSystemShell(OS, env);\n\tlogService.trace('getUnixShellEnvironment#shell', systemShellUnix);\n\n\treturn new Promise<typeof process.env>((resolve, reject) => {\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn reject(new CancellationError());\n\t\t}\n\n\t\t// handle popular non-POSIX shells\n\t\tconst name = basename(systemShellUnix);\n\t\tlet command: string, shellArgs: Array<string>;\n\t\tconst extraArgs = (process.versions['electron'] && process.versions['microsoft-build']) ? '--ms-enable-electron-run-as-node' : '';\n\t\tif (/^pwsh(-preview)?$/.test(name)) {\n\t\t\t// Older versions of PowerShell removes double quotes sometimes so we use \"double single quotes\" which is how\n\t\t\t// you escape single quotes inside of a single quoted string.\n\t\t\tcommand = `& '${process.execPath}' ${extraArgs} -p '''${mark}'' + JSON.stringify(process.env) + ''${mark}'''`;\n\t\t\tshellArgs = ['-Login', '-Command'];\n\t\t} else if (name === 'nu') { // nushell requires ^ before quoted path to treat it as a command\n\t\t\tcommand = `^'${process.execPath}' ${extraArgs} -p '\"${mark}\" + JSON.stringify(process.env) + \"${mark}\"'`;\n\t\t\tshellArgs = ['-i', '-l', '-c'];\n\t\t} else {\n\t\t\tcommand = `'${process.execPath}' ${extraArgs} -p '\"${mark}\" + JSON.stringify(process.env) + \"${mark}\"'`;\n\n\t\t\tif (name === 'tcsh' || name === 'csh') {\n\t\t\t\tshellArgs = ['-ic'];\n\t\t\t} else {\n\t\t\t\tshellArgs = ['-i', '-l', '-c'];\n\t\t\t}\n\t\t}\n\n\t\tlogService.trace('getUnixShellEnvironment#spawn', JSON.stringify(shellArgs), command);\n\n\t\tconst child = spawn(systemShellUnix, [...shellArgs, command], {\n\t\t\tdetached: true,\n\t\t\tstdio: ['ignore', 'pipe', 'pipe'],\n\t\t\tenv\n\t\t});\n\n\t\ttoken.onCancellationRequested(() => {\n\t\t\tchild.kill();\n\n\t\t\treturn reject(new CancellationError());\n\t\t});\n\n\t\tchild.on('error', err => {\n\t\t\tlogService.error('getUnixShellEnvironment#errorChildProcess', toErrorMessage(err));\n\t\t\treject(err);\n\t\t});\n\n\t\tconst buffers: Buffer[] = [];\n\t\tchild.stdout.on('data', b => buffers.push(b));\n\n\t\tconst stderr: Buffer[] = [];\n\t\tchild.stderr.on('data', b => stderr.push(b));\n\n\t\tchild.on('close', (code, signal) => {\n\t\t\tconst raw = Buffer.concat(buffers).toString('utf8');\n\t\t\tlogService.trace('getUnixShellEnvironment#raw', raw);\n\n\t\t\tconst stderrStr = Buffer.concat(stderr).toString('utf8');\n\t\t\tif (stderrStr.trim()) {\n\t\t\t\tlogService.trace('getUnixShellEnvironment#stderr', stderrStr);\n\t\t\t}\n\n\t\t\tif (code || signal) {\n\t\t\t\treturn reject(new Error(localize('resolveShellEnvExitError', \"Unexpected exit code from spawned shell (code {0}, signal {1})\", code, signal)));\n\t\t\t}\n\n\t\t\tconst match = regex.exec(raw);\n\t\t\tconst rawStripped = match ? match[1] : '{}';\n\n\t\t\ttry {\n\t\t\t\tconst env = JSON.parse(rawStripped);\n\n\t\t\t\tif (runAsNode) {\n\t\t\t\t\tenv['ELECTRON_RUN_AS_NODE'] = runAsNode;\n\t\t\t\t} else {\n\t\t\t\t\tdelete env['ELECTRON_RUN_AS_NODE'];\n\t\t\t\t}\n\n\t\t\t\tif (noAttach) {\n\t\t\t\t\tenv['ELECTRON_NO_ATTACH_CONSOLE'] = noAttach;\n\t\t\t\t} else {\n\t\t\t\t\tdelete env['ELECTRON_NO_ATTACH_CONSOLE'];\n\t\t\t\t}\n\n\t\t\t\tdelete env['VSCODE_RESOLVING_ENVIRONMENT'];\n\n\t\t\t\t// https://github.com/microsoft/vscode/issues/22593#issuecomment-336050758\n\t\t\t\tdelete env['XDG_RUNTIME_DIR'];\n\n\t\t\t\tlogService.trace('getUnixShellEnvironment#result', env);\n\t\t\t\tresolve(env);\n\t\t\t} catch (err) {\n\t\t\t\tlogService.error('getUnixShellEnvironment#errorCaught', toErrorMessage(err));\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n}\n"]}