{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/issue/common/issue.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAkBhG,IAAkB,SAIjB;IAJD,WAAkB,SAAS;QAC1B,uCAAG,CAAA;QACH,iEAAgB,CAAA;QAChB,6DAAc,CAAA;IACf,CAAC,EAJiB,SAAS,yBAAT,SAAS,QAI1B;IAwFY,QAAA,IAAI,GAAgB,IAAA,mBAAG,EAAgC,cAAc,CAAC,CAAC","file":"issue.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ISandboxConfiguration } from 'vs/base/parts/sandbox/common/sandboxTypes';\nimport { PerformanceInfo, SystemInfo } from 'vs/platform/diagnostics/common/diagnostics';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\n// Since data sent through the service is serialized to JSON, functions will be lost, so Color objects\n// should not be sent as their 'toString' method will be stripped. Instead convert to strings before sending.\nexport interface WindowStyles {\n\tbackgroundColor?: string;\n\tcolor?: string;\n}\nexport interface WindowData {\n\tstyles: WindowStyles;\n\tzoomLevel: number;\n}\n\nexport const enum IssueType {\n\tBug,\n\tPerformanceIssue,\n\tFeatureRequest\n}\n\nexport interface IssueReporterStyles extends WindowStyles {\n\ttextLinkColor?: string;\n\ttextLinkActiveForeground?: string;\n\tinputBackground?: string;\n\tinputForeground?: string;\n\tinputBorder?: string;\n\tinputErrorBorder?: string;\n\tinputErrorBackground?: string;\n\tinputErrorForeground?: string;\n\tinputActiveBorder?: string;\n\tbuttonBackground?: string;\n\tbuttonForeground?: string;\n\tbuttonHoverBackground?: string;\n\tsliderBackgroundColor?: string;\n\tsliderHoverColor?: string;\n\tsliderActiveColor?: string;\n}\n\nexport interface IssueReporterExtensionData {\n\tname: string;\n\tpublisher: string | undefined;\n\tversion: string;\n\tid: string;\n\tisTheme: boolean;\n\tisBuiltin: boolean;\n\tdisplayName: string | undefined;\n\trepositoryUrl: string | undefined;\n\tbugsUrl: string | undefined;\n\thasIssueUriRequestHandler?: boolean;\n}\n\nexport interface IssueReporterData extends WindowData {\n\tstyles: IssueReporterStyles;\n\tenabledExtensions: IssueReporterExtensionData[];\n\tissueType?: IssueType;\n\textensionId?: string;\n\texperiments?: string;\n\trestrictedMode: boolean;\n\tisUnsupported: boolean;\n\tgithubAccessToken: string;\n\treadonly issueTitle?: string;\n\treadonly issueBody?: string;\n}\n\nexport interface ISettingSearchResult {\n\textensionId: string;\n\tkey: string;\n\tscore: number;\n}\n\nexport interface ProcessExplorerStyles extends WindowStyles {\n\tlistHoverBackground?: string;\n\tlistHoverForeground?: string;\n\tlistFocusBackground?: string;\n\tlistFocusForeground?: string;\n\tlistFocusOutline?: string;\n\tlistActiveSelectionBackground?: string;\n\tlistActiveSelectionForeground?: string;\n\tlistHoverOutline?: string;\n\tscrollbarShadowColor?: string;\n\tscrollbarSliderBackgroundColor?: string;\n\tscrollbarSliderHoverBackgroundColor?: string;\n\tscrollbarSliderActiveBackgroundColor?: string;\n}\n\nexport interface ProcessExplorerData extends WindowData {\n\tpid: number;\n\tstyles: ProcessExplorerStyles;\n\tplatform: string;\n\tapplicationName: string;\n}\n\nexport interface IssueReporterWindowConfiguration extends ISandboxConfiguration {\n\tdisableExtensions: boolean;\n\tdata: IssueReporterData;\n\tos: {\n\t\ttype: string;\n\t\tarch: string;\n\t\trelease: string;\n\t};\n}\n\nexport interface ProcessExplorerWindowConfiguration extends ISandboxConfiguration {\n\tdata: ProcessExplorerData;\n}\n\nexport const IIssueMainService = createDecorator<IIssueMainService>('issueService');\n\nexport interface IIssueMainService {\n\treadonly _serviceBrand: undefined;\n\tstopTracing(): Promise<void>;\n\topenReporter(data: IssueReporterData): Promise<void>;\n\topenProcessExplorer(data: ProcessExplorerData): Promise<void>;\n\tgetSystemStatus(): Promise<string>;\n\n\t// Used by the issue reporter\n\n\t$getSystemInfo(): Promise<SystemInfo>;\n\t$getPerformanceInfo(): Promise<PerformanceInfo>;\n\t$reloadWithExtensionsDisabled(): Promise<void>;\n\t$showConfirmCloseDialog(): Promise<void>;\n\t$showClipboardDialog(): Promise<boolean>;\n\t$getIssueReporterUri(extensionId: string): Promise<URI>;\n\t$closeReporter(): Promise<void>;\n}\n"]}