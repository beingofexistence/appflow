{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/policy/node/nativePolicyService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IASzF,IAAM,IAAI,GAAV,MAAM,IAAoB,SAAQ,YAAG;QAK3C,YACc,CAAgC,EAC5B,CAAmB;YAEpC,KAAK,EAAE,CAAC;YAHsB,MAAC,GAAD,CAAC,CAAc;YAC5B,MAAC,GAAD,CAAC,CAAkB;YAL7B,MAAC,GAAW,IAAI,WAAG,EAAQ,CAAC;YAC5B,MAAC,GAAS,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAyB,CAAC,CAAC;QAOnE,CAAC;QAES,KAAK,CAAC,CAAC,CAAwB,iBAAsD;YAC9F,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,wDAAwD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,qBAAqB,CAAC,CAAC;YAE1I,MAAM,IAAI,CAAC,CAAC,CAAS,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC3D,IAAI;oBACH,IAAI,CAAC,CAAC,CAAO,KAAK,GAAG,IAAA,8BAAa,EAAC,IAAI,CAAC,CAAC,EAAY,iBAAiB,EAAE,MAAM,CAAC,EAAE;wBAChF,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,CAAC;wBAChC,CAAC,EAAE,CAAC;oBACL,CAAC,CAAC,CAAC;iBACH;gBAAC,OAAO,GAAG,EAAE;oBACb,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,wEAAwE,EAAE,GAAG,CAAC,CAAC;oBACrG,CAAC,CAAC,GAAG,CAAC,CAAC;iBACP;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,CAAC,CAAkB,MAAyD;YACnF,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,mEAAmE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAEnH,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;gBACzB,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAQ,CAAC;gBAEjC,IAAI,KAAK,KAAK,SAAS,EAAE;oBACxB,IAAI,CAAC,CAAC,CAAQ,MAAM,CAAC,GAAG,CAAC,CAAC;iBAC1B;qBAAM;oBACN,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;iBAC9B;aACD;YAED,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7C,CAAC;KACD,CAAA;IA3CY,oBAAI;mBAAJ,IAAI;QAMd,WAAA,SAAG,CAAA;OANO,IAAI,CA2ChB","file":"nativePolicyService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AbstractPolicyService, IPolicyService, PolicyDefinition } from 'vs/platform/policy/common/policy';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Throttler } from 'vs/base/common/async';\nimport { createWatcher, PolicyUpdate, Watcher } from '@vscode/policy-watcher';\nimport { MutableDisposable } from 'vs/base/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class NativePolicyService extends AbstractPolicyService implements IPolicyService {\n\n\tprivate throttler = new Throttler();\n\tprivate watcher = this._register(new MutableDisposable<Watcher>());\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\tprivate readonly productName: string\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async _updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<void> {\n\t\tthis.logService.trace(`NativePolicyService#_updatePolicyDefinitions - Found ${Object.keys(policyDefinitions).length} policy definitions`);\n\n\t\tawait this.throttler.queue(() => new Promise<void>((c, e) => {\n\t\t\ttry {\n\t\t\t\tthis.watcher.value = createWatcher(this.productName, policyDefinitions, update => {\n\t\t\t\t\tthis._onDidPolicyChange(update);\n\t\t\t\t\tc();\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tthis.logService.error(`NativePolicyService#_updatePolicyDefinitions - Error creating watcher:`, err);\n\t\t\t\te(err);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _onDidPolicyChange(update: PolicyUpdate<IStringDictionary<PolicyDefinition>>): void {\n\t\tthis.logService.trace(`NativePolicyService#_onDidPolicyChange - Updated policy values: ${JSON.stringify(update)}`);\n\n\t\tfor (const key in update) {\n\t\t\tconst value = update[key] as any;\n\n\t\t\tif (value === undefined) {\n\t\t\t\tthis.policies.delete(key);\n\t\t\t} else {\n\t\t\t\tthis.policies.set(key, value);\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidChange.fire(Object.keys(update));\n\t}\n}\n"]}