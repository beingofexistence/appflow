{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/policy/common/policyIpc.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,IAAI;QAIhB,YAAoB,CAAY;YAAZ,MAAC,GAAD,CAAC,CAAW;YAFf,MAAC,GAAa,IAAI,eAAG,EAAc,CAAC;QAEN,CAAC;QAEhD,MAAM,CAAC,CAAU,EAAE,KAAa;YAC/B,QAAQ,KAAK,EAAE;gBACd,KAAK,aAAa,CAAC,CAAC,OAAO,aAAK,CAAC,GAAG,CACnC,IAAI,CAAC,CAAC,CAAO,WAAW,EACxB,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAS,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAO,cAAc,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAC7G,IAAI,CAAC,CAAC,CACN,CAAC;aACF;YAED,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,CAAC,CAAU,EAAE,OAAe,EAAE,GAAS;YAC1C,QAAQ,OAAO,EAAE;gBAChB,KAAK,yBAAyB,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAO,uBAAuB,CAAC,GAA0C,CAAC,CAAC;aACxH;YAED,MAAM,IAAI,KAAK,CAAC,mBAAmB,OAAO,EAAE,CAAC,CAAC;QAC/C,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAAW,OAAO,EAAE,CAAC;QAC5B,CAAC;KACD;IA7BD,oBA6BC;IAED,MAAa,IAAoB,SAAQ,YAAG;QAE3C,YAAY,YAAqF,EAAmB,CAAiB;YACpI,KAAK,EAAE,CAAC;YAD2G,MAAC,GAAD,CAAC,CAAgB;YAEpI,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE;gBAChC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;gBACjD,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,GAAG,UAAU,CAAC;gBAC1C,IAAI,KAAK,KAAK,SAAS,EAAE;oBACxB,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;iBAC/B;aACD;YACD,IAAI,CAAC,CAAC,CAAO,MAAM,CAAS,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;gBACrD,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;oBAC5B,MAAM,KAAK,GAAG,QAAQ,CAAC,IAA6B,CAAC,CAAC;oBAEtD,IAAI,KAAK,KAAK,IAAI,EAAE;wBACnB,IAAI,CAAC,CAAC,CAAQ,MAAM,CAAC,IAAI,CAAC,CAAC;qBAC3B;yBAAM;wBACN,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;qBAC/B;iBACD;gBAED,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACJ,CAAC;QAES,KAAK,CAAC,CAAC,CAAwB,iBAAsD;YAC9F,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC,CAAO,IAAI,CAAsC,yBAAyB,EAAE,iBAAiB,CAAC,CAAC;YAC1H,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;gBAC1B,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;aACtC;QACF,CAAC;KAED;IAjCD,oBAiCC","file":"policyIpc.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { AbstractPolicyService, IPolicyService, PolicyDefinition, PolicyName, PolicyValue } from 'vs/platform/policy/common/policy';\n\nexport class PolicyChannel implements IServerChannel {\n\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(private service: IPolicyService) { }\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChange': return Event.map(\n\t\t\t\tthis.service.onDidChange,\n\t\t\t\tnames => names.reduce<object>((r, name) => ({ ...r, [name]: this.service.getPolicyValue(name) ?? null }), {}),\n\t\t\t\tthis.disposables\n\t\t\t);\n\t\t}\n\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'updatePolicyDefinitions': return this.service.updatePolicyDefinitions(arg as IStringDictionary<PolicyDefinition>);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n\tdispose() {\n\t\tthis.disposables.dispose();\n\t}\n}\n\nexport class PolicyChannelClient extends AbstractPolicyService implements IPolicyService {\n\n\tconstructor(policiesData: IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }>, private readonly channel: IChannel) {\n\t\tsuper();\n\t\tfor (const name in policiesData) {\n\t\t\tconst { definition, value } = policiesData[name];\n\t\t\tthis.policyDefinitions[name] = definition;\n\t\t\tif (value !== undefined) {\n\t\t\t\tthis.policies.set(name, value);\n\t\t\t}\n\t\t}\n\t\tthis.channel.listen<object>('onDidChange')(policies => {\n\t\t\tfor (const name in policies) {\n\t\t\t\tconst value = policies[name as keyof typeof policies];\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\tthis.policies.delete(name);\n\t\t\t\t} else {\n\t\t\t\t\tthis.policies.set(name, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onDidChange.fire(Object.keys(policies));\n\t\t});\n\t}\n\n\tprotected async _updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<void> {\n\t\tconst result = await this.channel.call<{ [name: PolicyName]: PolicyValue }>('updatePolicyDefinitions', policyDefinitions);\n\t\tfor (const name in result) {\n\t\t\tthis.policies.set(name, result[name]);\n\t\t}\n\t}\n\n}\n"]}