{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/policy/common/policy.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYnF,QAAA,GAAG,GAAc,IAAA,mBAAG,EAA6B,QAAQ,CAAC,CAAC;IAWxE,MAAsB,GAAsB,SAAQ,eAAG;QAAvD;;YAGW,MAAC,GAAwD,EAAE,CAAC;YAC5D,MAAC,GAAU,IAAI,GAAG,EAA2B,CAAC;YAErC,MAAC,GAAc,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAA6B,CAAC,CAAC;YAC9E,gBAAW,GAAG,IAAI,CAAC,CAAC,CAAY,KAAK,CAAC;QAsBhD,CAAC;QApBA,KAAK,CAAC,uBAAuB,CAAC,iBAAsD;YACnF,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAiB,CAAC,MAAM,CAAC;YACxD,IAAI,CAAC,CAAC,GAAmB,EAAE,GAAG,iBAAiB,EAAE,GAAG,IAAI,CAAC,CAAC,EAAkB,CAAC;YAE7E,IAAI,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAiB,CAAC,MAAM,EAAE;gBACxD,MAAM,IAAI,CAAC,CAAC,CAAwB,iBAAiB,CAAC,CAAC;aACvD;YAED,OAAO,mBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAQ,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACtG,CAAC;QAED,cAAc,CAAC,IAAgB;YAC9B,OAAO,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAED,SAAS;YACR,OAAO,mBAAQ,CAAC,MAAM,CAA0G,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAiB,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,IAAI,CAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC7Q,CAAC;KAGD;IA7BD,kBA6BC;IAED,MAAa,GAAG;QAAhB;YAEU,gBAAW,GAAG,aAAK,CAAC,IAAI,CAAC;QAInC,CAAC;QAHA,KAAK,CAAC,uBAAuB,KAAK,OAAO,EAAE,CAAC,CAAC,CAAC;QAC9C,cAAc,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;QACtC,SAAS,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;KACjC;IAND,kBAMC","file":"policy.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport type PolicyName = string;\nexport type PolicyValue = string | number;\nexport type PolicyDefinition = { type: 'string' | 'number' };\n\nexport const IPolicyService = createDecorator<IPolicyService>('policy');\n\nexport interface IPolicyService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChange: Event<readonly PolicyName[]>;\n\tupdatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<IStringDictionary<PolicyValue>>;\n\tgetPolicyValue(name: PolicyName): PolicyValue | undefined;\n\tserialize(): IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }> | undefined;\n}\n\nexport abstract class AbstractPolicyService extends Disposable implements IPolicyService {\n\treadonly _serviceBrand: undefined;\n\n\tprotected policyDefinitions: IStringDictionary<PolicyDefinition> = {};\n\tprotected policies = new Map<PolicyName, PolicyValue>();\n\n\tprotected readonly _onDidChange = this._register(new Emitter<readonly PolicyName[]>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tasync updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<IStringDictionary<PolicyValue>> {\n\t\tconst size = Object.keys(this.policyDefinitions).length;\n\t\tthis.policyDefinitions = { ...policyDefinitions, ...this.policyDefinitions };\n\n\t\tif (size !== Object.keys(this.policyDefinitions).length) {\n\t\t\tawait this._updatePolicyDefinitions(policyDefinitions);\n\t\t}\n\n\t\treturn Iterable.reduce(this.policies.entries(), (r, [name, value]) => ({ ...r, [name]: value }), {});\n\t}\n\n\tgetPolicyValue(name: PolicyName): PolicyValue | undefined {\n\t\treturn this.policies.get(name);\n\t}\n\n\tserialize(): IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }> {\n\t\treturn Iterable.reduce<[PolicyName, PolicyDefinition], IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }>>(Object.entries(this.policyDefinitions), (r, [name, definition]) => ({ ...r, [name]: { definition, value: this.policies.get(name)! } }), {});\n\t}\n\n\tprotected abstract _updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<void>;\n}\n\nexport class NullPolicyService implements IPolicyService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidChange = Event.None;\n\tasync updatePolicyDefinitions() { return {}; }\n\tgetPolicyValue() { return undefined; }\n\tserialize() { return undefined; }\n}\n"]}