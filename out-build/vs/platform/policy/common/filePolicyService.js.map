{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/policy/common/filePolicyService.ts"],"names":[],"mappings":"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","file":"filePolicyService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport { Event } from 'vs/base/common/event';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { isObject } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { FileOperationError, FileOperationResult, IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { AbstractPolicyService, IPolicyService, PolicyName, PolicyValue } from 'vs/platform/policy/common/policy';\n\nfunction keysDiff<T>(a: Map<string, T>, b: Map<string, T>): string[] {\n\tconst result: string[] = [];\n\n\tfor (const key of new Set(Iterable.concat(a.keys(), b.keys()))) {\n\t\tif (a.get(key) !== b.get(key)) {\n\t\t\tresult.push(key);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport class FilePolicyService extends AbstractPolicyService implements IPolicyService {\n\n\tprivate readonly throttledDelayer = this._register(new ThrottledDelayer(500));\n\n\tconstructor(\n\t\tprivate readonly file: URI,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tconst onDidChangePolicyFile = Event.filter(fileService.onDidFilesChange, e => e.affects(file));\n\t\tthis._register(fileService.watch(file));\n\t\tthis._register(onDidChangePolicyFile(() => this.throttledDelayer.trigger(() => this.refresh())));\n\t}\n\n\tprotected async _updatePolicyDefinitions(): Promise<void> {\n\t\tawait this.refresh();\n\t}\n\n\tprivate async read(): Promise<Map<PolicyName, PolicyValue>> {\n\t\tconst policies = new Map<PolicyName, PolicyValue>();\n\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.file);\n\t\t\tconst raw = JSON.parse(content.value.toString());\n\n\t\t\tif (!isObject(raw)) {\n\t\t\t\tthrow new Error('Policy file isn\\'t a JSON object');\n\t\t\t}\n\n\t\t\tfor (const key of Object.keys(raw)) {\n\t\t\t\tif (this.policyDefinitions[key]) {\n\t\t\t\t\tpolicies.set(key, raw[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(`[FilePolicyService] Failed to read policies`, error);\n\t\t\t}\n\t\t}\n\n\t\treturn policies;\n\t}\n\n\tprivate async refresh(): Promise<void> {\n\t\tconst policies = await this.read();\n\t\tconst diff = keysDiff(this.policies, policies);\n\t\tthis.policies = policies;\n\n\t\tif (diff.length > 0) {\n\t\t\tthis._onDidChange.fire(diff);\n\t\t}\n\t}\n}\n"]}