{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/launch/electron-main/launchMainService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBnF,QAAA,EAAE,GAAG,mBAAmB,CAAC;IACzB,QAAA,IAAI,GAAiB,IAAA,mBAAG,EAAiC,UAAE,CAAC,CAAC;IAgBnE,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YAC+B,CAAe,EACP,CAAwB,EAChC,CAAe,EACL,CAAyB;YAHnC,MAAC,GAAD,CAAC,CAAc;YACP,MAAC,GAAD,CAAC,CAAuB;YAChC,MAAC,GAAD,CAAC,CAAc;YACL,MAAC,GAAD,CAAC,CAAwB;QAC9D,CAAC;QAEL,KAAK,CAAC,KAAK,CAAC,IAAsB,EAAE,OAA4B;YAC/D,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,qCAAqC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAE5E,qDAAqD;YACrD,wDAAwD;YACxD,wDAAwD;YACxD,oDAAoD;YACpD,wDAAwD;YACxD,yDAAyD;YACzD,uDAAuD;YACvD,wDAAwD;YACxD,0BAA0B;YAC1B,IAAI,aAAE,EAAW;gBAChB,cAAG,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;aAC3B;YAED,2DAA2D;YAC3D,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,CAAC;YAC3C,IAAI,UAAU,CAAC,MAAM,EAAE;gBACtB,IAAI,eAAe,GAAqB,OAAO,CAAC,OAAO,EAAE,CAAC;gBAE1D,mCAAmC;gBACnC,IAAI,IAAI,CAAC,CAAC,CAAkB,cAAc,EAAE,KAAK,CAAC,EAAE;oBACnD,MAAM,MAAM,GAAG,IAAA,YAAG,EAAY,MAAM,IAAI,CAAC,CAAC,CAAkB,eAAe,CAAC,EAAE,OAAO,6BAAqB,EAAE,CAAC,CAAC,CAAC;oBAC/G,IAAI,MAAM,EAAE;wBACX,eAAe,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;qBACjC;iBACD;gBAED,6DAA6D;gBAC7D,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE;oBACzB,KAAK,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,UAAU,EAAE;wBAC9C,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;qBAC3C;gBACF,CAAC,CAAC,CAAC;aACH;YAED,sCAAsC;iBACjC;gBACJ,OAAO,IAAI,CAAC,CAAC,CAAe,IAAI,EAAE,OAAO,CAAC,CAAC;aAC3C;QACF,CAAC;QAEO,CAAC,CAAY,IAAsB;YAC1C,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBAE5D,oDAAoD;gBACpD,sFAAsF;gBAEtF,OAAO,IAAA,YAAG,EAAM,IAAI,CAAC,KAAK;qBACxB,GAAG,CAAC,GAAG,CAAC,EAAE;oBACV,IAAI;wBACH,OAAO,EAAE,GAAG,EAAE,SAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,GAAG,EAAE,CAAC;qBACjD;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,IAAI,CAAC;qBACZ;gBACF,CAAC,CAAC,CAAC,CAAC;aACL;YAED,OAAO,EAAE,CAAC;QACX,CAAC;QAEO,KAAK,CAAC,CAAC,CAAe,IAAsB,EAAE,OAA4B;YACjF,MAAM,OAAO,GAAG,IAAA,gBAAG,EAAe,OAAO,CAAC,CAAC,CAAC,yBAAiB,CAAC,4BAAoB,CAAC;YACnF,IAAI,WAAW,GAAkB,EAAE,CAAC;YAEpC,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAC/G,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,IAAI,SAAS,CAAC;YAEjD,MAAM,UAAU,GAAuB;gBACtC,OAAO;gBACP,GAAG,EAAE,IAAI;gBACT,OAAO;gBACP,iBAAiB;gBACjB,eAAe;gBACf,YAAY,EAAE,IAAI,CAAC,OAAO;gBAC1B,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC;aACtC,CAAC;YAEF,qCAAqC;YACrC,IAAI,CAAC,CAAC,IAAI,CAAC,wBAAwB,EAAE;gBACpC,MAAM,IAAI,CAAC,CAAC,CAAkB,kCAAkC,CAAC,IAAI,CAAC,wBAAwB,EAAE,UAAU,CAAC,CAAC;aAC5G;YAED,sCAAsC;iBACjC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBACpE,IAAI,aAAa,GAAG,KAAK,CAAC;gBAE1B,mBAAmB;gBACnB,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,UAAU,CAAC,YAAY,IAAI,UAAU,CAAC,gBAAgB,EAAE;oBACzG,aAAa,GAAG,IAAI,CAAC;iBACrB;gBAED,qBAAqB;qBAChB,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;oBAC9B,aAAa,GAAG,KAAK,CAAC;iBACtB;gBAED,+BAA+B;qBAC1B;oBACJ,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAA8B,QAAQ,CAAC,CAAC;oBAC/F,MAAM,qCAAqC,GAAG,YAAY,EAAE,+BAA+B,IAAI,SAAS,CAAC,aAAa,CAAC;oBACvH,QAAQ,qCAAqC,EAAE;wBAC9C,KAAK,IAAI;4BACR,aAAa,GAAG,IAAI,CAAC;4BACrB,MAAM;wBACP,KAAK,KAAK;4BACT,aAAa,GAAG,KAAK,CAAC;4BACtB,MAAM;wBACP;4BACC,aAAa,GAAG,CAAC,aAAE,CAAU,CAAC,8CAA8C;qBAC7E;iBACD;gBAED,kBAAkB;gBAClB,IAAI,aAAa,EAAE;oBAClB,WAAW,GAAG,MAAM,IAAI,CAAC,CAAC,CAAkB,IAAI,CAAC;wBAChD,GAAG,UAAU;wBACb,cAAc,EAAE,IAAI;wBACpB,UAAU,EAAE,IAAI;qBAChB,CAAC,CAAC;iBACH;gBAED,+CAA+C;qBAC1C;oBACJ,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAkB,mBAAmB,EAAE,CAAC;oBACjE,IAAI,UAAU,EAAE;wBACf,IAAI,CAAC,CAAC,CAAkB,kBAAkB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;wBAEnE,WAAW,GAAG,CAAC,UAAU,CAAC,CAAC;qBAC3B;yBAAM;wBACN,WAAW,GAAG,MAAM,IAAI,CAAC,CAAC,CAAkB,IAAI,CAAC;4BAChD,GAAG,UAAU;4BACb,UAAU,EAAE,IAAI;yBAChB,CAAC,CAAC;qBACH;iBACD;aACD;YAED,mCAAmC;iBAC9B;gBACJ,WAAW,GAAG,MAAM,IAAI,CAAC,CAAC,CAAkB,IAAI,CAAC;oBAChD,GAAG,UAAU;oBACb,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC;oBAClC,eAAe,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;oBACpD,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC;oBACtC,QAAQ,EAAE,IAAI,CAAC,IAAI;oBACnB,SAAS,EAAE,IAAI,CAAC,KAAK;oBACrB,OAAO,EAAE,IAAI,CAAC,GAAG;oBACjB,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC;oBACpD,YAAY,EAAE,IAAI,CAAC,IAAI;iBACvB,CAAC,CAAC;aACH;YAED,4FAA4F;YAC5F,gGAAgG;YAChG,yEAAyE;YACzE,IAAI,iBAAiB,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,EAAE;gBACpE,OAAO,OAAO,CAAC,IAAI,CAAC;oBACnB,WAAW,CAAC,CAAC,CAAC,CAAC,kBAAkB;oBACjC,IAAA,iBAAW,EAAC,iBAAiB,CAAC,MAAM,CAAC;iBACrC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;aAC1C;QACF,CAAC;QAED,KAAK,CAAC,gBAAgB;YACrB,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,sDAAsD,CAAC,CAAC;YAE9E,OAAO,OAAO,CAAC,GAAG,CAAC;QACpB,CAAC;KACD,CAAA;IArLY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,SAAG,CAAA;QACH,WAAA,cAAI,CAAA;QACJ,WAAA,SAAG,CAAA;QACH,WAAA,mBAAG,CAAA;OARO,IAAI,CAqLhB","file":"launchMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app } from 'electron';\nimport { coalesce, firstOrDefault } from 'vs/base/common/arrays';\nimport { IProcessEnvironment, isMacintosh } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { whenDeleted } from 'vs/base/node/pfs';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { isLaunchedFromCli } from 'vs/platform/environment/node/argvHelper';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IURLService } from 'vs/platform/url/common/url';\nimport { ICodeWindow } from 'vs/platform/window/electron-main/window';\nimport { IWindowSettings } from 'vs/platform/window/common/window';\nimport { IOpenConfiguration, IWindowsMainService, OpenContext } from 'vs/platform/windows/electron-main/windows';\nimport { IProtocolUrl } from 'vs/platform/url/electron-main/url';\n\nexport const ID = 'launchMainService';\nexport const ILaunchMainService = createDecorator<ILaunchMainService>(ID);\n\nexport interface IStartArguments {\n\treadonly args: NativeParsedArgs;\n\treadonly userEnv: IProcessEnvironment;\n}\n\nexport interface ILaunchMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\tstart(args: NativeParsedArgs, userEnv: IProcessEnvironment): Promise<void>;\n\n\tgetMainProcessId(): Promise<number>;\n}\n\nexport class LaunchMainService implements ILaunchMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t\t@IURLService private readonly urlService: IURLService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) { }\n\n\tasync start(args: NativeParsedArgs, userEnv: IProcessEnvironment): Promise<void> {\n\t\tthis.logService.trace('Received data from other instance: ', args, userEnv);\n\n\t\t// macOS: Electron > 7.x changed its behaviour to not\n\t\t// bring the application to the foreground when a window\n\t\t// is focused programmatically. Only via `app.focus` and\n\t\t// the option `steal: true` can you get the previous\n\t\t// behaviour back. The only reason to use this option is\n\t\t// when a window is getting focused while the application\n\t\t// is not in the foreground and since we got instructed\n\t\t// to open a new window from another instance, we ensure\n\t\t// that the app has focus.\n\t\tif (isMacintosh) {\n\t\t\tapp.focus({ steal: true });\n\t\t}\n\n\t\t// Check early for open-url which is handled in URL service\n\t\tconst urlsToOpen = this.parseOpenUrl(args);\n\t\tif (urlsToOpen.length) {\n\t\t\tlet whenWindowReady: Promise<unknown> = Promise.resolve();\n\n\t\t\t// Create a window if there is none\n\t\t\tif (this.windowsMainService.getWindowCount() === 0) {\n\t\t\t\tconst window = firstOrDefault(await this.windowsMainService.openEmptyWindow({ context: OpenContext.DESKTOP }));\n\t\t\t\tif (window) {\n\t\t\t\t\twhenWindowReady = window.ready();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Make sure a window is open, ready to receive the url event\n\t\t\twhenWindowReady.then(() => {\n\t\t\t\tfor (const { uri, originalUrl } of urlsToOpen) {\n\t\t\t\t\tthis.urlService.open(uri, { originalUrl });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Otherwise handle in windows service\n\t\telse {\n\t\t\treturn this.startOpenWindow(args, userEnv);\n\t\t}\n\t}\n\n\tprivate parseOpenUrl(args: NativeParsedArgs): IProtocolUrl[] {\n\t\tif (args['open-url'] && args._urls && args._urls.length > 0) {\n\n\t\t\t// --open-url must contain -- followed by the url(s)\n\t\t\t// process.argv is used over args._ as args._ are resolved to file paths at this point\n\n\t\t\treturn coalesce(args._urls\n\t\t\t\t.map(url => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn { uri: URI.parse(url), originalUrl: url };\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprivate async startOpenWindow(args: NativeParsedArgs, userEnv: IProcessEnvironment): Promise<void> {\n\t\tconst context = isLaunchedFromCli(userEnv) ? OpenContext.CLI : OpenContext.DESKTOP;\n\t\tlet usedWindows: ICodeWindow[] = [];\n\n\t\tconst waitMarkerFileURI = args.wait && args.waitMarkerFilePath ? URI.file(args.waitMarkerFilePath) : undefined;\n\t\tconst remoteAuthority = args.remote || undefined;\n\n\t\tconst baseConfig: IOpenConfiguration = {\n\t\t\tcontext,\n\t\t\tcli: args,\n\t\t\tuserEnv,\n\t\t\twaitMarkerFileURI,\n\t\t\tremoteAuthority,\n\t\t\tforceProfile: args.profile,\n\t\t\tforceTempProfile: args['profile-temp']\n\t\t};\n\n\t\t// Special case extension development\n\t\tif (!!args.extensionDevelopmentPath) {\n\t\t\tawait this.windowsMainService.openExtensionDevelopmentHostWindow(args.extensionDevelopmentPath, baseConfig);\n\t\t}\n\n\t\t// Start without file/folder arguments\n\t\telse if (!args._.length && !args['folder-uri'] && !args['file-uri']) {\n\t\t\tlet openNewWindow = false;\n\n\t\t\t// Force new window\n\t\t\tif (args['new-window'] || args['unity-launch'] || baseConfig.forceProfile || baseConfig.forceTempProfile) {\n\t\t\t\topenNewWindow = true;\n\t\t\t}\n\n\t\t\t// Force reuse window\n\t\t\telse if (args['reuse-window']) {\n\t\t\t\topenNewWindow = false;\n\t\t\t}\n\n\t\t\t// Otherwise check for settings\n\t\t\telse {\n\t\t\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings | undefined>('window');\n\t\t\t\tconst openWithoutArgumentsInNewWindowConfig = windowConfig?.openWithoutArgumentsInNewWindow || 'default' /* default */;\n\t\t\t\tswitch (openWithoutArgumentsInNewWindowConfig) {\n\t\t\t\t\tcase 'on':\n\t\t\t\t\t\topenNewWindow = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'off':\n\t\t\t\t\t\topenNewWindow = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\topenNewWindow = !isMacintosh; // prefer to restore running instance on macOS\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Open new Window\n\t\t\tif (openNewWindow) {\n\t\t\t\tusedWindows = await this.windowsMainService.open({\n\t\t\t\t\t...baseConfig,\n\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\tforceEmpty: true\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Focus existing window or open if none opened\n\t\t\telse {\n\t\t\t\tconst lastActive = this.windowsMainService.getLastActiveWindow();\n\t\t\t\tif (lastActive) {\n\t\t\t\t\tthis.windowsMainService.openExistingWindow(lastActive, baseConfig);\n\n\t\t\t\t\tusedWindows = [lastActive];\n\t\t\t\t} else {\n\t\t\t\t\tusedWindows = await this.windowsMainService.open({\n\t\t\t\t\t\t...baseConfig,\n\t\t\t\t\t\tforceEmpty: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Start with file/folder arguments\n\t\telse {\n\t\t\tusedWindows = await this.windowsMainService.open({\n\t\t\t\t...baseConfig,\n\t\t\t\tforceNewWindow: args['new-window'],\n\t\t\t\tpreferNewWindow: !args['reuse-window'] && !args.wait,\n\t\t\t\tforceReuseWindow: args['reuse-window'],\n\t\t\t\tdiffMode: args.diff,\n\t\t\t\tmergeMode: args.merge,\n\t\t\t\taddMode: args.add,\n\t\t\t\tnoRecentEntry: !!args['skip-add-to-recently-opened'],\n\t\t\t\tgotoLineMode: args.goto\n\t\t\t});\n\t\t}\n\n\t\t// If the other instance is waiting to be killed, we hook up a window listener if one window\n\t\t// is being used and only then resolve the startup promise which will kill this second instance.\n\t\t// In addition, we poll for the wait marker file to be deleted to return.\n\t\tif (waitMarkerFileURI && usedWindows.length === 1 && usedWindows[0]) {\n\t\t\treturn Promise.race([\n\t\t\t\tusedWindows[0].whenClosedOrLoaded,\n\t\t\t\twhenDeleted(waitMarkerFileURI.fsPath)\n\t\t\t]).then(() => undefined, () => undefined);\n\t\t}\n\t}\n\n\tasync getMainProcessId(): Promise<number> {\n\t\tthis.logService.trace('Received request for process ID from other instance.');\n\n\t\treturn process.pid;\n\t}\n}\n"]}