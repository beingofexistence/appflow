{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/remote/node/nodeSocketFactory.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IASnF,QAAA,IAAI,GAAgB,IAAI;QAEpC,QAAQ,CAAC,SAAc;YACtB,OAAO,IAAI,CAAC;QACb,CAAC;QAED,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAO,EAAwB,IAAY,EAAE,KAAa,EAAE,UAAkB;YACjG,OAAO,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC/C,MAAM,MAAM,GAAG,GAAG,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE;oBACpE,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBAEvC,MAAM,CAAC,KAAK,CAAC,IAAA,oBAAI,EAAiB,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;oBAE5D,MAAM,MAAM,GAAG,CAAC,IAAY,EAAE,EAAE;wBAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;wBAChC,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;4BACrC,sBAAsB;4BACtB,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;4BAC3B,OAAO,CAAC,IAAI,aAAG,CAAQ,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;yBAC5C;oBACF,CAAC,CAAC;oBACF,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBAC3B,CAAC,CAAC,CAAC;gBACH,6BAA6B;gBAC7B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAC","file":"nodeSocketFactory.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as net from 'net';\nimport { ISocket } from 'vs/base/parts/ipc/common/ipc.net';\nimport { NodeSocket } from 'vs/base/parts/ipc/node/ipc.net';\nimport { makeRawSocketHeaders } from 'vs/platform/remote/common/managedSocket';\nimport { RemoteConnectionType, WebSocketRemoteConnection } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { ISocketFactory } from 'vs/platform/remote/common/remoteSocketFactoryService';\n\nexport const nodeSocketFactory = new class implements ISocketFactory<RemoteConnectionType.WebSocket> {\n\n\tsupports(connectTo: WebSocketRemoteConnection): boolean {\n\t\treturn true;\n\t}\n\n\tconnect({ host, port }: WebSocketRemoteConnection, path: string, query: string, debugLabel: string): Promise<ISocket> {\n\t\treturn new Promise<ISocket>((resolve, reject) => {\n\t\t\tconst socket = net.createConnection({ host: host, port: port }, () => {\n\t\t\t\tsocket.removeListener('error', reject);\n\n\t\t\t\tsocket.write(makeRawSocketHeaders(path, query, debugLabel));\n\n\t\t\t\tconst onData = (data: Buffer) => {\n\t\t\t\t\tconst strData = data.toString();\n\t\t\t\t\tif (strData.indexOf('\\r\\n\\r\\n') >= 0) {\n\t\t\t\t\t\t// headers received OK\n\t\t\t\t\t\tsocket.off('data', onData);\n\t\t\t\t\t\tresolve(new NodeSocket(socket, debugLabel));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tsocket.on('data', onData);\n\t\t\t});\n\t\t\t// Disable Nagle's algorithm.\n\t\t\tsocket.setNoDelay(true);\n\t\t\tsocket.once('error', reject);\n\t\t});\n\t}\n};\n"]}