{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/remote/test/electron-sandbox/remoteAuthorityResolverService.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAShG,KAAK,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAE5C,IAAA,WAAG,GAAsC,CAAC;QAE1C,IAAI,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;YAClF,MAAM,cAAc,GAAoB,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,iBAAO,EAAE,CAAC;YACjF,MAAM,OAAO,GAAG,IAAI,qCAAI,CAA2B,cAAc,EAAE,SAAgB,CAAC,CAAC;YACrF,MAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAClD,OAAO,CAAC,0BAA0B,CAAC,QAAQ,EAAE,IAAI,6BAAG,CAA0B,WAAW,EAAE,0DAAgC,CAAC,uBAAuB,CAAC,CAAC,CAAC;YACtJ,IAAI;gBACH,MAAM,MAAM,CAAC;gBACb,MAAM,CAAC,IAAI,EAAE,CAAC;aACd;YAAC,OAAO,GAAG,EAAE;gBACb,MAAM,CAAC,WAAW,CAAC,6BAAG,CAA0B,yBAAyB,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;aACtF;YACD,OAAO,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"remoteAuthorityResolverService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { RemoteAuthorityResolverError, RemoteAuthorityResolverErrorCode } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { RemoteAuthorityResolverService } from 'vs/platform/remote/electron-sandbox/remoteAuthorityResolverService';\n\nsuite('RemoteAuthorityResolverService', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #147318: RemoteAuthorityResolverError keeps the same type', async () => {\n\t\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\t\tconst service = new RemoteAuthorityResolverService(productService, undefined as any);\n\t\tconst result = service.resolveAuthority('test+x');\n\t\tservice._setResolvedAuthorityError('test+x', new RemoteAuthorityResolverError('something', RemoteAuthorityResolverErrorCode.TemporarilyNotAvailable));\n\t\ttry {\n\t\t\tawait result;\n\t\t\tassert.fail();\n\t\t} catch (err) {\n\t\t\tassert.strictEqual(RemoteAuthorityResolverError.isTemporarilyNotAvailable(err), true);\n\t\t}\n\t\tservice.dispose();\n\t});\n});\n"]}