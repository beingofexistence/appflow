{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/remote/browser/remoteAuthorityResolverService.ts"],"names":[],"mappings":"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","file":"remoteAuthorityResolverService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from 'vs/base/common/async';\nimport * as errors from 'vs/base/common/errors';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { RemoteAuthorities } from 'vs/base/common/network';\nimport * as performance from 'vs/base/common/performance';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { URI } from 'vs/base/common/uri';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRemoteAuthorityResolverService, IRemoteConnectionData, RemoteConnectionType, ResolvedAuthority, ResolvedOptions, ResolverResult, WebSocketRemoteConnection, getRemoteAuthorityPrefix } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { getRemoteServerRootPath, parseAuthorityWithOptionalPort } from 'vs/platform/remote/common/remoteHosts';\n\nexport class RemoteAuthorityResolverService extends Disposable implements IRemoteAuthorityResolverService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeConnectionData = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeConnectionData = this._onDidChangeConnectionData.event;\n\n\tprivate readonly _resolveAuthorityRequests = new Map<string, DeferredPromise<ResolverResult>>();\n\tprivate readonly _cache = new Map<string, ResolverResult>();\n\tprivate readonly _connectionToken: Promise<string> | string | undefined;\n\tprivate readonly _connectionTokens: Map<string, string>;\n\tprivate readonly _isWorkbenchOptionsBasedResolution: boolean;\n\n\tconstructor(\n\t\tisWorkbenchOptionsBasedResolution: boolean,\n\t\tconnectionToken: Promise<string> | string | undefined,\n\t\tresourceUriProvider: ((uri: URI) => URI) | undefined,\n\t\t@IProductService productService: IProductService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._connectionToken = connectionToken;\n\t\tthis._connectionTokens = new Map<string, string>();\n\t\tthis._isWorkbenchOptionsBasedResolution = isWorkbenchOptionsBasedResolution;\n\t\tif (resourceUriProvider) {\n\t\t\tRemoteAuthorities.setDelegate(resourceUriProvider);\n\t\t}\n\t\tRemoteAuthorities.setServerRootPath(getRemoteServerRootPath(productService));\n\t}\n\n\tasync resolveAuthority(authority: string): Promise<ResolverResult> {\n\t\tlet result = this._resolveAuthorityRequests.get(authority);\n\t\tif (!result) {\n\t\t\tresult = new DeferredPromise<ResolverResult>();\n\t\t\tthis._resolveAuthorityRequests.set(authority, result);\n\t\t\tif (this._isWorkbenchOptionsBasedResolution) {\n\t\t\t\tthis._doResolveAuthority(authority).then(v => result!.complete(v), (err) => result!.error(err));\n\t\t\t}\n\t\t}\n\n\t\treturn result.p;\n\t}\n\n\tasync getCanonicalURI(uri: URI): Promise<URI> {\n\t\t// todo@connor4312 make this work for web\n\t\treturn uri;\n\t}\n\n\tgetConnectionData(authority: string): IRemoteConnectionData | null {\n\t\tif (!this._cache.has(authority)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst resolverResult = this._cache.get(authority)!;\n\t\tconst connectionToken = this._connectionTokens.get(authority) || resolverResult.authority.connectionToken;\n\t\treturn {\n\t\t\tconnectTo: resolverResult.authority.connectTo,\n\t\t\tconnectionToken: connectionToken\n\t\t};\n\t}\n\n\tprivate async _doResolveAuthority(authority: string): Promise<ResolverResult> {\n\t\tconst authorityPrefix = getRemoteAuthorityPrefix(authority);\n\t\tconst sw = StopWatch.create(false);\n\t\tthis._logService.info(`Resolving connection token (${authorityPrefix})...`);\n\t\tperformance.mark(`code/willResolveConnectionToken/${authorityPrefix}`);\n\t\tconst connectionToken = await Promise.resolve(this._connectionTokens.get(authority) || this._connectionToken);\n\t\tperformance.mark(`code/didResolveConnectionToken/${authorityPrefix}`);\n\t\tthis._logService.info(`Resolved connection token (${authorityPrefix}) after ${sw.elapsed()} ms`);\n\t\tconst defaultPort = (/^https:/.test(window.location.href) ? 443 : 80);\n\t\tconst { host, port } = parseAuthorityWithOptionalPort(authority, defaultPort);\n\t\tconst result: ResolverResult = { authority: { authority, connectTo: new WebSocketRemoteConnection(host, port), connectionToken } };\n\t\tRemoteAuthorities.set(authority, host, port);\n\t\tthis._cache.set(authority, result);\n\t\tthis._onDidChangeConnectionData.fire();\n\t\treturn result;\n\t}\n\n\n\t_clearResolvedAuthority(authority: string): void {\n\t\tif (this._resolveAuthorityRequests.has(authority)) {\n\t\t\tthis._resolveAuthorityRequests.get(authority)!.cancel();\n\t\t\tthis._resolveAuthorityRequests.delete(authority);\n\t\t}\n\t}\n\n\t_setResolvedAuthority(resolvedAuthority: ResolvedAuthority, options?: ResolvedOptions): void {\n\t\tif (this._resolveAuthorityRequests.has(resolvedAuthority.authority)) {\n\t\t\tconst request = this._resolveAuthorityRequests.get(resolvedAuthority.authority)!;\n\t\t\t// For non-websocket types, it's expected the embedder passes a `remoteResourceProvider`\n\t\t\t// which is wrapped to a `IResourceUriProvider` and is not handled here.\n\t\t\tif (resolvedAuthority.connectTo.type === RemoteConnectionType.WebSocket) {\n\t\t\t\tRemoteAuthorities.set(resolvedAuthority.authority, resolvedAuthority.connectTo.host, resolvedAuthority.connectTo.port);\n\t\t\t}\n\t\t\tif (resolvedAuthority.connectionToken) {\n\t\t\t\tRemoteAuthorities.setConnectionToken(resolvedAuthority.authority, resolvedAuthority.connectionToken);\n\t\t\t}\n\t\t\trequest.complete({ authority: resolvedAuthority, options });\n\t\t\tthis._onDidChangeConnectionData.fire();\n\t\t}\n\t}\n\n\t_setResolvedAuthorityError(authority: string, err: any): void {\n\t\tif (this._resolveAuthorityRequests.has(authority)) {\n\t\t\tconst request = this._resolveAuthorityRequests.get(authority)!;\n\t\t\t// Avoid that this error makes it to telemetry\n\t\t\trequest.error(errors.ErrorNoTelemetry.fromError(err));\n\t\t}\n\t}\n\n\t_setAuthorityConnectionToken(authority: string, connectionToken: string): void {\n\t\tthis._connectionTokens.set(authority, connectionToken);\n\t\tRemoteAuthorities.setConnectionToken(authority, connectionToken);\n\t\tthis._onDidChangeConnectionData.fire();\n\t}\n\n\t_setCanonicalURIProvider(provider: (uri: URI) => Promise<URI>): void {\n\t}\n}\n"]}