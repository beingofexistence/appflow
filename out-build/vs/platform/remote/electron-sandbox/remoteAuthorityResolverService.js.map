{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/remote/electron-sandbox/remoteAuthorityResolverService.ts"],"names":[],"mappings":"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","file":"remoteAuthorityResolverService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n//\nimport { DeferredPromise } from 'vs/base/common/async';\nimport * as errors from 'vs/base/common/errors';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { RemoteAuthorities } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRemoteAuthorityResolverService, IRemoteConnectionData, RemoteConnectionType, ResolvedAuthority, ResolvedOptions, ResolverResult } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { getRemoteServerRootPath } from 'vs/platform/remote/common/remoteHosts';\nimport { ElectronRemoteResourceLoader } from 'vs/platform/remote/electron-sandbox/electronRemoteResourceLoader';\n\nexport class RemoteAuthorityResolverService extends Disposable implements IRemoteAuthorityResolverService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeConnectionData = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeConnectionData = this._onDidChangeConnectionData.event;\n\n\tprivate readonly _resolveAuthorityRequests: Map<string, DeferredPromise<ResolverResult>>;\n\tprivate readonly _connectionTokens: Map<string, string>;\n\tprivate readonly _canonicalURIRequests: Map<string, { input: URI; result: DeferredPromise<URI> }>;\n\tprivate _canonicalURIProvider: ((uri: URI) => Promise<URI>) | null;\n\n\tconstructor(@IProductService productService: IProductService, private readonly remoteResourceLoader: ElectronRemoteResourceLoader) {\n\t\tsuper();\n\t\tthis._resolveAuthorityRequests = new Map<string, DeferredPromise<ResolverResult>>();\n\t\tthis._connectionTokens = new Map<string, string>();\n\t\tthis._canonicalURIRequests = new Map();\n\t\tthis._canonicalURIProvider = null;\n\n\t\tRemoteAuthorities.setServerRootPath(getRemoteServerRootPath(productService));\n\t}\n\n\tresolveAuthority(authority: string): Promise<ResolverResult> {\n\t\tif (!this._resolveAuthorityRequests.has(authority)) {\n\t\t\tthis._resolveAuthorityRequests.set(authority, new DeferredPromise());\n\t\t}\n\t\treturn this._resolveAuthorityRequests.get(authority)!.p;\n\t}\n\n\tasync getCanonicalURI(uri: URI): Promise<URI> {\n\t\tconst key = uri.toString();\n\t\tconst existing = this._canonicalURIRequests.get(key);\n\t\tif (existing) {\n\t\t\treturn existing.result.p;\n\t\t}\n\n\t\tconst result = new DeferredPromise<URI>();\n\t\tthis._canonicalURIProvider?.(uri).then((uri) => result.complete(uri), (err) => result.error(err));\n\t\tthis._canonicalURIRequests.set(key, { input: uri, result });\n\t\treturn result.p;\n\t}\n\n\tgetConnectionData(authority: string): IRemoteConnectionData | null {\n\t\tif (!this._resolveAuthorityRequests.has(authority)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst request = this._resolveAuthorityRequests.get(authority)!;\n\t\tif (!request.isResolved) {\n\t\t\treturn null;\n\t\t}\n\t\tconst connectionToken = this._connectionTokens.get(authority);\n\t\treturn {\n\t\t\tconnectTo: request.value!.authority.connectTo,\n\t\t\tconnectionToken: connectionToken\n\t\t};\n\t}\n\n\t_clearResolvedAuthority(authority: string): void {\n\t\tif (this._resolveAuthorityRequests.has(authority)) {\n\t\t\tthis._resolveAuthorityRequests.get(authority)!.cancel();\n\t\t\tthis._resolveAuthorityRequests.delete(authority);\n\t\t}\n\t}\n\n\t_setResolvedAuthority(resolvedAuthority: ResolvedAuthority, options?: ResolvedOptions): void {\n\t\tif (this._resolveAuthorityRequests.has(resolvedAuthority.authority)) {\n\t\t\tconst request = this._resolveAuthorityRequests.get(resolvedAuthority.authority)!;\n\t\t\tif (resolvedAuthority.connectTo.type === RemoteConnectionType.WebSocket) {\n\t\t\t\tRemoteAuthorities.set(resolvedAuthority.authority, resolvedAuthority.connectTo.host, resolvedAuthority.connectTo.port);\n\t\t\t} else {\n\t\t\t\tRemoteAuthorities.setDelegate(this.remoteResourceLoader.getResourceUriProvider());\n\t\t\t}\n\t\t\tif (resolvedAuthority.connectionToken) {\n\t\t\t\tRemoteAuthorities.setConnectionToken(resolvedAuthority.authority, resolvedAuthority.connectionToken);\n\t\t\t}\n\t\t\trequest.complete({ authority: resolvedAuthority, options });\n\t\t\tthis._onDidChangeConnectionData.fire();\n\t\t}\n\t}\n\n\t_setResolvedAuthorityError(authority: string, err: any): void {\n\t\tif (this._resolveAuthorityRequests.has(authority)) {\n\t\t\tconst request = this._resolveAuthorityRequests.get(authority)!;\n\t\t\t// Avoid that this error makes it to telemetry\n\t\t\trequest.error(errors.ErrorNoTelemetry.fromError(err));\n\t\t}\n\t}\n\n\t_setAuthorityConnectionToken(authority: string, connectionToken: string): void {\n\t\tthis._connectionTokens.set(authority, connectionToken);\n\t\tRemoteAuthorities.setConnectionToken(authority, connectionToken);\n\t\tthis._onDidChangeConnectionData.fire();\n\t}\n\n\t_setCanonicalURIProvider(provider: (uri: URI) => Promise<URI>): void {\n\t\tthis._canonicalURIProvider = provider;\n\t\tthis._canonicalURIRequests.forEach(({ result, input }) => {\n\t\t\tthis._canonicalURIProvider!(input).then((uri) => result.complete(uri), (err) => result.error(err));\n\t\t});\n\t}\n}\n"]}