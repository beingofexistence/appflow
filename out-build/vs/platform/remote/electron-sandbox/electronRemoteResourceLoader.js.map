{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/remote/electron-sandbox/electronRemoteResourceLoader.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAazF,IAAM,IAAI,GAAV,MAAM,IAA6B,SAAQ,eAAG;QACpD,YACkB,CAAgB,EACZ,kBAAwB,EACd,CAAgB;YAE/C,KAAK,EAAE,CAAC;YAJS,MAAC,GAAD,CAAC,CAAe;YAEF,MAAC,GAAD,CAAC,CAAe;YAI/C,MAAM,OAAO,GAAmB;gBAC/B,MAAM,CAAI,CAAU,EAAE,KAAa;oBAClC,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAC;gBAC9C,CAAC;gBAED,IAAI,EAAE,CAAC,CAAU,EAAE,OAAe,EAAE,GAAS,EAAgB,EAAE;oBAC9D,QAAQ,OAAO,EAAE;wBAChB,KAAK,8BAAI,CAAiC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAS,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACrF;oBAED,MAAM,IAAI,KAAK,CAAC,mBAAmB,OAAO,EAAE,CAAC,CAAC;gBAC/C,CAAC;aACD,CAAC;YAEF,kBAAkB,CAAC,eAAe,CAAC,8BAAI,EAA+B,OAAO,CAAC,CAAC;QAChF,CAAC;QAEO,KAAK,CAAC,CAAC,CAAS,GAAQ;YAC/B,IAAI,OAAqB,CAAC;YAC1B,IAAI;gBACH,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC9C,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC;oBACvB,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAE;oBAC7B,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,WAAW,CAAE;oBACnC,KAAK,EAAE,EAAE;iBACT,CAAC,CAAC;gBACH,OAAO,GAAG,MAAM,IAAI,CAAC,CAAC,CAAW,QAAQ,CAAC,MAAM,CAAC,CAAC;aAClD;YAAC,OAAO,CAAC,EAAE;gBACX,MAAM,GAAG,GAAG,IAAA,YAAG,EAAU,YAAG,CAAM,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACzD,IAAI,CAAC,YAAY,WAAG,IAAmB,CAAC,CAAC,mBAAmB,+CAAuC,EAAE;oBACpG,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;iBACtC;qBAAM;oBACN,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;iBACtC;aACD;YAED,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,IAAI,IAAA,UAAG,EAAgB,GAAG,CAAC,IAAI,CAAC,CAAC;YAC1D,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,IAAA,YAAG,EAAU,OAAO,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,CAAC;QACzE,CAAC;QAEM,sBAAsB;YAC5B,OAAO,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC;gBAC7B,MAAM,EAAE,iBAAO,CAAC,2BAA2B;gBAC3C,SAAS,EAAE,UAAU,IAAI,CAAC,CAAC,EAAS;gBACpC,KAAK,EAAE,IAAI,eAAe,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;aACvF,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IAvDY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,yBAAI,CAAA;QACJ,WAAA,WAAG,CAAA;OAJO,IAAI,CAuDhB","file":"electronRemoteResourceLoader.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer, encodeBase64 } from 'vs/base/common/buffer';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { getMediaOrTextMime } from 'vs/base/common/mime';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { FileOperationError, FileOperationResult, IFileContent, IFileService } from 'vs/platform/files/common/files';\nimport { IMainProcessService } from 'vs/platform/ipc/common/mainProcessService';\nimport { NODE_REMOTE_RESOURCE_CHANNEL_NAME, NODE_REMOTE_RESOURCE_IPC_METHOD_NAME, NodeRemoteResourceResponse } from 'vs/platform/remote/common/electronRemoteResources';\n\nexport class ElectronRemoteResourceLoader extends Disposable {\n\tconstructor(\n\t\tprivate readonly windowId: number,\n\t\t@IMainProcessService mainProcessService: IMainProcessService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t) {\n\t\tsuper();\n\n\t\tconst channel: IServerChannel = {\n\t\t\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\t\t\tthrow new Error(`Event not found: ${event}`);\n\t\t\t},\n\n\t\t\tcall: (_: unknown, command: string, arg?: any): Promise<any> => {\n\t\t\t\tswitch (command) {\n\t\t\t\t\tcase NODE_REMOTE_RESOURCE_IPC_METHOD_NAME: return this.doRequest(URI.revive(arg[0]));\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(`Call not found: ${command}`);\n\t\t\t}\n\t\t};\n\n\t\tmainProcessService.registerChannel(NODE_REMOTE_RESOURCE_CHANNEL_NAME, channel);\n\t}\n\n\tprivate async doRequest(uri: URI): Promise<NodeRemoteResourceResponse> {\n\t\tlet content: IFileContent;\n\t\ttry {\n\t\t\tconst params = new URLSearchParams(uri.query);\n\t\t\tconst actual = uri.with({\n\t\t\t\tscheme: params.get('scheme')!,\n\t\t\t\tauthority: params.get('authority')!,\n\t\t\t\tquery: '',\n\t\t\t});\n\t\t\tcontent = await this.fileService.readFile(actual);\n\t\t} catch (e) {\n\t\t\tconst str = encodeBase64(VSBuffer.fromString(e.message));\n\t\t\tif (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\treturn { statusCode: 404, body: str };\n\t\t\t} else {\n\t\t\t\treturn { statusCode: 500, body: str };\n\t\t\t}\n\t\t}\n\n\t\tconst mimeType = uri.path && getMediaOrTextMime(uri.path);\n\t\treturn { statusCode: 200, body: encodeBase64(content.value), mimeType };\n\t}\n\n\tpublic getResourceUriProvider() {\n\t\treturn (uri: URI) => uri.with({\n\t\t\tscheme: Schemas.vscodeManagedRemoteResource,\n\t\t\tauthority: `window:${this.windowId}`,\n\t\t\tquery: new URLSearchParams({ authority: uri.authority, scheme: uri.scheme }).toString(),\n\t\t});\n\t}\n}\n"]}