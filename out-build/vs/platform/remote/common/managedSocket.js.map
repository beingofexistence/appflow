{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/remote/common/managedSocket.ts"],"names":[],"mappings":"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","file":"managedSocket.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer, encodeBase64 } from 'vs/base/common/buffer';\nimport { Emitter, Event, PauseableEmitter } from 'vs/base/common/event';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { ISocket, SocketCloseEvent, SocketDiagnostics, SocketDiagnosticsEventType } from 'vs/base/parts/ipc/common/ipc.net';\n\nexport const makeRawSocketHeaders = (path: string, query: string, deubgLabel: string) => {\n\t// https://tools.ietf.org/html/rfc6455#section-4\n\tconst buffer = new Uint8Array(16);\n\tfor (let i = 0; i < 16; i++) {\n\t\tbuffer[i] = Math.round(Math.random() * 256);\n\t}\n\tconst nonce = encodeBase64(VSBuffer.wrap(buffer));\n\n\tconst headers = [\n\t\t`GET ws://localhost${path}?${query}&skipWebSocketFrames=true HTTP/1.1`,\n\t\t`Connection: Upgrade`,\n\t\t`Upgrade: websocket`,\n\t\t`Sec-WebSocket-Key: ${nonce}`\n\t];\n\n\treturn headers.join('\\r\\n') + '\\r\\n\\r\\n';\n};\n\nexport const socketRawEndHeaderSequence = VSBuffer.fromString('\\r\\n\\r\\n');\n\nexport interface RemoteSocketHalf {\n\tonData: Emitter<VSBuffer>;\n\tonClose: Emitter<SocketCloseEvent>;\n\tonEnd: Emitter<void>;\n}\n\n/** Should be called immediately after making a ManagedSocket to make it ready for data flow. */\nexport async function connectManagedSocket<T extends ManagedSocket>(\n\tsocket: T,\n\tpath: string, query: string, debugLabel: string,\n\thalf: RemoteSocketHalf\n): Promise<T> {\n\tsocket.write(VSBuffer.fromString(makeRawSocketHeaders(path, query, debugLabel)));\n\n\tconst d = new DisposableStore();\n\ttry {\n\t\treturn await new Promise<T>((resolve, reject) => {\n\t\t\tlet dataSoFar: VSBuffer | undefined;\n\t\t\td.add(socket.onData(d_1 => {\n\t\t\t\tif (!dataSoFar) {\n\t\t\t\t\tdataSoFar = d_1;\n\t\t\t\t} else {\n\t\t\t\t\tdataSoFar = VSBuffer.concat([dataSoFar, d_1], dataSoFar.byteLength + d_1.byteLength);\n\t\t\t\t}\n\n\t\t\t\tconst index = dataSoFar.indexOf(socketRawEndHeaderSequence);\n\t\t\t\tif (index === -1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(socket);\n\t\t\t\t// pause data events until the socket consumer is hooked up. We may\n\t\t\t\t// immediately emit remaining data, but if not there may still be\n\t\t\t\t// microtasks queued which would fire data into the abyss.\n\t\t\t\tsocket.pauseData();\n\n\t\t\t\tconst rest = dataSoFar.slice(index + socketRawEndHeaderSequence.byteLength);\n\t\t\t\tif (rest.byteLength) {\n\t\t\t\t\thalf.onData.fire(rest);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\td.add(socket.onClose(err => reject(err ?? new Error('socket closed'))));\n\t\t\td.add(socket.onEnd(() => reject(new Error('socket ended'))));\n\t\t});\n\t} catch (e) {\n\t\tsocket.dispose();\n\t\tthrow e;\n\t} finally {\n\t\td.dispose();\n\t}\n}\n\nexport abstract class ManagedSocket extends Disposable implements ISocket {\n\tprivate readonly pausableDataEmitter = this._register(new PauseableEmitter<VSBuffer>());\n\n\tpublic onData: Event<VSBuffer> = (...args) => {\n\t\tif (this.pausableDataEmitter.isPaused) {\n\t\t\tqueueMicrotask(() => this.pausableDataEmitter.resume());\n\t\t}\n\t\treturn this.pausableDataEmitter.event(...args);\n\t};\n\tpublic onClose: Event<SocketCloseEvent>;\n\tpublic onEnd: Event<void>;\n\n\tprivate readonly didDisposeEmitter = this._register(new Emitter<void>());\n\tpublic onDidDispose = this.didDisposeEmitter.event;\n\n\tprivate ended = false;\n\n\tprotected constructor(\n\t\tprivate readonly debugLabel: string,\n\t\thalf: RemoteSocketHalf,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(half.onData);\n\t\tthis._register(half.onData.event(data => this.pausableDataEmitter.fire(data)));\n\n\t\tthis.onClose = this._register(half.onClose).event;\n\t\tthis.onEnd = this._register(half.onEnd).event;\n\t}\n\n\t/** Pauses data events until a new listener comes in onData() */\n\tpublic pauseData() {\n\t\tthis.pausableDataEmitter.pause();\n\t}\n\n\t/** Flushes data to the socket. */\n\tpublic drain(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\t/** Ends the remote socket. */\n\tpublic end(): void {\n\t\tthis.ended = true;\n\t\tthis.closeRemote();\n\t}\n\n\tpublic abstract write(buffer: VSBuffer): void;\n\tprotected abstract closeRemote(): void;\n\n\ttraceSocketEvent(type: SocketDiagnosticsEventType, data?: any): void {\n\t\tSocketDiagnostics.traceSocketEvent(this, this.debugLabel, type, data);\n\t}\n\n\toverride dispose(): void {\n\t\tif (!this.ended) {\n\t\t\tthis.closeRemote();\n\t\t}\n\n\t\tthis.didDisposeEmitter.fire();\n\t\tsuper.dispose();\n\t}\n}\n"]}