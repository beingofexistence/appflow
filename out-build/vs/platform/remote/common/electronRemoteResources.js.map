{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/remote/common/electronRemoteResources.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKnF,QAAA,IAAI,GAAmC,SAAS,CAAC;IAEjD,QAAA,IAAI,GAAgC,uBAAuB,CAAC;IAIzE,MAAa,IAAI;QAChB,KAAK,CAAC,SAAS,CAAC,GAA2B,EAAE,OAAe,EAAE,GAAS;YACtE,IAAI,OAAO,KAAK,YAAI,EAAkC;gBACrD,MAAM,IAAI,KAAK,CAAC,mBAAmB,OAAO,EAAE,CAAC,CAAC;aAC9C;YAED,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAgC,CAAC;YAClD,IAAI,GAAG,EAAE,SAAS,EAAE;gBACnB,MAAM,UAAU,GAAG,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC;gBACtE,IAAI,UAAU,EAAE;oBACf,OAAO,UAAU,CAAC;iBAClB;aACD;YAED,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrC,CAAC;QAED,UAAU,CAAC,CAAyB,EAAE,KAAa;YAClD,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAC;QAC9C,CAAC;KACD;IApBD,oBAoBC","file":"electronRemoteResources.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { UriComponents } from 'vs/base/common/uri';\nimport { Client, IClientRouter, IConnectionHub } from 'vs/base/parts/ipc/common/ipc';\n\nexport const NODE_REMOTE_RESOURCE_IPC_METHOD_NAME = 'request';\n\nexport const NODE_REMOTE_RESOURCE_CHANNEL_NAME = 'remoteResourceHandler';\n\nexport type NodeRemoteResourceResponse = { body: /* base64 */ string; mimeType?: string; statusCode: number };\n\nexport class NodeRemoteResourceRouter implements IClientRouter<string> {\n\tasync routeCall(hub: IConnectionHub<string>, command: string, arg?: any): Promise<Client<string>> {\n\t\tif (command !== NODE_REMOTE_RESOURCE_IPC_METHOD_NAME) {\n\t\t\tthrow new Error(`Call not found: ${command}`);\n\t\t}\n\n\t\tconst uri = arg[0] as (UriComponents | undefined);\n\t\tif (uri?.authority) {\n\t\t\tconst connection = hub.connections.find(c => c.ctx === uri.authority);\n\t\t\tif (connection) {\n\t\t\t\treturn connection;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Caller not found`);\n\t}\n\n\trouteEvent(_: IConnectionHub<string>, event: string): Promise<Client<string>> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n}\n"]}