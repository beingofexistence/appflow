{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/remote/common/remoteSocketFactoryService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOnF,QAAA,GAAG,GAA2B,IAAA,mBAAG,EAA0C,4BAA4B,CAAC,CAAC;IAqBtH,MAAa,GAAG;QAAhB;YAGkB,MAAC,GAAkE,EAAE,CAAC;QAyBxF,CAAC;QAvBO,QAAQ,CAAiC,IAAO,EAAE,OAA0B;YAClF,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,KAAK,EAAE,CAAC;YAC5B,IAAI,CAAC,CAAC,CAAS,IAAI,CAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE;gBACxB,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;gBACnD,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,IAAI,CAAC,EAAE;oBACxC,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBACrC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,CAAC,CAAgD,cAAyC;YACjG,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC,CAAS,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,CAAwB,CAAC;YACrF,OAAO,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;QACpE,CAAC;QAEM,OAAO,CAAC,SAA2B,EAAE,IAAY,EAAE,KAAa,EAAE,UAAkB;YAC1F,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAgB,SAAS,CAAC,CAAC;YACvD,IAAI,CAAC,aAAa,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,+BAA+B,SAAS,EAAE,CAAC,CAAC;aAC5D;YACD,OAAO,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAClE,CAAC;KACD;IA5BD,kBA4BC","file":"remoteSocketFactoryService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ISocket } from 'vs/base/parts/ipc/common/ipc.net';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { RemoteConnectionOfType, RemoteConnectionType, RemoteConnection } from 'vs/platform/remote/common/remoteAuthorityResolver';\n\nexport const IRemoteSocketFactoryService = createDecorator<IRemoteSocketFactoryService>('remoteSocketFactoryService');\n\nexport interface IRemoteSocketFactoryService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Register a socket factory for the given message passing type\n\t * @param type passing type to register for\n\t * @param factory function that returns the socket factory, or undefined if\n\t * it can't handle the data.\n\t */\n\tregister<T extends RemoteConnectionType>(type: T, factory: ISocketFactory<T>): IDisposable;\n\n\tconnect(connectTo: RemoteConnection, path: string, query: string, debugLabel: string): Promise<ISocket>;\n}\n\nexport interface ISocketFactory<T extends RemoteConnectionType> {\n\tsupports(connectTo: RemoteConnectionOfType<T>): boolean;\n\tconnect(connectTo: RemoteConnectionOfType<T>, path: string, query: string, debugLabel: string): Promise<ISocket>;\n}\n\nexport class RemoteSocketFactoryService implements IRemoteSocketFactoryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly factories: { [T in RemoteConnectionType]?: ISocketFactory<T>[] } = {};\n\n\tpublic register<T extends RemoteConnectionType>(type: T, factory: ISocketFactory<T>): IDisposable {\n\t\tthis.factories[type] ??= [];\n\t\tthis.factories[type]!.push(factory);\n\t\treturn toDisposable(() => {\n\t\t\tconst idx = this.factories[type]?.indexOf(factory);\n\t\t\tif (typeof idx === 'number' && idx >= 0) {\n\t\t\t\tthis.factories[type]?.splice(idx, 1);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getSocketFactory<T extends RemoteConnectionType>(messagePassing: RemoteConnectionOfType<T>): ISocketFactory<T> | undefined {\n\t\tconst factories = (this.factories[messagePassing.type] || []) as ISocketFactory<T>[];\n\t\treturn factories.find(factory => factory.supports(messagePassing));\n\t}\n\n\tpublic connect(connectTo: RemoteConnection, path: string, query: string, debugLabel: string): Promise<ISocket> {\n\t\tconst socketFactory = this.getSocketFactory(connectTo);\n\t\tif (!socketFactory) {\n\t\t\tthrow new Error(`No socket factory found for ${connectTo}`);\n\t\t}\n\t\treturn socketFactory.connect(connectTo, path, query, debugLabel);\n\t}\n}\n"]}