{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/remote/common/sharedProcessTunnelService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKnF,QAAA,IAAI,GAA0B,IAAA,mBAAG,EAA0C,4BAA4B,CAAC,CAAC;IAEzG,QAAA,IAAI,GAAgC,qBAAqB,CAAC","file":"sharedProcessTunnelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IAddress } from 'vs/platform/remote/common/remoteAgentConnection';\n\nexport const ISharedProcessTunnelService = createDecorator<ISharedProcessTunnelService>('sharedProcessTunnelService');\n\nexport const ipcSharedProcessTunnelChannelName = 'sharedProcessTunnel';\n\nexport interface ISharedProcessTunnel {\n\ttunnelLocalPort: number | undefined;\n\tlocalAddress: string;\n}\n\n/**\n * A service that creates tunnels on the shared process\n */\nexport interface ISharedProcessTunnelService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Create a tunnel.\n\t */\n\tcreateTunnel(): Promise<{ id: string }>;\n\t/**\n\t * Start a previously created tunnel.\n\t * Can only be called once per created tunnel.\n\t */\n\tstartTunnel(authority: string, id: string, tunnelRemoteHost: string, tunnelRemotePort: number, tunnelLocalHost: string, tunnelLocalPort: number | undefined, elevateIfNeeded: boolean | undefined): Promise<ISharedProcessTunnel>;\n\t/**\n\t * Set the remote address info for a previously created tunnel.\n\t * Should be called as often as the resolver resolves.\n\t */\n\tsetAddress(id: string, address: IAddress): Promise<void>;\n\t/**\n\t * Destroy a previously created tunnel.\n\t */\n\tdestroyTunnel(id: string): Promise<void>;\n}\n"]}