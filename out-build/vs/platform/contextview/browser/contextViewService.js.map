{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/contextview/browser/contextViewService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOzF,IAAM,IAAI,GAAV,MAAM,IAAmB,SAAQ,eAAG;QAQ1C,YACiB,CAAmC;YAEnD,KAAK,EAAE,CAAC;YAFyB,MAAC,GAAD,CAAC,CAAiB;YAN5C,MAAC,GAAoC,eAAG,CAAQ,IAAI,CAAC;YAU5D,IAAI,CAAC,CAAC,GAAW,CAAC,CAAa,YAAY,CAAC,CAAC,CAAC,CAAC,CAAa,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;YAC7E,IAAI,CAAC,CAAC,GAAa,IAAI,CAAC,CAAC,CAAS,IAAI,iBAAG,CAAS,IAAI,CAAC,CAAC,0CAA0C,CAAC,CAAC;YACpG,IAAI,CAAC,MAAM,EAAE,CAAC;YAEd,IAAI,CAAC,CAAC,CAAS,CAAC,CAAa,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC;QAED,cAAc;QAEN,CAAC,CAAY,SAAsB,EAAE,WAAoC;YAChF,IAAI,CAAC,CAAC,CAAW,YAAY,CAAC,SAAS,EAAE,WAAW,2CAAmC,CAAC,CAAC;QAC1F,CAAC;QAED,eAAe,CAAC,QAA8B,EAAE,SAAuB,EAAE,UAAoB;YAC5F,IAAI,SAAS,EAAE;gBACd,IAAI,SAAS,KAAK,IAAI,CAAC,CAAC,IAAY,IAAI,CAAC,CAAC,KAAc,UAAU,EAAE;oBACnE,IAAI,CAAC,CAAC,GAAW,SAAS,CAAC;oBAC3B,IAAI,CAAC,CAAC,CAAY,SAAS,EAAE,UAAU,CAAC,CAAC,6CAAqC,CAAC,qCAA6B,CAAC,CAAC;iBAC9G;aACD;iBAAM;gBACN,IAAI,IAAI,CAAC,CAAC,CAAa,YAAY,IAAI,IAAI,CAAC,CAAC,KAAa,IAAI,CAAC,CAAC,CAAa,SAAS,EAAE;oBACvF,IAAI,CAAC,CAAC,GAAW,IAAI,CAAC,CAAC,CAAa,SAAS,CAAC;oBAC9C,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,CAAC,0CAA0C,CAAC;iBACnE;aACD;YAED,IAAI,CAAC,CAAC,GAAY,UAAU,CAAC;YAE7B,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEhC,MAAM,UAAU,GAAG,IAAA,eAAG,EAAU,GAAG,EAAE;gBACpC,IAAI,IAAI,CAAC,CAAC,KAAyB,UAAU,EAAE;oBAC9C,IAAI,CAAC,eAAe,EAAE,CAAC;iBACvB;YACF,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,CAAC,GAAuB,UAAU,CAAC;YACxC,OAAO,UAAU,CAAC;QACnB,CAAC;QAED,qBAAqB;YACpB,OAAO,IAAI,CAAC,CAAC,CAAW,cAAc,EAAE,CAAC;QAC1C,CAAC;QAED,MAAM;YACL,IAAI,CAAC,CAAC,CAAW,MAAM,EAAE,CAAC;QAC3B,CAAC;QAED,eAAe,CAAC,IAAU;YACzB,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC;KACD,CAAA;IAhEY,oBAAI;mBAAJ,IAAI;QASd,WAAA,mBAAG,CAAA;OATO,IAAI,CAgEhB","file":"contextViewService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ContextView, ContextViewDOMPosition } from 'vs/base/browser/ui/contextview/contextview';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { IContextViewDelegate, IContextViewService } from './contextView';\n\nexport class ContextViewService extends Disposable implements IContextViewService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate currentViewDisposable: IDisposable = Disposable.None;\n\tprivate contextView: ContextView;\n\tprivate container: HTMLElement | null;\n\tprivate shadowRoot: boolean | undefined;\n\n\tconstructor(\n\t\t@ILayoutService private readonly layoutService: ILayoutService\n\t) {\n\t\tsuper();\n\n\t\tthis.container = layoutService.hasContainer ? layoutService.container : null;\n\t\tthis.contextView = this._register(new ContextView(this.container, ContextViewDOMPosition.ABSOLUTE));\n\t\tthis.layout();\n\n\t\tthis._register(layoutService.onDidLayout(() => this.layout()));\n\t}\n\n\t// ContextView\n\n\tprivate setContainer(container: HTMLElement, domPosition?: ContextViewDOMPosition): void {\n\t\tthis.contextView.setContainer(container, domPosition || ContextViewDOMPosition.ABSOLUTE);\n\t}\n\n\tshowContextView(delegate: IContextViewDelegate, container?: HTMLElement, shadowRoot?: boolean): IDisposable {\n\t\tif (container) {\n\t\t\tif (container !== this.container || this.shadowRoot !== shadowRoot) {\n\t\t\t\tthis.container = container;\n\t\t\t\tthis.setContainer(container, shadowRoot ? ContextViewDOMPosition.FIXED_SHADOW : ContextViewDOMPosition.FIXED);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.layoutService.hasContainer && this.container !== this.layoutService.container) {\n\t\t\t\tthis.container = this.layoutService.container;\n\t\t\t\tthis.setContainer(this.container, ContextViewDOMPosition.ABSOLUTE);\n\t\t\t}\n\t\t}\n\n\t\tthis.shadowRoot = shadowRoot;\n\n\t\tthis.contextView.show(delegate);\n\n\t\tconst disposable = toDisposable(() => {\n\t\t\tif (this.currentViewDisposable === disposable) {\n\t\t\t\tthis.hideContextView();\n\t\t\t}\n\t\t});\n\n\t\tthis.currentViewDisposable = disposable;\n\t\treturn disposable;\n\t}\n\n\tgetContextViewElement(): HTMLElement {\n\t\treturn this.contextView.getViewElement();\n\t}\n\n\tlayout(): void {\n\t\tthis.contextView.layout();\n\t}\n\n\thideContextView(data?: any): void {\n\t\tthis.contextView.hide(data);\n\t}\n}\n"]}