{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionRecommendations/common/extensionRecommendationsIpc.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,IAAI;QAIhB,YAA6B,CAAiB;YAAjB,MAAC,GAAD,CAAC,CAAgB;QAAI,CAAC;QAEnD,IAAI,sBAAsB,KAAe,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAE5E,4CAA4C,CAAC,wBAAmD;YAC/F,OAAO,IAAI,CAAC,CAAC,CAAO,IAAI,CAAC,8CAA8C,EAAE,CAAC,wBAAwB,CAAC,CAAC,CAAC;QACtG,CAAC;QAED,8BAA8B,CAAC,eAAyB;YACvD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QAClC,CAAC;QAED,sCAAsC;YACrC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QAClC,CAAC;KAED;IApBD,oBAoBC;IAED,MAAa,IAAI;QAEhB,YAAoB,CAAa;YAAb,MAAC,GAAD,CAAC,CAAY;QAA2C,CAAC;QAE7E,MAAM,CAAC,CAAU,EAAE,KAAa;YAC/B,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,CAAC,CAAU,EAAE,OAAe,EAAE,IAAU;YAC3C,QAAQ,OAAO,EAAE;gBAChB,KAAK,8CAA8C,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAO,4CAA4C,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aAC/H;YAED,MAAM,IAAI,KAAK,CAAC,mBAAmB,OAAO,EAAE,CAAC,CAAC;QAC/C,CAAC;KACD;IAfD,oBAeC","file":"extensionRecommendationsIpc.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IExtensionRecommendationNotificationService, IExtensionRecommendations, RecommendationsNotificationResult } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\n\nexport class ExtensionRecommendationNotificationServiceChannelClient implements IExtensionRecommendationNotificationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private readonly channel: IChannel) { }\n\n\tget ignoredRecommendations(): string[] { throw new Error('not supported'); }\n\n\tpromptImportantExtensionsInstallNotification(extensionRecommendations: IExtensionRecommendations): Promise<RecommendationsNotificationResult> {\n\t\treturn this.channel.call('promptImportantExtensionsInstallNotification', [extensionRecommendations]);\n\t}\n\n\tpromptWorkspaceRecommendations(recommendations: string[]): Promise<void> {\n\t\tthrow new Error('not supported');\n\t}\n\n\thasToIgnoreRecommendationNotifications(): boolean {\n\t\tthrow new Error('not supported');\n\t}\n\n}\n\nexport class ExtensionRecommendationNotificationServiceChannel implements IServerChannel {\n\n\tconstructor(private service: IExtensionRecommendationNotificationService) { }\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, args?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'promptImportantExtensionsInstallNotification': return this.service.promptImportantExtensionsInstallNotification(args[0]);\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n"]}