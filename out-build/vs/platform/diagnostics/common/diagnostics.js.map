{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/diagnostics/common/diagnostics.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQnF,QAAA,EAAE,GAAG,oBAAoB,CAAC;IAC1B,QAAA,GAAG,GAAmB,IAAA,mBAAG,EAAkC,UAAE,CAAC,CAAC;IAkF5E,SAAgB,GAAG,CAAqB,CAAM;QAC7C,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;IACzC,CAAC;IAFD,kBAEC;IAED,MAAa,GAAG;QAGf,KAAK,CAAC,kBAAkB,CAAC,eAAwC,EAAE,UAA8D;YAChI,OAAO,EAAE,CAAC;QACX,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,eAAwC,EAAE,UAA8D;YAC3H,OAAO;gBACN,WAAW,EAAE,iBAAiB;gBAC9B,SAAS,EAAE,eAAe;gBAC1B,YAAY,EAAE,kBAAkB;gBAChC,UAAU,EAAE,EAAE;gBACd,EAAE,EAAE,QAAQ;gBACZ,MAAM,EAAE,YAAY;gBACpB,MAAM,EAAE,YAAY;aACpB,CAAC;QACH,CAAC;QAED,KAAK,CAAC,cAAc,CAAC,eAAwC,EAAE,UAA8D;YAC5H,OAAO,EAAE,CAAC;QACX,CAAC;QAED,KAAK,CAAC,0BAA0B,CAAC,SAAqB;YACrD,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;QAC3B,CAAC;QAED,KAAK,CAAC,oBAAoB,CAAC,SAAgC,IAAmB,CAAC;KAE/E;IA7BD,kBA6BC","file":"diagnostics.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { ProcessItem } from 'vs/base/common/processes';\nimport { UriComponents } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspace } from 'vs/platform/workspace/common/workspace';\n\nexport const ID = 'diagnosticsService';\nexport const IDiagnosticsService = createDecorator<IDiagnosticsService>(ID);\n\nexport interface IDiagnosticsService {\n\treadonly _serviceBrand: undefined;\n\n\tgetPerformanceInfo(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<PerformanceInfo>;\n\tgetSystemInfo(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<SystemInfo>;\n\tgetDiagnostics(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<string>;\n\tgetWorkspaceFileExtensions(workspace: IWorkspace): Promise<{ extensions: string[] }>;\n\treportWorkspaceStats(workspace: IWorkspaceInformation): Promise<void>;\n}\n\nexport interface IMachineInfo {\n\tos: string;\n\tcpus?: string;\n\tmemory: string;\n\tvmHint: string;\n\tlinuxEnv?: ILinuxEnv;\n}\n\nexport interface ILinuxEnv {\n\tdesktopSession?: string;\n\txdgSessionDesktop?: string;\n\txdgCurrentDesktop?: string;\n\txdgSessionType?: string;\n}\n\nexport interface IDiagnosticInfo {\n\tmachineInfo: IMachineInfo;\n\tworkspaceMetadata?: IStringDictionary<WorkspaceStats>;\n\tprocesses?: ProcessItem;\n}\nexport interface SystemInfo extends IMachineInfo {\n\tprocessArgs: string;\n\tgpuStatus: any;\n\tscreenReader: string;\n\tremoteData: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[];\n\tload?: string;\n}\n\nexport interface IRemoteDiagnosticInfo extends IDiagnosticInfo {\n\thostName: string;\n\tlatency?: {\n\t\tcurrent: number;\n\t\taverage: number;\n\t};\n}\n\nexport interface IRemoteDiagnosticError {\n\thostName: string;\n\terrorMessage: string;\n}\n\nexport interface IDiagnosticInfoOptions {\n\tincludeProcesses?: boolean;\n\tfolders?: UriComponents[];\n\tincludeExtensions?: boolean;\n}\n\nexport interface WorkspaceStatItem {\n\tname: string;\n\tcount: number;\n}\n\nexport interface WorkspaceStats {\n\tfileTypes: WorkspaceStatItem[];\n\tconfigFiles: WorkspaceStatItem[];\n\tfileCount: number;\n\tmaxFilesReached: boolean;\n\tlaunchConfigFiles: WorkspaceStatItem[];\n}\n\nexport interface PerformanceInfo {\n\tprocessInfo?: string;\n\tworkspaceInfo?: string;\n}\n\nexport interface IWorkspaceInformation extends IWorkspace {\n\ttelemetryId: string | undefined;\n\trendererSessionId: string;\n}\n\nexport function isRemoteDiagnosticError(x: any): x is IRemoteDiagnosticError {\n\treturn !!x.hostName && !!x.errorMessage;\n}\n\nexport class NullDiagnosticsService implements IDiagnosticsService {\n\t_serviceBrand: undefined;\n\n\tasync getPerformanceInfo(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<PerformanceInfo> {\n\t\treturn {};\n\t}\n\n\tasync getSystemInfo(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<SystemInfo> {\n\t\treturn {\n\t\t\tprocessArgs: 'nullProcessArgs',\n\t\t\tgpuStatus: 'nullGpuStatus',\n\t\t\tscreenReader: 'nullScreenReader',\n\t\t\tremoteData: [],\n\t\t\tos: 'nullOs',\n\t\t\tmemory: 'nullMemory',\n\t\t\tvmHint: 'nullVmHint',\n\t\t};\n\t}\n\n\tasync getDiagnostics(mainProcessInfo: IMainProcessDiagnostics, remoteInfo: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<string> {\n\t\treturn '';\n\t}\n\n\tasync getWorkspaceFileExtensions(workspace: IWorkspace): Promise<{ extensions: string[] }> {\n\t\treturn { extensions: [] };\n\t}\n\n\tasync reportWorkspaceStats(workspace: IWorkspaceInformation): Promise<void> { }\n\n}\n\nexport interface IWindowDiagnostics {\n\treadonly id: number;\n\treadonly pid: number;\n\treadonly title: string;\n\treadonly folderURIs: UriComponents[];\n\treadonly remoteAuthority?: string;\n}\n\nexport interface IProcessDiagnostics {\n\treadonly pid: number;\n\treadonly name: string;\n}\n\nexport interface IMainProcessDiagnostics {\n\treadonly mainPID: number;\n\treadonly mainArguments: string[]; // All arguments after argv[0], the exec path\n\treadonly windows: IWindowDiagnostics[];\n\treadonly pidToNames: IProcessDiagnostics[];\n\treadonly screenReader: boolean;\n\treadonly gpuFeatureStatus: any;\n}\n"]}