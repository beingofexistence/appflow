{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/diagnostics/node/diagnosticsService.ts"],"names":[],"mappings":"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","file":"diagnosticsService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as osLib from 'os';\nimport { Promises } from 'vs/base/common/async';\nimport { getNodeType, parse, ParseError } from 'vs/base/common/json';\nimport { Schemas } from 'vs/base/common/network';\nimport { basename, join } from 'vs/base/common/path';\nimport { isLinux, isWindows } from 'vs/base/common/platform';\nimport { ProcessItem } from 'vs/base/common/processes';\nimport { URI } from 'vs/base/common/uri';\nimport { virtualMachineHint } from 'vs/base/node/id';\nimport { IDirent, Promises as pfs } from 'vs/base/node/pfs';\nimport { listProcesses } from 'vs/base/node/ps';\nimport { IDiagnosticsService, IMachineInfo, IMainProcessDiagnostics, IRemoteDiagnosticError, IRemoteDiagnosticInfo, isRemoteDiagnosticError, IWorkspaceInformation, PerformanceInfo, SystemInfo, WorkspaceStatItem, WorkspaceStats } from 'vs/platform/diagnostics/common/diagnostics';\nimport { ByteSize } from 'vs/platform/files/common/files';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspace } from 'vs/platform/workspace/common/workspace';\n\ninterface ConfigFilePatterns {\n\ttag: string;\n\tfilePattern: RegExp;\n\trelativePathPattern?: RegExp;\n}\n\nconst worksapceStatsCache = new Map<string, Promise<WorkspaceStats>>();\nexport async function collectWorkspaceStats(folder: string, filter: string[]): Promise<WorkspaceStats> {\n\tconst cacheKey = `${folder}::${filter.join(':')}`;\n\tconst cached = worksapceStatsCache.get(cacheKey);\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tconst configFilePatterns: ConfigFilePatterns[] = [\n\t\t{ tag: 'grunt.js', filePattern: /^gruntfile\\.js$/i },\n\t\t{ tag: 'gulp.js', filePattern: /^gulpfile\\.js$/i },\n\t\t{ tag: 'tsconfig.json', filePattern: /^tsconfig\\.json$/i },\n\t\t{ tag: 'package.json', filePattern: /^package\\.json$/i },\n\t\t{ tag: 'jsconfig.json', filePattern: /^jsconfig\\.json$/i },\n\t\t{ tag: 'tslint.json', filePattern: /^tslint\\.json$/i },\n\t\t{ tag: 'eslint.json', filePattern: /^eslint\\.json$/i },\n\t\t{ tag: 'tasks.json', filePattern: /^tasks\\.json$/i },\n\t\t{ tag: 'launch.json', filePattern: /^launch\\.json$/i },\n\t\t{ tag: 'settings.json', filePattern: /^settings\\.json$/i },\n\t\t{ tag: 'webpack.config.js', filePattern: /^webpack\\.config\\.js$/i },\n\t\t{ tag: 'project.json', filePattern: /^project\\.json$/i },\n\t\t{ tag: 'makefile', filePattern: /^makefile$/i },\n\t\t{ tag: 'sln', filePattern: /^.+\\.sln$/i },\n\t\t{ tag: 'csproj', filePattern: /^.+\\.csproj$/i },\n\t\t{ tag: 'cmake', filePattern: /^.+\\.cmake$/i },\n\t\t{ tag: 'github-actions', filePattern: /^.+\\.ya?ml$/i, relativePathPattern: /^\\.github(?:\\/|\\\\)workflows$/i },\n\t\t{ tag: 'devcontainer.json', filePattern: /^devcontainer\\.json$/i },\n\t\t{ tag: 'dockerfile', filePattern: /^(dockerfile|docker\\-compose\\.ya?ml)$/i }\n\t];\n\n\tconst fileTypes = new Map<string, number>();\n\tconst configFiles = new Map<string, number>();\n\n\tconst MAX_FILES = 20000;\n\n\tfunction collect(root: string, dir: string, filter: string[], token: { count: number; maxReached: boolean }): Promise<void> {\n\t\tconst relativePath = dir.substring(root.length + 1);\n\n\t\treturn Promises.withAsyncBody(async resolve => {\n\t\t\tlet files: IDirent[];\n\t\t\ttry {\n\t\t\t\tfiles = await pfs.readdir(dir, { withFileTypes: true });\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore folders that can't be read\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (token.count >= MAX_FILES) {\n\t\t\t\ttoken.count += files.length;\n\t\t\t\ttoken.maxReached = true;\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet pending = files.length;\n\t\t\tif (pending === 0) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet filesToRead = files;\n\t\t\tif (token.count + files.length > MAX_FILES) {\n\t\t\t\ttoken.maxReached = true;\n\t\t\t\tpending = MAX_FILES - token.count;\n\t\t\t\tfilesToRead = files.slice(0, pending);\n\t\t\t}\n\n\t\t\ttoken.count += files.length;\n\n\t\t\tfor (const file of filesToRead) {\n\t\t\t\tif (file.isDirectory()) {\n\t\t\t\t\tif (!filter.includes(file.name)) {\n\t\t\t\t\t\tawait collect(root, join(dir, file.name), filter, token);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (--pending === 0) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst index = file.name.lastIndexOf('.');\n\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\tconst fileType = file.name.substring(index + 1);\n\t\t\t\t\t\tif (fileType) {\n\t\t\t\t\t\t\tfileTypes.set(fileType, (fileTypes.get(fileType) ?? 0) + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const configFile of configFilePatterns) {\n\t\t\t\t\t\tif (configFile.relativePathPattern?.test(relativePath) !== false && configFile.filePattern.test(file.name)) {\n\t\t\t\t\t\t\tconfigFiles.set(configFile.tag, (configFiles.get(configFile.tag) ?? 0) + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (--pending === 0) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tconst statsPromise = Promises.withAsyncBody<WorkspaceStats>(async (resolve) => {\n\t\tconst token: { count: number; maxReached: boolean } = { count: 0, maxReached: false };\n\n\t\tawait collect(folder, folder, filter, token);\n\t\tconst launchConfigs = await collectLaunchConfigs(folder);\n\t\tresolve({\n\t\t\tconfigFiles: asSortedItems(configFiles),\n\t\t\tfileTypes: asSortedItems(fileTypes),\n\t\t\tfileCount: token.count,\n\t\t\tmaxFilesReached: token.maxReached,\n\t\t\tlaunchConfigFiles: launchConfigs\n\t\t});\n\t});\n\n\tworksapceStatsCache.set(cacheKey, statsPromise);\n\treturn statsPromise;\n}\n\nfunction asSortedItems(items: Map<string, number>): WorkspaceStatItem[] {\n\treturn Array.from(items.entries(), ([name, count]) => ({ name: name, count: count }))\n\t\t.sort((a, b) => b.count - a.count);\n}\n\nexport function getMachineInfo(): IMachineInfo {\n\n\tconst machineInfo: IMachineInfo = {\n\t\tos: `${osLib.type()} ${osLib.arch()} ${osLib.release()}`,\n\t\tmemory: `${(osLib.totalmem() / ByteSize.GB).toFixed(2)}GB (${(osLib.freemem() / ByteSize.GB).toFixed(2)}GB free)`,\n\t\tvmHint: `${Math.round((virtualMachineHint.value() * 100))}%`,\n\t};\n\n\tconst cpus = osLib.cpus();\n\tif (cpus && cpus.length > 0) {\n\t\tmachineInfo.cpus = `${cpus[0].model} (${cpus.length} x ${cpus[0].speed})`;\n\t}\n\n\treturn machineInfo;\n}\n\nexport async function collectLaunchConfigs(folder: string): Promise<WorkspaceStatItem[]> {\n\ttry {\n\t\tconst launchConfigs = new Map<string, number>();\n\t\tconst launchConfig = join(folder, '.vscode', 'launch.json');\n\n\t\tconst contents = await pfs.readFile(launchConfig);\n\n\t\tconst errors: ParseError[] = [];\n\t\tconst json = parse(contents.toString(), errors);\n\t\tif (errors.length) {\n\t\t\tconsole.log(`Unable to parse ${launchConfig}`);\n\t\t\treturn [];\n\t\t}\n\n\t\tif (getNodeType(json) === 'object' && json['configurations']) {\n\t\t\tfor (const each of json['configurations']) {\n\t\t\t\tconst type = each['type'];\n\t\t\t\tif (type) {\n\t\t\t\t\tif (launchConfigs.has(type)) {\n\t\t\t\t\t\tlaunchConfigs.set(type, launchConfigs.get(type)! + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlaunchConfigs.set(type, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn asSortedItems(launchConfigs);\n\t} catch (error) {\n\t\treturn [];\n\t}\n}\n\nexport class DiagnosticsService implements IDiagnosticsService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tprivate formatMachineInfo(info: IMachineInfo): string {\n\t\tconst output: string[] = [];\n\t\toutput.push(`OS Version:       ${info.os}`);\n\t\toutput.push(`CPUs:             ${info.cpus}`);\n\t\toutput.push(`Memory (System):  ${info.memory}`);\n\t\toutput.push(`VM:               ${info.vmHint}`);\n\n\t\treturn output.join('\\n');\n\t}\n\n\tprivate formatEnvironment(info: IMainProcessDiagnostics): string {\n\t\tconst output: string[] = [];\n\t\toutput.push(`Version:          ${this.productService.nameShort} ${this.productService.version} (${this.productService.commit || 'Commit unknown'}, ${this.productService.date || 'Date unknown'})`);\n\t\toutput.push(`OS Version:       ${osLib.type()} ${osLib.arch()} ${osLib.release()}`);\n\t\tconst cpus = osLib.cpus();\n\t\tif (cpus && cpus.length > 0) {\n\t\t\toutput.push(`CPUs:             ${cpus[0].model} (${cpus.length} x ${cpus[0].speed})`);\n\t\t}\n\t\toutput.push(`Memory (System):  ${(osLib.totalmem() / ByteSize.GB).toFixed(2)}GB (${(osLib.freemem() / ByteSize.GB).toFixed(2)}GB free)`);\n\t\tif (!isWindows) {\n\t\t\toutput.push(`Load (avg):       ${osLib.loadavg().map(l => Math.round(l)).join(', ')}`); // only provided on Linux/macOS\n\t\t}\n\t\toutput.push(`VM:               ${Math.round((virtualMachineHint.value() * 100))}%`);\n\t\toutput.push(`Screen Reader:    ${info.screenReader ? 'yes' : 'no'}`);\n\t\toutput.push(`Process Argv:     ${info.mainArguments.join(' ')}`);\n\t\toutput.push(`GPU Status:       ${this.expandGPUFeatures(info.gpuFeatureStatus)}`);\n\n\t\treturn output.join('\\n');\n\t}\n\n\tpublic async getPerformanceInfo(info: IMainProcessDiagnostics, remoteData: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<PerformanceInfo> {\n\t\treturn Promise.all([listProcesses(info.mainPID), this.formatWorkspaceMetadata(info)]).then(async result => {\n\t\t\tlet [rootProcess, workspaceInfo] = result;\n\t\t\tlet processInfo = this.formatProcessList(info, rootProcess);\n\n\t\t\tremoteData.forEach(diagnostics => {\n\t\t\t\tif (isRemoteDiagnosticError(diagnostics)) {\n\t\t\t\t\tprocessInfo += `\\n${diagnostics.errorMessage}`;\n\t\t\t\t\tworkspaceInfo += `\\n${diagnostics.errorMessage}`;\n\t\t\t\t} else {\n\t\t\t\t\tprocessInfo += `\\n\\nRemote: ${diagnostics.hostName}`;\n\t\t\t\t\tif (diagnostics.processes) {\n\t\t\t\t\t\tprocessInfo += `\\n${this.formatProcessList(info, diagnostics.processes)}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diagnostics.workspaceMetadata) {\n\t\t\t\t\t\tworkspaceInfo += `\\n|  Remote: ${diagnostics.hostName}`;\n\t\t\t\t\t\tfor (const folder of Object.keys(diagnostics.workspaceMetadata)) {\n\t\t\t\t\t\t\tconst metadata = diagnostics.workspaceMetadata[folder];\n\n\t\t\t\t\t\t\tlet countMessage = `${metadata.fileCount} files`;\n\t\t\t\t\t\t\tif (metadata.maxFilesReached) {\n\t\t\t\t\t\t\t\tcountMessage = `more than ${countMessage}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tworkspaceInfo += `|    Folder (${folder}): ${countMessage}`;\n\t\t\t\t\t\t\tworkspaceInfo += this.formatWorkspaceStats(metadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tprocessInfo,\n\t\t\t\tworkspaceInfo\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic async getSystemInfo(info: IMainProcessDiagnostics, remoteData: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<SystemInfo> {\n\t\tconst { memory, vmHint, os, cpus } = getMachineInfo();\n\t\tconst systemInfo: SystemInfo = {\n\t\t\tos,\n\t\t\tmemory,\n\t\t\tcpus,\n\t\t\tvmHint,\n\t\t\tprocessArgs: `${info.mainArguments.join(' ')}`,\n\t\t\tgpuStatus: info.gpuFeatureStatus,\n\t\t\tscreenReader: `${info.screenReader ? 'yes' : 'no'}`,\n\t\t\tremoteData\n\t\t};\n\n\t\tif (!isWindows) {\n\t\t\tsystemInfo.load = `${osLib.loadavg().map(l => Math.round(l)).join(', ')}`;\n\t\t}\n\n\t\tif (isLinux) {\n\t\t\tsystemInfo.linuxEnv = {\n\t\t\t\tdesktopSession: process.env['DESKTOP_SESSION'],\n\t\t\t\txdgSessionDesktop: process.env['XDG_SESSION_DESKTOP'],\n\t\t\t\txdgCurrentDesktop: process.env['XDG_CURRENT_DESKTOP'],\n\t\t\t\txdgSessionType: process.env['XDG_SESSION_TYPE']\n\t\t\t};\n\t\t}\n\n\t\treturn Promise.resolve(systemInfo);\n\t}\n\n\tpublic async getDiagnostics(info: IMainProcessDiagnostics, remoteDiagnostics: (IRemoteDiagnosticInfo | IRemoteDiagnosticError)[]): Promise<string> {\n\t\tconst output: string[] = [];\n\t\treturn listProcesses(info.mainPID).then(async rootProcess => {\n\n\t\t\t// Environment Info\n\t\t\toutput.push('');\n\t\t\toutput.push(this.formatEnvironment(info));\n\n\t\t\t// Process List\n\t\t\toutput.push('');\n\t\t\toutput.push(this.formatProcessList(info, rootProcess));\n\n\t\t\t// Workspace Stats\n\t\t\tif (info.windows.some(window => window.folderURIs && window.folderURIs.length > 0 && !window.remoteAuthority)) {\n\t\t\t\toutput.push('');\n\t\t\t\toutput.push('Workspace Stats: ');\n\t\t\t\toutput.push(await this.formatWorkspaceMetadata(info));\n\t\t\t}\n\n\t\t\tremoteDiagnostics.forEach(diagnostics => {\n\t\t\t\tif (isRemoteDiagnosticError(diagnostics)) {\n\t\t\t\t\toutput.push(`\\n${diagnostics.errorMessage}`);\n\t\t\t\t} else {\n\t\t\t\t\toutput.push('\\n\\n');\n\t\t\t\t\toutput.push(`Remote:           ${diagnostics.hostName}`);\n\t\t\t\t\toutput.push(this.formatMachineInfo(diagnostics.machineInfo));\n\n\t\t\t\t\tif (diagnostics.processes) {\n\t\t\t\t\t\toutput.push(this.formatProcessList(info, diagnostics.processes));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diagnostics.workspaceMetadata) {\n\t\t\t\t\t\tfor (const folder of Object.keys(diagnostics.workspaceMetadata)) {\n\t\t\t\t\t\t\tconst metadata = diagnostics.workspaceMetadata[folder];\n\n\t\t\t\t\t\t\tlet countMessage = `${metadata.fileCount} files`;\n\t\t\t\t\t\t\tif (metadata.maxFilesReached) {\n\t\t\t\t\t\t\t\tcountMessage = `more than ${countMessage}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\toutput.push(`Folder (${folder}): ${countMessage}`);\n\t\t\t\t\t\t\toutput.push(this.formatWorkspaceStats(metadata));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\toutput.push('');\n\t\t\toutput.push('');\n\n\t\t\treturn output.join('\\n');\n\t\t});\n\t}\n\n\tprivate formatWorkspaceStats(workspaceStats: WorkspaceStats): string {\n\t\tconst output: string[] = [];\n\t\tconst lineLength = 60;\n\t\tlet col = 0;\n\n\t\tconst appendAndWrap = (name: string, count: number) => {\n\t\t\tconst item = ` ${name}(${count})`;\n\n\t\t\tif (col + item.length > lineLength) {\n\t\t\t\toutput.push(line);\n\t\t\t\tline = '|                 ';\n\t\t\t\tcol = line.length;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcol += item.length;\n\t\t\t}\n\t\t\tline += item;\n\t\t};\n\n\t\t// File Types\n\t\tlet line = '|      File types:';\n\t\tconst maxShown = 10;\n\t\tconst max = workspaceStats.fileTypes.length > maxShown ? maxShown : workspaceStats.fileTypes.length;\n\t\tfor (let i = 0; i < max; i++) {\n\t\t\tconst item = workspaceStats.fileTypes[i];\n\t\t\tappendAndWrap(item.name, item.count);\n\t\t}\n\t\toutput.push(line);\n\n\t\t// Conf Files\n\t\tif (workspaceStats.configFiles.length >= 0) {\n\t\t\tline = '|      Conf files:';\n\t\t\tcol = 0;\n\t\t\tworkspaceStats.configFiles.forEach((item) => {\n\t\t\t\tappendAndWrap(item.name, item.count);\n\t\t\t});\n\t\t\toutput.push(line);\n\t\t}\n\n\t\tif (workspaceStats.launchConfigFiles.length > 0) {\n\t\t\tlet line = '|      Launch Configs:';\n\t\t\tworkspaceStats.launchConfigFiles.forEach(each => {\n\t\t\t\tconst item = each.count > 1 ? ` ${each.name}(${each.count})` : ` ${each.name}`;\n\t\t\t\tline += item;\n\t\t\t});\n\t\t\toutput.push(line);\n\t\t}\n\t\treturn output.join('\\n');\n\t}\n\n\tprivate expandGPUFeatures(gpuFeatures: any): string {\n\t\tconst longestFeatureName = Math.max(...Object.keys(gpuFeatures).map(feature => feature.length));\n\t\t// Make columns aligned by adding spaces after feature name\n\t\treturn Object.keys(gpuFeatures).map(feature => `${feature}:  ${' '.repeat(longestFeatureName - feature.length)}  ${gpuFeatures[feature]}`).join('\\n                  ');\n\t}\n\n\tprivate formatWorkspaceMetadata(info: IMainProcessDiagnostics): Promise<string> {\n\t\tconst output: string[] = [];\n\t\tconst workspaceStatPromises: Promise<void>[] = [];\n\n\t\tinfo.windows.forEach(window => {\n\t\t\tif (window.folderURIs.length === 0 || !!window.remoteAuthority) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toutput.push(`|  Window (${window.title})`);\n\n\t\t\twindow.folderURIs.forEach(uriComponents => {\n\t\t\t\tconst folderUri = URI.revive(uriComponents);\n\t\t\t\tif (folderUri.scheme === Schemas.file) {\n\t\t\t\t\tconst folder = folderUri.fsPath;\n\t\t\t\t\tworkspaceStatPromises.push(collectWorkspaceStats(folder, ['node_modules', '.git']).then(stats => {\n\t\t\t\t\t\tlet countMessage = `${stats.fileCount} files`;\n\t\t\t\t\t\tif (stats.maxFilesReached) {\n\t\t\t\t\t\t\tcountMessage = `more than ${countMessage}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutput.push(`|    Folder (${basename(folder)}): ${countMessage}`);\n\t\t\t\t\t\toutput.push(this.formatWorkspaceStats(stats));\n\n\t\t\t\t\t}).catch(error => {\n\t\t\t\t\t\toutput.push(`|      Error: Unable to collect workspace stats for folder ${folder} (${error.toString()})`);\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(`|    Folder (${folderUri.toString()}): Workspace stats not available.`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn Promise.all(workspaceStatPromises)\n\t\t\t.then(_ => output.join('\\n'))\n\t\t\t.catch(e => `Unable to collect workspace stats: ${e}`);\n\t}\n\n\tprivate formatProcessList(info: IMainProcessDiagnostics, rootProcess: ProcessItem): string {\n\t\tconst mapProcessToName = new Map<number, string>();\n\t\tinfo.windows.forEach(window => mapProcessToName.set(window.pid, `window [${window.id}] (${window.title})`));\n\t\tinfo.pidToNames.forEach(({ pid, name }) => mapProcessToName.set(pid, name));\n\n\t\tconst output: string[] = [];\n\n\t\toutput.push('CPU %\\tMem MB\\t   PID\\tProcess');\n\n\t\tif (rootProcess) {\n\t\t\tthis.formatProcessItem(info.mainPID, mapProcessToName, output, rootProcess, 0);\n\t\t}\n\n\t\treturn output.join('\\n');\n\t}\n\n\tprivate formatProcessItem(mainPid: number, mapProcessToName: Map<number, string>, output: string[], item: ProcessItem, indent: number): void {\n\t\tconst isRoot = (indent === 0);\n\n\t\t// Format name with indent\n\t\tlet name: string;\n\t\tif (isRoot) {\n\t\t\tname = item.pid === mainPid ? `${this.productService.applicationName} main` : 'remote agent';\n\t\t} else {\n\t\t\tif (mapProcessToName.has(item.pid)) {\n\t\t\t\tname = mapProcessToName.get(item.pid)!;\n\t\t\t} else {\n\t\t\t\tname = `${'  '.repeat(indent)} ${item.name}`;\n\t\t\t}\n\t\t}\n\n\t\tconst memory = process.platform === 'win32' ? item.mem : (osLib.totalmem() * (item.mem / 100));\n\t\toutput.push(`${item.load.toFixed(0).padStart(5, ' ')}\\t${(memory / ByteSize.MB).toFixed(0).padStart(6, ' ')}\\t${item.pid.toFixed(0).padStart(6, ' ')}\\t${name}`);\n\n\t\t// Recurse into children if any\n\t\tif (Array.isArray(item.children)) {\n\t\t\titem.children.forEach(child => this.formatProcessItem(mainPid, mapProcessToName, output, child, indent + 1));\n\t\t}\n\t}\n\n\tpublic async getWorkspaceFileExtensions(workspace: IWorkspace): Promise<{ extensions: string[] }> {\n\t\tconst items = new Set<string>();\n\t\tfor (const { uri } of workspace.folders) {\n\t\t\tconst folderUri = URI.revive(uri);\n\t\t\tif (folderUri.scheme !== Schemas.file) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst folder = folderUri.fsPath;\n\t\t\ttry {\n\t\t\t\tconst stats = await collectWorkspaceStats(folder, ['node_modules', '.git']);\n\t\t\t\tstats.fileTypes.forEach(item => items.add(item.name));\n\t\t\t} catch { }\n\t\t}\n\t\treturn { extensions: [...items] };\n\t}\n\n\tpublic async reportWorkspaceStats(workspace: IWorkspaceInformation): Promise<void> {\n\t\tfor (const { uri } of workspace.folders) {\n\t\t\tconst folderUri = URI.revive(uri);\n\t\t\tif (folderUri.scheme !== Schemas.file) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst folder = folderUri.fsPath;\n\t\t\ttry {\n\t\t\t\tconst stats = await collectWorkspaceStats(folder, ['node_modules', '.git']);\n\t\t\t\ttype WorkspaceStatsClassification = {\n\t\t\t\t\towner: 'lramos15';\n\t\t\t\t\tcomment: 'Metadata related to the workspace';\n\t\t\t\t\t'workspace.id': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A UUID given to a workspace to identify it.' };\n\t\t\t\t\trendererSessionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the session' };\n\t\t\t\t};\n\t\t\t\ttype WorkspaceStatsEvent = {\n\t\t\t\t\t'workspace.id': string | undefined;\n\t\t\t\t\trendererSessionId: string;\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<WorkspaceStatsEvent, WorkspaceStatsClassification>('workspace.stats', {\n\t\t\t\t\t'workspace.id': workspace.telemetryId,\n\t\t\t\t\trendererSessionId: workspace.rendererSessionId\n\t\t\t\t});\n\t\t\t\ttype WorkspaceStatsFileClassification = {\n\t\t\t\t\towner: 'lramos15';\n\t\t\t\t\tcomment: 'Helps us gain insights into what type of files are being used in a workspace';\n\t\t\t\t\trendererSessionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The ID of the session.' };\n\t\t\t\t\ttype: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The type of file' };\n\t\t\t\t\tcount: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'How many types of that file are present' };\n\t\t\t\t};\n\t\t\t\ttype WorkspaceStatsFileEvent = {\n\t\t\t\t\trendererSessionId: string;\n\t\t\t\t\ttype: string;\n\t\t\t\t\tcount: number;\n\t\t\t\t};\n\t\t\t\tstats.fileTypes.forEach(e => {\n\t\t\t\t\tthis.telemetryService.publicLog2<WorkspaceStatsFileEvent, WorkspaceStatsFileClassification>('workspace.stats.file', {\n\t\t\t\t\t\trendererSessionId: workspace.rendererSessionId,\n\t\t\t\t\t\ttype: e.name,\n\t\t\t\t\t\tcount: e.count\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tstats.launchConfigFiles.forEach(e => {\n\t\t\t\t\tthis.telemetryService.publicLog2<WorkspaceStatsFileEvent, WorkspaceStatsFileClassification>('workspace.stats.launchConfigFile', {\n\t\t\t\t\t\trendererSessionId: workspace.rendererSessionId,\n\t\t\t\t\t\ttype: e.name,\n\t\t\t\t\t\tcount: e.count\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tstats.configFiles.forEach(e => {\n\t\t\t\t\tthis.telemetryService.publicLog2<WorkspaceStatsFileEvent, WorkspaceStatsFileClassification>('workspace.stats.configFiles', {\n\t\t\t\t\t\trendererSessionId: workspace.rendererSessionId,\n\t\t\t\t\t\ttype: e.name,\n\t\t\t\t\t\tcount: e.count\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} catch {\n\t\t\t\t// Report nothing if collecting metadata fails.\n\t\t\t}\n\t\t}\n\t}\n}\n"]}