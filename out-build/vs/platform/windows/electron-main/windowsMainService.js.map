{"version":3,"sources":["vs/platform/windows/electron-main/windowsMainService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAoKhG,SAAS,qBAAqB,CAAC,IAA6B;QAC3D,OAAO,IAAA,eAAG,EAAmB,IAAI,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC;IAED,SAAS,iCAAiC,CAAC,IAA6B;QACvE,OAAO,IAAA,eAAG,EAA+B,IAAI,EAAE,SAAS,CAAC,CAAC;IAC3D,CAAC;IAED,YAAY;IAEL,IAAM,IAAI,GAAV,MAAM,IAAmB,SAAQ,eAAG;;iBAIlB,MAAC,GAAwB,EAAxB,AAA0B,CAAC;QAmBpD,YACkB,CAAiB,EACjB,CAAmC,EACvC,CAAgC,EACzB,CAAoC,EACzC,CAAkC,EACjC,CAAmC,EAC1B,CAA6C,EACxC,CAAkD,EACzD,CAA2C,EAC9C,CAAwC,EACrC,CAA0C,EAClC,CAAmD,EAChD,CAAsD,EACjE,CAA0C,EAC7C,CAAwC,EAC9C,CAAiC,EACzB,CAA0C,EAC7C,CAAuC;YAE1D,KAAK,EAAE,CAAC;YAnBS,MAAC,GAAD,CAAC,CAAgB;YACjB,MAAC,GAAD,CAAC,CAAkC;YACtB,MAAC,GAAD,CAAC,CAAc;YACR,MAAC,GAAD,CAAC,CAAkB;YACxB,MAAC,GAAD,CAAC,CAAgB;YAChB,MAAC,GAAD,CAAC,CAAiB;YACT,MAAC,GAAD,CAAC,CAA2B;YACvB,MAAC,GAAD,CAAC,CAAgC;YACxC,MAAC,GAAD,CAAC,CAAyB;YAC7B,MAAC,GAAD,CAAC,CAAsB;YACpB,MAAC,GAAD,CAAC,CAAwB;YACjB,MAAC,GAAD,CAAC,CAAiC;YAC/B,MAAC,GAAD,CAAC,CAAoC;YAChD,MAAC,GAAD,CAAC,CAAwB;YAC5B,MAAC,GAAD,CAAC,CAAsB;YAC7B,MAAC,GAAD,CAAC,CAAe;YACR,MAAC,GAAD,CAAC,CAAwB;YAC5B,MAAC,GAAD,CAAC,CAAqB;YAnC1C,MAAC,GAAkB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAmB,CAAC,CAAC;YACtE,oBAAe,GAAG,IAAI,CAAC,CAAC,CAAgB,KAAK,CAAC;YAEtC,MAAC,GAAyB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAmB,CAAC,CAAC;YAC7E,2BAAsB,GAAG,IAAI,CAAC,CAAC,CAAuB,KAAK,CAAC;YAEpD,MAAC,GAAqB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAmB,CAAC,CAAC;YACzE,uBAAkB,GAAG,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC;YAE5C,MAAC,GAA0B,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAiC,CAAC,CAAC;YAC5F,4BAAuB,GAAG,IAAI,CAAC,CAAC,CAAwB,KAAK,CAAC;YAEtD,MAAC,GAAgC,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAqD,CAAC,CAAC;YACtH,kCAA6B,GAAG,IAAI,CAAC,CAAC,CAA8B,KAAK,CAAC;YAElE,MAAC,GAAqB,IAAI,CAAC,CAAC,CAAS,IAAI,0BAAI,CAAgB,IAAI,EAAE,IAAI,CAAC,CAAC,EAAa,IAAI,CAAC,CAAC,EAAqB,IAAI,CAAC,CAAC,EAAW,IAAI,CAAC,CAAC,CAAoB,CAAC,CAAC;YAwB9K,IAAI,CAAC,CAAC,EAAkB,CAAC;QAC1B,CAAC;QAEO,CAAC;YAER,4DAA4D;YAC5D,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAA+B,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAuB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEnI,mEAAmE;YACnE,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE;gBACnD,IAAI,MAAM,CAAC,MAAM,EAAE,wBAAwB,IAAI,MAAM,CAAC,MAAM,EAAE,kBAAkB,EAAE;oBACjF,MAAM,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;oBAC1C,WAAW,CAAC,GAAG,CAAC,aAAK,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;oBAEhG,6CAA6C;oBAC7C,IAAI,MAAM,CAAC,MAAM,CAAC,wBAAwB,EAAE;wBAC3C,KAAK,MAAM,wBAAwB,IAAI,MAAM,CAAC,MAAM,CAAC,wBAAwB,EAAE;4BAC9E,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAmB,gBAAgB,CAAC,wBAAwB,CAAC,CAAC,CAAC;yBACrF;qBACD;oBAED,uCAAuC;oBACvC,IAAI,MAAM,CAAC,MAAM,CAAC,kBAAkB,EAAE;wBACrC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAmB,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC;qBAC7F;iBACD;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,eAAe,CAAC,UAAmC,EAAE,OAAiC;YACrF,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAsB,IAAI,CAAC;YAC7C,MAAM,eAAe,GAAG,OAAO,EAAE,eAAe,IAAI,SAAS,CAAC;YAC9D,MAAM,UAAU,GAAG,IAAI,CAAC;YACxB,MAAM,gBAAgB,GAAG,OAAO,EAAE,gBAAgB,CAAC;YACnD,MAAM,cAAc,GAAG,CAAC,gBAAgB,CAAC;YAEzC,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,cAAc,EAAE,gBAAgB,EAAE,eAAe,EAAE,CAAC,CAAC;QACzG,CAAC;QAED,kBAAkB,CAAC,MAAmB,EAAE,UAA8B;YAErE,wBAAwB;YACxB,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,gBAAgB;YAChB,IAAI,CAAC,CAAC,CAAoB,UAAU,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QACjD,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,UAA8B;YACxC,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAE7C,IAAI,UAAU,CAAC,OAAO,IAAI,CAAC,UAAU,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,EAAE;gBACrF,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,gEAAgE;aAC5F;YAED,MAAM,YAAY,GAAuC,EAAE,CAAC;YAC5D,MAAM,aAAa,GAAuC,EAAE,CAAC;YAE7D,MAAM,gBAAgB,GAA2B,EAAE,CAAC;YACpD,MAAM,2BAA2B,GAA2B,EAAE,CAAC;YAE/D,MAAM,gCAAgC,GAA6B,EAAE,CAAC;YAEtE,IAAI,WAAqC,CAAC;YAC1C,IAAI,WAAW,GAAG,CAAC,CAAC;YAEpB,2CAA2C;YAC3C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,CAAC,CAAc,UAAU,CAAC,CAAC;YAC1D,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,iCAAiC,EAAE,WAAW,CAAC,CAAC;YACtE,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE;gBAC/B,IAAI,iCAAiC,CAAC,IAAI,CAAC,EAAE;oBAC5C,IAAI,UAAU,CAAC,OAAO,EAAE;wBACvB,iEAAiE;wBACjE,+DAA+D;wBAC/D,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACxB;yBAAM;wBACN,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACzB;iBACD;qBAAM,IAAI,qBAAqB,CAAC,IAAI,CAAC,EAAE;oBACvC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC5B;qBAAM,IAAI,IAAI,CAAC,OAAO,EAAE;oBACxB,IAAI,CAAC,WAAW,EAAE;wBACjB,WAAW,GAAG,EAAE,mBAAmB,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC;qBACpH;oBACD,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC3C;qBAAM,IAAI,IAAI,CAAC,UAAU,EAAE;oBAC3B,gCAAgC,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,IAAA,UAAG,EAAM,IAAI,CAAC,UAAU,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;iBAC1H;qBAAM;oBACN,WAAW,EAAE,CAAC;iBACd;aACD;YAED,wEAAwE;YACxE,IAAI,UAAU,CAAC,QAAQ,IAAI,WAAW,IAAI,WAAW,CAAC,mBAAmB,CAAC,MAAM,IAAI,CAAC,EAAE;gBACtF,WAAW,CAAC,WAAW,GAAG,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtE,WAAW,CAAC,mBAAmB,GAAG,EAAE,CAAC;aACrC;YAED,0EAA0E;YAC1E,IAAI,UAAU,CAAC,SAAS,IAAI,WAAW,IAAI,WAAW,CAAC,mBAAmB,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxF,WAAW,CAAC,YAAY,GAAG,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACvE,WAAW,CAAC,mBAAmB,GAAG,EAAE,CAAC;gBACrC,WAAW,CAAC,WAAW,GAAG,EAAE,CAAC;aAC7B;YAED,gEAAgE;YAChE,IAAI,WAAW,IAAI,UAAU,CAAC,iBAAiB,EAAE;gBAChD,WAAW,CAAC,WAAW,GAAG,EAAE,KAAK,EAAE,IAAA,YAAG,EAAM,CAAC,GAAG,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,qCAAqC,EAAE,GAAG,WAAW,CAAC,mBAAmB,CAAC,CAAC,EAAE,iBAAiB,EAAE,UAAU,CAAC,iBAAiB,EAAE,CAAC;aACpO;YAED,8GAA8G;YAC9G,IAAI,UAAU,CAAC,cAAc,EAAE;gBAE9B,0CAA0C;gBAC1C,2BAA2B,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAA+B,qBAAqB,EAAE,CAAC,CAAC;gBAClG,gBAAgB,CAAC,IAAI,CAAC,GAAG,2BAA2B,CAAC,CAAC;gBAEtD,iDAAiD;gBACjD,gCAAgC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAiB,qBAAqB,EAAE,CAAC,CAAC;aACzF;iBAAM;gBACN,gCAAgC,CAAC,MAAM,GAAG,CAAC,CAAC;aAC5C;YAED,uBAAuB;YACvB,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,mBAAmB,EAAE,GAAG,MAAM,IAAI,CAAC,CAAC,CAAM,UAAU,EAAE,gBAAgB,EAAE,aAAa,EAAE,gCAAgC,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;YAE/L,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,yCAAyC,WAAW,CAAC,MAAM,uBAAuB,gBAAgB,CAAC,MAAM,oBAAoB,aAAa,CAAC,MAAM,qBAAqB,gCAAgC,CAAC,MAAM,kBAAkB,WAAW,GAAG,CAAC,CAAC;YAErQ,kFAAkF;YAClF,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gBAE3B,mEAAmE;gBACnE,IAAI,mBAAmB,EAAE;oBACxB,mBAAmB,CAAC,KAAK,EAAE,CAAC;iBAC5B;gBAED,qDAAqD;qBAChD;oBACJ,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,gBAAgB,IAAI,CAAC,UAAU,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;oBAC1P,IAAI,eAAe,GAAG,IAAI,CAAC;oBAC3B,IAAI,eAAe,GAAG,IAAI,CAAC;oBAE3B,0EAA0E;oBAC1E,IAAI,eAAe,EAAE;wBACpB,MAAM,gBAAgB,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,gBAAgB,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;wBAC3L,IAAI,gBAAgB,CAAC,MAAM,EAAE;4BAC5B,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;4BAC5B,eAAe,GAAG,KAAK,CAAC;4BACxB,eAAe,GAAG,KAAK,CAAC;yBACxB;qBACD;oBAED,2EAA2E;oBAC3E,IAAI,eAAe,EAAE;wBACpB,KAAK,IAAI,CAAC,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;4BACjD,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;4BAClC,IACC,CAAC,UAAU,CAAC,eAAe,IAAI,2BAA2B,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,UAAU,CAAC,eAAe,IAAI,SAAS,CAAC,SAAS,CAAC,EAAE,KAAK,UAAU,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,IAAI,+BAA+B;gCACxM,CAAC,UAAU,CAAC,UAAU,IAAI,gCAAgC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,IAAI,KAAK,CAAC,YAAY,KAAK,IAAA,UAAG,EAAM,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAO,kCAAkC;8BAClM;gCACD,SAAS;6BACT;4BAED,UAAU,CAAC,KAAK,EAAE,CAAC;4BACnB,eAAe,GAAG,KAAK,CAAC;4BACxB,MAAM;yBACN;qBACD;oBAED,uEAAuE;oBACvE,IAAI,eAAe,EAAE;wBACpB,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;qBAC5C;iBACD;aACD;YAED,iFAAiF;YACjF,kGAAkG;YAClG,MAAM,MAAM,GAAG,WAAW,IAAI,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;YACjE,MAAM,OAAO,GAAG,WAAW,IAAI,WAAW,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;YACnE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,0BAA0B,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE;gBACvH,MAAM,OAAO,GAAc,EAAE,CAAC;gBAC9B,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;oBACrC,IAAI,qBAAqB,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,+CAA+C,EAAE;wBAC/G,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,CAAC,SAAS,EAAE,eAAe,EAAE,UAAU,CAAC,eAAe,EAAE,CAAC,CAAC;qBACxH;yBAAM,IAAI,iCAAiC,CAAC,UAAU,CAAC,EAAE;wBACzD,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,eAAe,EAAE,UAAU,CAAC,eAAe,EAAE,CAAC,CAAC;qBAC5H;yBAAM,IAAI,UAAU,CAAC,OAAO,EAAE;wBAC9B,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,OAAO,EAAE,eAAe,EAAE,UAAU,CAAC,eAAe,EAAE,CAAC,CAAC;qBACpH;iBACD;gBAED,IAAI,CAAC,CAAC,CAA4B,iBAAiB,CAAC,OAAO,CAAC,CAAC;aAC7D;YAED,gBAAgB;YAChB,IAAI,CAAC,CAAC,CAAoB,UAAU,EAAE,WAAW,CAAC,CAAC;YAEnD,OAAO,WAAW,CAAC;QACpB,CAAC;QAEO,CAAC,CAAoB,UAA8B,EAAE,WAA0B;YAEtF,+FAA+F;YAC/F,4FAA4F;YAC5F,uEAAuE;YACvE,MAAM,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;YACvD,IAAI,UAAU,CAAC,OAAO,4BAAoB,IAAI,iBAAiB,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,EAAE;gBAC9G,CAAC,KAAK,IAAI,EAAE;oBACX,MAAM,WAAW,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC;oBAExC,IAAI;wBACH,MAAM,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,iBAAiB,CAAC,CAAC;qBAC9C;oBAAC,OAAO,KAAK,EAAE;wBACf,2DAA2D;qBAC3D;gBACF,CAAC,CAAC,EAAE,CAAC;aACL;QACF,CAAC;QAEO,KAAK,CAAC,CAAC,CACd,UAA8B,EAC9B,gBAAwC,EACxC,aAAiD,EACjD,cAAwC,EACxC,WAAmB,EACnB,WAAqC,EACrC,YAAgD;YAGhD,0CAA0C;YAC1C,2CAA2C;YAC3C,MAAM,WAAW,GAAkB,EAAE,CAAC;YACtC,IAAI,mBAAmB,GAA4B,SAAS,CAAC;YAC7D,SAAS,aAAa,CAAC,MAAmB,EAAE,WAAqB;gBAChE,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAEzB,IAAI,WAAW,EAAE;oBAChB,mBAAmB,GAAG,MAAM,CAAC;oBAC7B,WAAW,GAAG,SAAS,CAAC,CAAC,mDAAmD;iBAC5E;YACF,CAAC;YAED,iEAAiE;YACjE,IAAI,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,GAAG,IAAI,CAAC,EAAE,CAAkB,UAAU,CAAC,CAAC;YAE3F,0FAA0F;YAC1F,IAAI,CAAC,UAAU,CAAC,cAAc,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC1D,MAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC;gBAClD,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAA8B,SAAS,CAAC,CAAC;gBACzE,IAAI,gBAAgB,EAAE;oBACrB,aAAa,CAAC,IAAI,CAAC,CAAC,CAA4B,gBAAgB,EAAE,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC/H;aACD;YAED,oGAAoG;YACpG,oFAAoF;YACpF,MAAM,wBAAwB,GAAG,aAAa,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;YACxG,IAAI,WAAW,IAAI,wBAAwB,KAAK,CAAC,EAAE;gBAElD,uDAAuD;gBACvD,MAAM,WAAW,GAAsC,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,qCAAqC,CAAC;gBAE7L,kDAAkD;gBAClD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,IAAI,IAAA,eAAG,EAAc,MAAM,CAAC,eAAe,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;gBAEzI,uDAAuD;gBACvD,6CAA6C;gBAC7C,EAAE;gBACF,sDAAsD;gBACtD,aAAa;gBACb,IAAI,mBAAmB,GAA4B,SAAS,CAAC;gBAC7D,IAAI,WAAW,EAAE,OAAO,IAAI,CAAC,oBAAoB,EAAE;oBAClD,IAAI,UAAU,CAAC,OAAO,gCAAwB,IAAI,UAAU,CAAC,OAAO,4BAAoB,IAAI,UAAU,CAAC,OAAO,6BAAqB,EAAE;wBACpI,mBAAmB,GAAG,MAAM,IAAA,oBAAI,EAAa,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,KAAK,EAAC,SAAS,EAAC,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAA+B,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;qBAC3O;oBAED,IAAI,CAAC,mBAAmB,EAAE;wBACzB,mBAAmB,GAAG,IAAI,CAAC,EAAE,CAAoB,OAAO,CAAC,CAAC;qBAC1D;iBACD;gBAED,yCAAyC;gBACzC,IAAI,mBAAmB,EAAE;oBAExB,sBAAsB;oBACtB,IAAI,IAAA,eAAG,EAAmB,mBAAmB,CAAC,eAAe,CAAC,EAAE;wBAC/D,gBAAgB,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,mBAAmB,CAAC,eAAe,EAAE,eAAe,EAAE,mBAAmB,CAAC,eAAe,EAAE,CAAC,CAAC;qBAChI;oBAED,0BAA0B;yBACrB,IAAI,IAAA,eAAG,EAA+B,mBAAmB,CAAC,eAAe,CAAC,EAAE;wBAChF,aAAa,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,mBAAmB,CAAC,eAAe,EAAE,eAAe,EAAE,mBAAmB,CAAC,eAAe,EAAE,CAAC,CAAC;qBAC7H;oBAED,kBAAkB;yBACb;wBACJ,aAAa,CAAC,IAAI,CAAC,CAAC,CAA2B,UAAU,EAAE,mBAAmB,EAAE,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;qBACpG;iBACD;gBAED,mFAAmF;qBAC9E;oBACJ,aAAa,CAAC,MAAM,IAAI,CAAC,EAAE,CAAkB;wBAC5C,OAAO,EAAE,UAAU,CAAC,OAAO;wBAC3B,GAAG,EAAE,UAAU,CAAC,GAAG;wBACnB,cAAc,EAAE,UAAU,CAAC,cAAc;wBACzC,WAAW;wBACX,cAAc,EAAE,IAAI;wBACpB,eAAe,EAAE,WAAW,CAAC,eAAe;wBAC5C,oBAAoB,EAAE,UAAU,CAAC,oBAAoB;wBACrD,YAAY,EAAE,UAAU,CAAC,YAAY;wBACrC,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;qBAC7C,CAAC,EAAE,IAAI,CAAC,CAAC;iBACV;aACD;YAED,wDAAwD;YACxD,MAAM,mBAAmB,GAAG,IAAA,YAAG,EAAM,gBAAgB,EAAE,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,qBAAqB;YAClH,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAEnC,+BAA+B;gBAC/B,MAAM,kBAAkB,GAAG,IAAA,YAAG,EAAM,mBAAmB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,IAAA,oBAAI,EAA0B,IAAI,CAAC,UAAU,EAAE,EAAE,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACxK,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;oBAClC,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;oBAChD,MAAM,mBAAmB,GAAG,IAAA,eAAG,EAAc,WAAW,EAAE,eAAe,EAAE,iBAAiB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;oBAExI,gBAAgB;oBAChB,aAAa,CAAC,IAAI,CAAC,CAAC,CAA2B,UAAU,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC;oBAE3H,qBAAqB,GAAG,IAAI,CAAC,CAAC,yDAAyD;iBACvF;gBAED,sBAAsB;gBACtB,KAAK,MAAM,eAAe,IAAI,mBAAmB,EAAE;oBAClD,IAAI,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,eAAe,CAAC,EAAE,KAAK,eAAe,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;wBAC5H,SAAS,CAAC,uCAAuC;qBACjD;oBAED,MAAM,eAAe,GAAG,eAAe,CAAC,eAAe,CAAC;oBACxD,MAAM,mBAAmB,GAAG,IAAA,eAAG,EAAc,WAAW,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;oBAEtH,iBAAiB;oBACjB,aAAa,CAAC,MAAM,IAAI,CAAC,CAAC,CAAuB,UAAU,EAAE,eAAe,EAAE,qBAAqB,EAAE,mBAAmB,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC;oBAElJ,qBAAqB,GAAG,IAAI,CAAC,CAAC,yDAAyD;iBACvF;aACD;YAED,qDAAqD;YACrD,MAAM,gBAAgB,GAAG,IAAA,YAAG,EAAM,aAAa,EAAE,MAAM,CAAC,EAAE,CAAC,eAAG,CAAwB,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,qBAAqB;YACpJ,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAEhC,+BAA+B;gBAC/B,MAAM,mBAAmB,GAAG,IAAA,YAAG,EAAM,gBAAgB,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,IAAA,oBAAI,EAA0B,IAAI,CAAC,UAAU,EAAE,EAAE,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzJ,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;oBACnC,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,CAAC,CAAC,CAAC;oBAClD,MAAM,mBAAmB,GAAG,IAAA,eAAG,EAAc,WAAW,EAAE,eAAe,EAAE,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;oBAEzI,gBAAgB;oBAChB,aAAa,CAAC,IAAI,CAAC,CAAC,CAA2B,UAAU,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC;oBAE5H,qBAAqB,GAAG,IAAI,CAAC,CAAC,yDAAyD;iBACvF;gBAED,sBAAsB;gBACtB,KAAK,MAAM,YAAY,IAAI,gBAAgB,EAAE;oBAC5C,IAAI,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAA,eAAG,EAA+B,MAAM,CAAC,eAAe,CAAC,IAAI,eAAG,CAAwB,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,GAAG,EAAE,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;wBAChM,SAAS,CAAC,uCAAuC;qBACjD;oBAED,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;oBACrD,MAAM,mBAAmB,GAAG,IAAA,eAAG,EAAc,WAAW,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;oBAEtH,iBAAiB;oBACjB,aAAa,CAAC,MAAM,IAAI,CAAC,CAAC,CAAuB,UAAU,EAAE,YAAY,EAAE,qBAAqB,EAAE,mBAAmB,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC;oBAE/I,qBAAqB,GAAG,IAAI,CAAC,CAAC,yDAAyD;iBACvF;aACD;YAED,0BAA0B;YAC1B,MAAM,iBAAiB,GAAG,IAAA,YAAG,EAAM,cAAc,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,qBAAqB;YACpG,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,KAAK,MAAM,qBAAqB,IAAI,iBAAiB,EAAE;oBACtD,MAAM,eAAe,GAAG,qBAAqB,CAAC,eAAe,CAAC;oBAC9D,MAAM,mBAAmB,GAAG,IAAA,eAAG,EAAc,WAAW,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;oBAEtH,aAAa,CAAC,MAAM,IAAI,CAAC,CAAC,CAAW,UAAU,EAAE,IAAI,EAAE,eAAe,EAAE,mBAAmB,EAAE,qBAAqB,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC;oBAE5I,qBAAqB,GAAG,IAAI,CAAC,CAAC,yDAAyD;iBACvF;aACD;YAED,wDAAwD;YACxD,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,WAAW,EAAE;gBAC5C,IAAI,WAAW,IAAI,CAAC,WAAW,EAAE;oBAChC,WAAW,EAAE,CAAC;iBACd;gBAED,MAAM,eAAe,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC;gBAE/F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;oBACrC,aAAa,CAAC,MAAM,IAAI,CAAC,CAAC,CAAW,UAAU,EAAE,qBAAqB,EAAE,eAAe,EAAE,WAAW,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC;oBAEtH,wDAAwD;oBACxD,qBAAqB,GAAG,IAAI,CAAC;iBAC7B;aACD;YAED,OAAO,EAAE,OAAO,EAAE,IAAA,YAAG,EAAM,WAAW,CAAC,EAAE,mBAAmB,EAAE,CAAC;QAChE,CAAC;QAEO,CAAC,CAA2B,aAAiC,EAAE,MAAmB,EAAE,WAA0B;YACrH,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,4CAA4C,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAErF,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,6BAA6B;YAE7C,MAAM,MAAM,GAA2B;gBACtC,mBAAmB,EAAE,WAAW,EAAE,mBAAmB;gBACrD,WAAW,EAAE,WAAW,EAAE,WAAW;gBACrC,YAAY,EAAE,WAAW,EAAE,YAAY;gBACvC,WAAW,EAAE,WAAW,EAAE,WAAW;gBACrC,WAAW,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC,cAAc,CAAC;aACrD,CAAC;YACF,MAAM,CAAC,aAAa,CAAC,kBAAkB,EAAE,gCAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAEzE,OAAO,MAAM,CAAC;QACf,CAAC;QAEO,CAAC,CAA4B,MAAmB,EAAE,YAAmB;YAC5E,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,6CAA6C,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC;YAEvF,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,6BAA6B;YAE7C,MAAM,OAAO,GAAuB,EAAE,YAAY,EAAE,CAAC;YACrD,MAAM,CAAC,aAAa,CAAC,mBAAmB,EAAE,gCAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAE3E,OAAO,MAAM,CAAC;QACf,CAAC;QAEO,CAAC,CAAW,UAA8B,EAAE,cAAuB,EAAE,eAAmC,EAAE,WAAqC,EAAE,qBAA8C;YACtM,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,4BAA4B,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,qBAAqB,EAAE,eAAe,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC;YAExI,IAAI,WAAoC,CAAC;YACzC,IAAI,CAAC,cAAc,IAAI,OAAO,UAAU,CAAC,eAAe,KAAK,QAAQ,EAAE;gBACtE,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,2DAA2D;aACzH;YAED,OAAO,IAAI,CAAC,EAAE,CAAkB;gBAC/B,OAAO,EAAE,UAAU,CAAC,OAAO;gBAC3B,GAAG,EAAE,UAAU,CAAC,GAAG;gBACnB,cAAc,EAAE,UAAU,CAAC,cAAc;gBACzC,eAAe;gBACf,cAAc;gBACd,oBAAoB,EAAE,UAAU,CAAC,oBAAoB;gBACrD,WAAW;gBACX,WAAW;gBACX,qBAAqB;gBACrB,YAAY,EAAE,UAAU,CAAC,YAAY;gBACrC,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;aAC7C,CAAC,CAAC;QACJ,CAAC;QAEO,CAAC,CAAuB,UAA8B,EAAE,iBAA0E,EAAE,cAAuB,EAAE,WAAqC,EAAE,WAAyB;YACpO,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,wCAAwC,EAAE,EAAE,iBAAiB,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpG,IAAI,CAAC,cAAc,IAAI,CAAC,WAAW,IAAI,OAAO,UAAU,CAAC,eAAe,KAAK,QAAQ,EAAE;gBACtF,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,2DAA2D;aACzH;YAED,OAAO,IAAI,CAAC,EAAE,CAAkB;gBAC/B,SAAS,EAAE,iBAAiB,CAAC,SAAS;gBACtC,OAAO,EAAE,UAAU,CAAC,OAAO;gBAC3B,GAAG,EAAE,UAAU,CAAC,GAAG;gBACnB,cAAc,EAAE,UAAU,CAAC,cAAc;gBACzC,eAAe,EAAE,iBAAiB,CAAC,eAAe;gBAClD,cAAc;gBACd,oBAAoB,EAAE,UAAU,CAAC,oBAAoB;gBACrD,WAAW;gBACX,WAAW;gBACX,YAAY,EAAE,UAAU,CAAC,YAAY;gBACrC,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;aAC7C,CAAC,CAAC;QACJ,CAAC;QAEO,KAAK,CAAC,CAAC,CAAc,UAA8B;YAC1D,IAAI,WAA0B,CAAC;YAC/B,IAAI,sBAAsB,GAAG,KAAK,CAAC;YACnC,IAAI,eAAe,GAAG,KAAK,CAAC;YAE5B,0BAA0B;YAC1B,IAAI,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC9D,WAAW,GAAG,MAAM,IAAI,CAAC,CAAC,CAAqB,UAAU,CAAC,CAAC;gBAC3D,sBAAsB,GAAG,IAAI,CAAC;aAC9B;YAED,wBAAwB;iBACnB,IAAI,UAAU,CAAC,UAAU,EAAE;gBAC/B,WAAW,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;aACpC;YAED,0BAA0B;iBACrB,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,IAAI,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBAC/F,WAAW,GAAG,MAAM,IAAI,CAAC,CAAC,CAAqB,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC/D,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC7B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,2EAA2E;iBAClH;gBAED,sBAAsB,GAAG,IAAI,CAAC;aAC9B;YAED,uCAAuC;iBAClC;gBACJ,WAAW,GAAG,MAAM,IAAI,CAAC,EAAE,EAAyB,CAAC;gBACrD,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC7B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,4DAA4D;iBACnG;gBAED,eAAe,GAAG,IAAI,CAAC;aACvB;YAED,qEAAqE;YACrE,2EAA2E;YAC3E,yEAAyE;YACzE,kDAAkD;YAClD,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,sBAAsB,EAAE;gBAClD,MAAM,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,iCAAiC,CAAC,IAAI,CAAC,CAAuC,CAAC;gBAChI,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7B,MAAM,eAAe,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC;oBACzD,IAAI,aAAa,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,IAAA,eAAG,EAAc,YAAY,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC,EAAE,EAAE,6CAA6C;wBACxJ,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,CAAC,CAA+B,uBAAuB,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;wBAEnJ,2CAA2C;wBAC3C,WAAW,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;wBACjD,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,iCAAiC,CAAC,IAAI,CAAC,CAAC,CAAC;qBACnF;iBACD;aACD;YAED,4DAA4D;YAC5D,uEAAuE;YACvE,0CAA0C;YAC1C,4DAA4D;YAC5D,8BAA8B;YAC9B,IAAI,UAAU,CAAC,cAAc,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAA8B,QAAQ,CAAC,EAAE,cAAc,KAAK,UAAU,EAAE;gBAC9J,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,EAAE,EAAyB,CAAC;gBAChE,WAAW,CAAC,OAAO,CAAC,GAAG,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,iCAAiC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;aACnJ;YAED,OAAO,WAAW,CAAC;QACpB,CAAC;QAEO,KAAK,CAAC,CAAC,CAAqB,UAA8B;YACjE,MAAM,kBAAkB,GAAwB;gBAC/C,YAAY,EAAE,UAAU,CAAC,YAAY;gBACrC,eAAe,EAAE,UAAU,CAAC,eAAe;aAC3C,CAAC;YAEF,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,IAAA,YAAG,EAAM,UAAU,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,EAAC,UAAU,EAAC,EAAE;gBAClG,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,EAAE,CAAc,UAAU,EAAE,kBAAkB,CAAC,CAAC;gBAExE,cAAc;gBACd,IAAI,IAAI,EAAE;oBACT,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;oBAE9B,OAAO,IAAI,CAAC;iBACZ;gBAED,0CAA0C;gBAC1C,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAmB,UAAU,CAAC,CAAC;gBAElD,IAAI,CAAC,CAAC,CAAiB,cAAc,CAAC;oBACrC,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,CAAC,IAAA,cAAQ,EAAC,CAAiD,CAA/C,CAAiD,EAA9C,EAAE,AAAkD,CAAC,CAAC,EAAhD,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;oBAClE,OAAO,EAAE,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAmB,EAAE,IAAqB,CAAC,CAAC,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAiB,EAAE,IAAuB,CAAC;oBAClJ,MAAM,EAAE,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,CAAC,CAAC;wBACpC,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAAiD,EAAE,IAAA,YAAG,EAAU,GAAG,EAAE,EAAE,EAAE,EAAE,aAAE,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,EAAuB,CAAC,CAAC,CAAC,CAAC;wBACxJ,IAAA,cAAQ,EAAC,CAAkB,EAAE,IAAmD,EAAE,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBACtG,EAAE,wBAAa,CAAC,gBAAgB,EAAE,IAAI,SAAS,CAAC,CAAC;gBAElD,OAAO,SAAS,CAAC;YAClB,CAAC,CAAC,CAAC,CAAC;YAEJ,OAAO,IAAA,YAAG,EAAM,WAAW,CAAC,CAAC;QAC9B,CAAC;QAEO,KAAK,CAAC,CAAC,CAAqB,GAAqB;YACxD,MAAM,WAAW,GAAkB,EAAE,CAAC;YACtC,MAAM,kBAAkB,GAAwB;gBAC/C,kBAAkB,EAAE,IAAI;gBACxB,YAAY,EAAE,GAAG,CAAC,IAAI;gBACtB,eAAe,EAAE,GAAG,CAAC,MAAM,IAAI,SAAS;gBACxC,wBAAwB;gBACvB,+CAA+C;gBAC/C,oBAAoB;gBACpB,oDAAoD;gBACpD,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC;oBAC9B,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC;aAChC,CAAC;YAEF,cAAc;YACd,MAAM,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC;YACrC,IAAI,UAAU,EAAE;gBACf,MAAM,kBAAkB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;oBAC1E,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAW,YAAY,CAAC,CAAC;oBACjD,IAAI,CAAC,SAAS,EAAE;wBACf,OAAO,SAAS,CAAC;qBACjB;oBAED,OAAO,IAAI,CAAC,EAAE,CAAc,EAAE,SAAS,EAAE,EAAE,kBAAkB,CAAC,CAAC;gBAChE,CAAC,CAAC,CAAC,CAAC;gBAEJ,WAAW,CAAC,IAAI,CAAC,GAAG,IAAA,YAAG,EAAM,kBAAkB,CAAC,CAAC,CAAC;aAClD;YAED,YAAY;YACZ,MAAM,QAAQ,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC;YACjC,IAAI,QAAQ,EAAE;gBACb,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;oBACpE,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAW,UAAU,CAAC,CAAC;oBAC7C,IAAI,CAAC,OAAO,EAAE;wBACb,OAAO,SAAS,CAAC;qBACjB;oBAED,OAAO,IAAI,CAAC,EAAE,CAAc,IAAA,eAAG,EAAuB,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,kBAAkB,CAAC,CAAC;gBAClI,CAAC,CAAC,CAAC,CAAC;gBAEJ,WAAW,CAAC,IAAI,CAAC,GAAG,IAAA,YAAG,EAAM,gBAAgB,CAAC,CAAC,CAAC;aAChD;YAED,uBAAuB;YACvB,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBAC9D,OAAO,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAkB,OAAO,EAAE,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAgB,OAAO,EAAE,kBAAkB,CAAC,CAAC;YACzJ,CAAC,CAAC,CAAC,CAAC;YAEJ,WAAW,CAAC,IAAI,CAAC,GAAG,IAAA,YAAG,EAAM,gBAAgB,CAAC,CAAC,CAAC;YAEhD,OAAO,WAAW,CAAC;QACpB,CAAC;QAEO,CAAC,CAAW,GAAW;YAC9B,IAAI;gBACH,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC3B,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;oBAChB,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,6CAA6C,GAAG,EAAE,CAAC,CAAC;oBAE1E,OAAO,SAAS,CAAC;iBACjB;gBACD,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;oBACd,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;iBAC/B;gBAED,OAAO,GAAG,CAAC;aACX;YAAC,OAAO,CAAC,EAAE;gBACX,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,6BAA6B,GAAG,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;aACxE;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAEO,KAAK,CAAC,EAAE;YACf,MAAM,qBAAqB,GAAG,IAAI,CAAC,EAAE,EAAwB,CAAC;YAE9D,QAAQ,qBAAqB,EAAE;gBAE9B,6BAA6B;gBAC7B,KAAK,MAAM;oBACV,OAAO,EAAE,CAAC;gBAEX,4DAA4D;gBAC5D,2BAA2B;gBAC3B,4CAA4C;gBAC5C,KAAK,KAAK,CAAC;gBACX,KAAK,KAAK,CAAC;gBACX,KAAK,UAAU,CAAC;gBAChB,KAAK,SAAS,CAAC,CAAC;oBAEf,oCAAoC;oBACpC,MAAM,kBAAkB,GAAmB,EAAE,CAAC;oBAC9C,IAAI,qBAAqB,KAAK,KAAK,EAAE;wBACpC,kBAAkB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,aAAa,CAAC,CAAC;qBACzE;oBACD,IAAI,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,gBAAgB,EAAE;wBACpD,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,gBAAgB,CAAC,CAAC;qBACzE;oBAED,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAC,iBAAiB,EAAC,EAAE;wBAEtF,aAAa;wBACb,IAAI,iBAAiB,CAAC,SAAS,EAAE;4BAChC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,EAAE,CAAc,EAAE,YAAY,EAAE,iBAAiB,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,EAAE,eAAe,EAAE,iBAAiB,CAAC,eAAe,EAAE,yBAAyB,EAAE,IAAI,CAAC,uDAAuD,EAAE,CAAC,CAAC;4BACzP,IAAI,qBAAqB,CAAC,UAAU,CAAC,EAAE;gCACtC,OAAO,UAAU,CAAC;6BAClB;yBACD;wBAED,UAAU;6BACL,IAAI,iBAAiB,CAAC,SAAS,EAAE;4BACrC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,EAAE,CAAc,EAAE,SAAS,EAAE,iBAAiB,CAAC,SAAS,EAAE,EAAE,EAAE,eAAe,EAAE,iBAAiB,CAAC,eAAe,EAAE,CAAC,CAAC;4BAClJ,IAAI,iCAAiC,CAAC,UAAU,CAAC,EAAE;gCAClD,OAAO,UAAU,CAAC;6BAClB;yBACD;wBAED,wDAAwD;6BACnD,IAAI,qBAAqB,KAAK,SAAS,IAAI,iBAAiB,CAAC,UAAU,EAAE;4BAC7E,OAAO,EAAE,UAAU,EAAE,iBAAiB,CAAC,UAAU,EAAE,eAAe,EAAE,iBAAiB,CAAC,eAAe,EAAE,CAAC;yBACxG;wBAED,OAAO,SAAS,CAAC;oBAClB,CAAC,CAAC,CAAC,CAAC;oBAEJ,OAAO,IAAA,YAAG,EAAM,WAAW,CAAC,CAAC;iBAC7B;aACD;QACF,CAAC;QAEO,EAAE;YACT,IAAI,cAAqC,CAAC;YAC1C,IAAI,IAAI,CAAC,CAAC,CAAoB,YAAY,EAAE;gBAC3C,cAAc,GAAG,KAAK,CAAC,CAAC,uDAAuD;aAC/E;iBAAM;gBACN,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAA8B,QAAQ,CAAC,CAAC;gBAC/F,cAAc,GAAG,YAAY,EAAE,cAAc,IAAI,KAAK,CAAC,CAAC,iCAAiC;gBAEzF,IAAI,CAAC,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;oBAC5E,cAAc,GAAG,KAAK,CAAC,CAAC,iCAAiC;iBACzD;aACD;YAED,OAAO,cAAc,CAAC;QACvB,CAAC;QAEO,KAAK,CAAC,EAAE,CAAc,QAAyB,EAAE,UAA+B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YAE1G,sDAAsD;YACtD,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAmB,QAAQ,CAAC,CAAC;YAChD,IAAI,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBAChC,IAAI,IAAA,YAAG,EAAU,QAAQ,CAAC,EAAE;oBAC3B,OAAO,GAAG,EAAE,GAAG,OAAO,EAAE,wBAAwB,EAAE,IAAI,EAAE,CAAC;iBACzD;gBAED,OAAO,IAAI,CAAC,EAAE,CAAgB,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;aACnD;YAED,+BAA+B;YAC/B,OAAO,IAAI,CAAC,EAAE,CAAsB,QAAQ,EAAE,OAAO,CAAC,CAAC;QACxD,CAAC;QAEO,EAAE,CAAsB,QAAyB,EAAE,OAA4B;YACtF,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,CAAmB,QAAQ,CAAC,CAAC;YAE9C,mCAAmC;YACnC,MAAM,eAAe,GAAG,IAAA,iBAAG,EAAgB,GAAG,CAAC,IAAI,OAAO,CAAC,eAAe,CAAC;YAE3E,gBAAgB;YAChB,GAAG,GAAG,IAAA,eAAG,EAAyB,IAAA,eAAG,EAAW,GAAG,CAAC,CAAC,CAAC;YAEtD,OAAO;YACP,IAAI,IAAA,YAAG,EAAU,QAAQ,CAAC,EAAE;gBAC3B,IAAI,OAAO,CAAC,YAAY,EAAE;oBACzB,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAA,aAAG,EAAqB,GAAG,CAAC,IAAI,CAAC,CAAC;oBAEjE,OAAO;wBACN,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC;wBAC3B,OAAO,EAAE;4BACR,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS;yBACjF;wBACD,eAAe;qBACf,CAAC;iBACF;gBAED,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,eAAe,EAAE,CAAC;aACzC;YAED,YAAY;iBACP,IAAI,IAAA,YAAG,EAAe,QAAQ,CAAC,EAAE;gBACrC,OAAO,EAAE,SAAS,EAAE,IAAA,iBAAI,EAAmB,GAAG,CAAC,EAAE,eAAe,EAAE,CAAC;aACnE;YAED,SAAS;YACT,OAAO,EAAE,SAAS,EAAE,IAAA,iBAAI,EAA+B,GAAG,CAAC,EAAE,eAAe,EAAE,CAAC;QAChF,CAAC;QAEO,EAAE,CAAmB,QAAyB;YACrD,IAAI,IAAA,YAAG,EAAe,QAAQ,CAAC,EAAE;gBAChC,OAAO,QAAQ,CAAC,YAAY,CAAC;aAC7B;YAED,IAAI,IAAA,YAAG,EAAY,QAAQ,CAAC,EAAE;gBAC7B,OAAO,QAAQ,CAAC,SAAS,CAAC;aAC1B;YAED,OAAO,QAAQ,CAAC,OAAO,CAAC;QACzB,CAAC;QAEO,KAAK,CAAC,EAAE,CAAgB,IAAY,EAAE,OAA4B,EAAE,kBAA4B;YAEvG,yCAAyC;YACzC,IAAI,UAA8B,CAAC;YACnC,IAAI,YAAgC,CAAC;YACrC,IAAI,OAAO,CAAC,YAAY,EAAE;gBACzB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,IAAA,aAAG,EAAqB,IAAI,CAAC,CAAC,CAAC;aACnF;YAED,6CAA6C;YAC7C,IAAI,GAAG,IAAA,aAAG,EAAc,IAAA,UAAG,EAAO,IAAI,CAAC,EAAE,IAAA,aAAG,GAAE,CAAC,CAAC;YAEhD,IAAI;gBACH,MAAM,QAAQ,GAAG,MAAM,cAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAE3C,OAAO;gBACP,IAAI,QAAQ,CAAC,MAAM,EAAE,EAAE;oBAEtB,uCAAuC;oBACvC,IAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE;wBACtC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,CAAC,CAA+B,qBAAqB,CAAC,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBACnG,IAAI,SAAS,EAAE;4BAEd,qDAAqD;4BACrD,mCAAmC;4BACnC,IAAI,SAAS,CAAC,SAAS,IAAI,OAAO,CAAC,yBAAyB,EAAE;gCAC7D,OAAO,SAAS,CAAC;6BACjB;4BAED,OAAO;gCACN,SAAS,EAAE,EAAE,EAAE,EAAE,SAAS,CAAC,EAAE,EAAE,UAAU,EAAE,SAAS,CAAC,UAAU,EAAE;gCACjE,IAAI,EAAE,gBAAQ,CAAC,IAAI;gCACnB,MAAM,EAAE,IAAI;gCACZ,eAAe,EAAE,SAAS,CAAC,eAAe;gCAC1C,SAAS,EAAE,SAAS,CAAC,SAAS;6BAC9B,CAAC;yBACF;qBACD;oBAED,OAAO;wBACN,OAAO,EAAE,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC;wBACvB,IAAI,EAAE,gBAAQ,CAAC,IAAI;wBACnB,MAAM,EAAE,IAAI;wBACZ,OAAO,EAAE;4BACR,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS;yBACnG;qBACD,CAAC;iBACF;gBAED,SAAS;qBACJ,IAAI,QAAQ,CAAC,WAAW,EAAE,EAAE;oBAChC,OAAO;wBACN,SAAS,EAAE,IAAA,iBAAI,EAA+B,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,CAAC;wBACvE,IAAI,EAAE,gBAAQ,CAAC,SAAS;wBACxB,MAAM,EAAE,IAAI;qBACZ,CAAC;iBACF;gBAED,qEAAqE;gBACrE,oEAAoE;gBACpE,qEAAqE;gBACrE,cAAc;qBACT,IAAI,CAAC,aAAE,IAAW,IAAI,KAAK,WAAW,EAAE;oBAC5C,OAAO;wBACN,OAAO,EAAE,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC;wBACvB,IAAI,EAAE,gBAAQ,CAAC,IAAI;wBACnB,MAAM,EAAE,IAAI;qBACZ,CAAC;iBACF;aACD;YAAC,OAAO,KAAK,EAAE;gBAEf,IAAI,KAAK,CAAC,IAAI,KAAK,0BAA0B,IAAI,CAAC,kBAAkB,EAAE;oBACrE,OAAO,IAAI,CAAC,EAAE,CAAkB,IAAI,EAAE,OAAO,CAAC,CAAC;iBAC/C;gBAED,MAAM,OAAO,GAAG,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAE/B,gEAAgE;gBAChE,IAAI,CAAC,CAAC,CAA4B,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBAElE,gDAAgD;gBAChD,IAAI,OAAO,CAAC,kBAAkB,EAAE;oBAC/B,OAAO;wBACN,OAAO;wBACP,IAAI,EAAE,gBAAQ,CAAC,IAAI;wBACnB,MAAM,EAAE,KAAK;qBACb,CAAC;iBACF;aACD;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAEO,KAAK,CAAC,EAAE,CAAkB,IAAY,EAAE,OAA4B;YAC3E,MAAM,GAAG,GAAG,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE3B,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,MAAM,IAAI,CAAC,CAAC,CAAiB,cAAc,CAAC;gBACjF,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE;oBACR,IAAA,cAAQ,EAAC,CAAoD,CAAlD,CAAoD,EAAjD,EAAE,AAAwD,CAAC,MAAlD,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;oBAC3D,IAAA,cAAQ,EAAC,CAAqD,CAAnD,CAAqD,EAAlD,EAAE,AAA0D,CAAC,OAAnD,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;oBAC5D,IAAA,cAAQ,EAAC,CAAwD,CAAtD,CAAwD,EAArD,EAAE,AAAiE,CAAC,UAAvD,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;iBAC/D;gBACD,OAAO,EAAE,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAA4F,EAAE,GAAG,CAAC,SAAS,CAAC;gBACpJ,MAAM,EAAE,IAAA,cAAQ,EAAC,CAAmB,EAAE,IAAsG,EAAE,IAAA,YAAG,EAAU,GAAG,EAAE,EAAE,EAAE,EAAE,aAAE,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,EAAuB,CAAC,CAAC;gBAClN,aAAa,EAAE,IAAA,cAAQ,EAAC,EAAe,EAAE,IAA8B,EAAE,GAAG,CAAC,SAAS,CAAC;gBACvF,QAAQ,EAAE,CAAC;aACX,CAAC,CAAC;YAEH,IAAI,QAAQ,KAAK,CAAC,EAAE;gBACnB,IAAA,2BAAqB,EAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAErC,IAAI,eAAe,EAAE;oBACpB,IAAI,CAAC,CAAC,CAAS,aAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,EAAE;wBACxD,MAAM,CAAC,aAAa,CAAC,gCAAgC,EAAE,gCAAiB,CAAC,IAAI,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;oBAC/F,CAAC,CAAC,CAAC,CAAC;iBACJ;gBAED,OAAO,IAAI,CAAC,EAAE,CAAgB,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,mCAAmC,CAAC,CAAC;aACvF;YAED,IAAI,QAAQ,KAAK,CAAC,EAAE;gBACnB,gBAAK,CAAC,YAAY,CAAC,mCAAmC,CAAC,CAAC;gBAExD,OAAO,IAAI,CAAC,EAAE,CAAkB,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,6FAA6F;aAC7I;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAEO,EAAE,CAAkB,IAAY,EAAE,OAA4B;YACrE,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;YAEhD,yCAAyC;YACzC,IAAI,UAA8B,CAAC;YACnC,IAAI,YAAgC,CAAC;YAErC,IAAI,OAAO,CAAC,YAAY,EAAE;gBACzB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,IAAA,aAAG,EAAqB,IAAI,CAAC,CAAC,CAAC;aACnF;YAED,gBAAgB;YAChB,IAAI,KAAK,4BAAmB,EAAE;gBAC7B,IAAI,IAAA,aAAG,EAAkB,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,4BAAmB,EAAE;oBAC1F,IAAI,GAAG,IAAA,aAAG,EAAO,IAAI,CAAC,CAAC;iBACvB;gBAED,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;aAClB;YAED,MAAM,GAAG,GAAG,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,YAAY,EAAE,SAAS,EAAE,eAAe,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;YAE/F,uBAAuB;YACvB,0CAA0C;YAC1C,mFAAmF;YACnF,8BAA8B;YAC9B,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,4BAAmB,EAAE;gBAExD,sCAAsC;gBACtC,IAAI,IAAA,eAAG,EAAuB,IAAI,CAAC,EAAE;oBACpC,IAAI,OAAO,CAAC,wBAAwB,EAAE;wBACrC,OAAO;4BACN,OAAO,EAAE,GAAG;4BACZ,OAAO,EAAE;gCACR,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS;6BACnG;4BACD,eAAe,EAAE,OAAO,CAAC,eAAe;yBACxC,CAAC;qBACF;oBAED,OAAO,EAAE,SAAS,EAAE,IAAA,iBAAI,EAAmB,GAAG,CAAC,EAAE,eAAe,EAAE,CAAC;iBACnE;gBAED,uDAAuD;qBAClD,IAAI,OAAO,CAAC,YAAY,IAAI,UAAG,CAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC1E,OAAO;wBACN,OAAO,EAAE,GAAG;wBACZ,OAAO,EAAE;4BACR,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS;yBACnG;wBACD,eAAe;qBACf,CAAC;iBACF;aACD;YAED,OAAO,EAAE,SAAS,EAAE,IAAA,iBAAI,EAA+B,GAAG,CAAC,EAAE,eAAe,EAAE,CAAC;QAChF,CAAC;QAEO,EAAE,CAAkB,UAA8B;YAEzD,0GAA0G;YAC1G,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAA8B,QAAQ,CAAC,CAAC;YAC/F,MAAM,2BAA2B,GAAG,YAAY,EAAE,sBAAsB,IAAI,SAAS,CAAC,aAAa,CAAC;YACpG,MAAM,0BAA0B,GAAG,YAAY,EAAE,oBAAoB,IAAI,KAAK,CAAC,aAAa,CAAC;YAE7F,IAAI,qBAAqB,GAAG,CAAC,UAAU,CAAC,eAAe,IAAI,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC;YACtH,IAAI,CAAC,UAAU,CAAC,cAAc,IAAI,CAAC,UAAU,CAAC,gBAAgB,IAAI,CAAC,2BAA2B,KAAK,IAAI,IAAI,2BAA2B,KAAK,KAAK,CAAC,EAAE;gBAClJ,qBAAqB,GAAG,CAAC,2BAA2B,KAAK,IAAI,CAAC,CAAC;aAC/D;YAED,+IAA+I;YAC/I,IAAI,oBAAoB,GAAY,KAAK,CAAC;YAC1C,IAAI,UAAU,CAAC,cAAc,IAAI,UAAU,CAAC,gBAAgB,EAAE;gBAC7D,oBAAoB,GAAG,CAAC,CAAC,UAAU,CAAC,cAAc,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC;aACnF;iBAAM;gBAEN,wFAAwF;gBACxF,IAAI,aAAE,EAAW;oBAChB,IAAI,UAAU,CAAC,OAAO,6BAAqB,EAAE;wBAC5C,oBAAoB,GAAG,IAAI,CAAC;qBAC5B;iBACD;gBAED,uGAAuG;gBACvG,iGAAiG;qBAC5F;oBACJ,IAAI,UAAU,CAAC,OAAO,+BAAuB,IAAI,UAAU,CAAC,OAAO,6BAAqB,IAAI,CAAC,CAAC,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,QAAQ,CAAC,EAAE;wBACrK,oBAAoB,GAAG,IAAI,CAAC;qBAC5B;iBACD;gBAED,yCAAyC;gBACzC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,wBAAwB,IAAI,CAAC,0BAA0B,KAAK,IAAI,IAAI,0BAA0B,KAAK,KAAK,CAAC,EAAE;oBAC9H,oBAAoB,GAAG,CAAC,0BAA0B,KAAK,IAAI,CAAC,CAAC;iBAC7D;aACD;YAED,OAAO,EAAE,qBAAqB,EAAE,CAAC,CAAC,qBAAqB,EAAE,oBAAoB,EAAE,CAAC;QACjF,CAAC;QAED,KAAK,CAAC,kCAAkC,CAAC,yBAAmC,EAAE,UAA8B;YAE3G,wEAAwE;YACxE,uEAAuE;YACvE,8BAA8B;YAC9B,MAAM,cAAc,GAAG,IAAA,oBAAI,EAAiC,IAAI,CAAC,UAAU,EAAE,EAAE,yBAAyB,CAAC,CAAC;YAC1G,IAAI,cAAc,EAAE;gBACnB,IAAI,CAAC,CAAC,CAAoB,MAAM,CAAC,cAAc,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;gBACjE,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC,0CAA0C;gBAElE,OAAO,CAAC,cAAc,CAAC,CAAC;aACxB;YAED,IAAI,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YACpD,IAAI,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YAChD,IAAI,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;YAE/B,sGAAsG;YACtG,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,kBAAkB,EAAE;gBACpG,MAAM,+BAA+B,GAAG,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,+BAA+B,CAAC;gBACvG,MAAM,eAAe,GAAG,+BAA+B,EAAE,SAAS,IAAI,+BAA+B,EAAE,SAAS,CAAC;gBACjH,IAAI,eAAe,EAAE;oBACpB,IAAI,SAAG,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE;wBAC/B,IAAI,eAAe,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;4BAC5C,OAAO,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;yBACnC;6BAAM;4BACN,UAAU,GAAG,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;yBAC1C;qBACD;yBAAM;wBACN,IAAI,eAAe,CAAC,UAAU,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;4BACvD,OAAO,GAAG,CAAC,IAAA,eAAG,EAAY,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;yBACvD;6BAAM;4BACN,QAAQ,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;yBACnD;qBACD;iBACD;aACD;YAED,IAAI,eAAe,GAAG,UAAU,CAAC,eAAe,CAAC;YACjD,KAAK,MAAM,wBAAwB,IAAI,yBAAyB,EAAE;gBACjE,IAAI,wBAAwB,CAAC,KAAK,CAAC,8BAA8B,CAAC,EAAE;oBACnE,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;oBAChD,MAAM,uCAAuC,GAAG,IAAA,iBAAG,EAAgB,GAAG,CAAC,CAAC;oBACxE,IAAI,uCAAuC,EAAE;wBAC5C,IAAI,eAAe,EAAE;4BACpB,IAAI,CAAC,IAAA,eAAG,EAAc,uCAAuC,EAAE,eAAe,CAAC,EAAE;gCAChF,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,oDAAoD,CAAC,CAAC;6BAC5E;yBACD;6BAAM;4BACN,eAAe,GAAG,uCAAuC,CAAC;yBAC1D;qBACD;iBACD;aACD;YAED,wCAAwC;YACxC,iDAAiD;YACjD,qFAAqF;YAErF,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBAC/B,MAAM,GAAG,GAAG,SAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC3B,IAAI,CAAC,CAAC,IAAA,oBAAI,EAA0B,IAAI,CAAC,UAAU,EAAE,EAAE,GAAG,CAAC,EAAE;oBAC5D,OAAO,KAAK,CAAC;iBACb;gBAED,OAAO,IAAA,eAAG,EAAc,IAAA,iBAAG,EAAgB,GAAG,CAAC,EAAE,eAAe,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC;YAEH,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;gBAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAW,YAAY,CAAC,CAAC;gBACjD,IAAI,SAAS,IAAI,CAAC,CAAC,IAAA,oBAAI,EAA0B,IAAI,CAAC,UAAU,EAAE,EAAE,SAAS,CAAC,EAAE;oBAC/E,OAAO,KAAK,CAAC;iBACb;gBAED,OAAO,SAAS,CAAC,CAAC,CAAC,IAAA,eAAG,EAAc,IAAA,iBAAG,EAAgB,SAAS,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAC7F,CAAC,CAAC,CAAC;YAEH,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;gBACvC,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAW,UAAU,CAAC,CAAC;gBAC7C,IAAI,OAAO,IAAI,CAAC,CAAC,IAAA,oBAAI,EAA0B,IAAI,CAAC,UAAU,EAAE,EAAE,OAAO,CAAC,EAAE;oBAC3E,OAAO,KAAK,CAAC;iBACb;gBAED,OAAO,OAAO,CAAC,CAAC,CAAC,IAAA,eAAG,EAAc,IAAA,iBAAG,EAAgB,OAAO,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACzF,CAAC,CAAC,CAAC;YAEH,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;YAC3B,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;YAC1C,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;YAEtC,UAAU;YACV,MAAM,QAAQ,GAAuB;gBACpC,OAAO,EAAE,UAAU,CAAC,OAAO;gBAC3B,GAAG,EAAE,UAAU,CAAC,GAAG;gBACnB,cAAc,EAAE,IAAI;gBACpB,UAAU,EAAE,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM;gBACrE,OAAO,EAAE,UAAU,CAAC,OAAO;gBAC3B,aAAa,EAAE,IAAI;gBACnB,iBAAiB,EAAE,UAAU,CAAC,iBAAiB;gBAC/C,eAAe;gBACf,YAAY,EAAE,UAAU,CAAC,YAAY;gBACrC,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;aAC7C,CAAC;YAEF,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5B,CAAC;QAEO,KAAK,CAAC,EAAE,CAAkB,OAAkC;YACnE,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAA8B,QAAQ,CAAC,CAAC;YAE/F,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACpD,MAAM,cAAc,GAAG,gBAAgB,EAAE,OAAO,IAAI,IAAI,CAAC,CAAC,CAA2B,cAAc,CAAC;YAEpG,IAAI,MAA+B,CAAC;YACpC,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE;gBAC7D,MAAM,GAAG,OAAO,CAAC,WAAW,IAAI,gBAAgB,CAAC;gBACjD,IAAI,MAAM,EAAE;oBACX,MAAM,CAAC,KAAK,EAAE,CAAC;iBACf;aACD;YAED,kFAAkF;YAClF,MAAM,aAAa,GAA+B;gBAEjD,gDAAgD;gBAChD,uDAAuD;gBACvD,GAAG,IAAI,CAAC,CAAC,CAAsB,IAAI;gBACnC,GAAG,OAAO,CAAC,GAAG;gBAEd,SAAS,EAAE,IAAI,CAAC,CAAC;gBAEjB,QAAQ,EAAE,CAAC,CAAC;gBAEZ,OAAO,EAAE,OAAO,CAAC,GAAG;gBAEpB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAsB,OAAO;gBAC5C,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,aAAa,EAAE,IAAI,CAAC,CAAC,CAAsB,aAAa;gBACxD,qFAAqF;gBACrF,gFAAgF;gBAChF,sFAAsF;gBACtF,sBAAsB;gBACtB,UAAU,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAA,UAAG,EAAE,IAAI,CAAC,CAAC,CAAsB,UAAU,EAAE,OAAO,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS;gBAEhJ,QAAQ,EAAE;oBACT,IAAI,EAAE,IAAI,CAAC,CAAC,CAA2B,YAAY;oBACnD,GAAG,EAAE,IAAI,CAAC,CAAC,CAA2B,QAAQ;oBAC9C,kEAAkE;oBAClE,iDAAiD;oBACjD,uEAAuE;oBACvE,OAAO,EAAE,cAAc;iBACvB;gBAED,OAAO,EAAE,IAAI,CAAC,CAAC,CAAsB,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM;gBACnF,MAAM,EAAE,IAAI,CAAC,CAAC,CAAsB,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM;gBAChF,WAAW,EAAE,IAAI,CAAC,CAAC,CAAsB,YAAY;gBAErD,eAAe,EAAE,OAAO,CAAC,eAAe;gBACxC,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,EAAe,GAAG,OAAO,CAAC,OAAO,EAAE;gBAEvD,mBAAmB,EAAE,OAAO,CAAC,WAAW,EAAE,mBAAmB;gBAC7D,WAAW,EAAE,OAAO,CAAC,WAAW,EAAE,WAAW;gBAC7C,YAAY,EAAE,OAAO,CAAC,WAAW,EAAE,YAAY;gBAC/C,WAAW,EAAE,OAAO,CAAC,WAAW,EAAE,WAAW;gBAE7C,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAa,WAAW,EAAE;gBAC1C,OAAO,EAAE;oBACR,MAAM,EAAE,EAAE;oBACV,MAAM,EAAE,IAAI,CAAC,CAAC,CAAa,oBAAoB,EAAE;iBACjD;gBACD,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAsB,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM;gBAEpF,OAAO,EAAP,iBAAO;gBACP,gBAAgB,EAAE,OAAO,CAAC,cAAc;gBACxC,SAAS,EAAE,IAAA,sBAAQ,GAAE;gBACrB,EAAE,EAAE,EAAE,OAAO,EAAE,IAAA,YAAO,GAAE,EAAE,QAAQ,EAAE,IAAA,aAAQ,GAAE,EAAE,IAAI,EAAE,IAAA,SAAI,GAAE,EAAE;gBAC9D,SAAS,EAAE,OAAO,YAAY,EAAE,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;gBAE3F,sBAAsB,EAAE,YAAY,EAAE,sBAAsB,IAAI,IAAI;gBACpE,qBAAqB,EAAE,YAAY,EAAE,qBAAqB,IAAI,KAAK;gBACnE,oBAAoB,EAAE,cAAG,CAAC,2BAA2B;gBACrD,WAAW,EAAE,IAAI,CAAC,CAAC,CAAgB,cAAc,EAAE;gBACnD,YAAY,EAAE,IAAI,CAAC,CAAC,CAAa,SAAS,EAAE;gBAC5C,UAAU,EAAE,IAAI,CAAC,CAAC,CAAsB,UAAU;aAClD,CAAC;YAEF,aAAa;YACb,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAmB,iBAAiB,CAAC,aAAa,CAAC,CAAC;gBAExE,oBAAoB;gBACpB,IAAA,kBAAI,EAAC,2BAA2B,CAAC,CAAC;gBAClC,MAAM,aAAa,GAAG,MAAM,GAAG,IAAI,CAAC,CAAC,CAAoB,cAAc,CAAC,iBAAI,EAAQ;oBACnF,KAAK;oBACL,wBAAwB,EAAE,aAAa,CAAC,wBAAwB;oBAChE,mBAAmB,EAAE,CAAC,CAAC,aAAa,CAAC,kBAAkB;iBACvD,CAAC,CAAC;gBACH,IAAA,kBAAI,EAAC,0BAA0B,CAAC,CAAC;gBAEjC,+CAA+C;gBAC/C,IAAI,OAAO,CAAC,oBAAoB,EAAE;oBACjC,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;oBAChD,YAAY,EAAE,eAAe,CAAC,aAAa,CAAC,CAAC;iBAC7C;gBAED,6BAA6B;gBAC7B,MAAI,CAAe,CAAC,CAAO,IAAI,CAAC,aAAa,CAAC,CAAC;gBAE/C,gCAAgC;gBAChC,IAAI,CAAC,CAAC,CAAgB,IAAI,CAAC,aAAa,CAAC,CAAC;gBAE1C,mCAAmC;gBACnC,IAAI,CAAC,CAAC,CAAwB,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;gBAE7G,gBAAgB;gBAChB,IAAA,gBAAG,EAAE,aAAa,CAAC,gBAAgB,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAuB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC7F,IAAA,gBAAG,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAa,aAAa,CAAC,CAAC,CAAC;gBACzE,IAAA,gBAAG,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACrF,aAAa,CAAC,6BAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAA8B,IAAI,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAErI,MAAM,WAAW,GAAG,IAAA,WAAG,EAAa,aAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;gBACpE,WAAW,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC,CAAC,4DAA4D;gBACpH,WAAW,CAAC,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAoB,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;gBAE9F,YAAY;gBACZ,IAAI,CAAC,CAAC,CAAoB,cAAc,CAAC,aAAa,CAAC,CAAC;aACxD;YAED,kBAAkB;iBACb;gBAEJ,mFAAmF;gBACnF,iFAAiF;gBACjF,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC;gBAC1C,IAAI,CAAC,aAAa,CAAC,wBAAwB,IAAI,mBAAmB,EAAE,wBAAwB,EAAE;oBAC7F,aAAa,CAAC,wBAAwB,GAAG,mBAAmB,CAAC,wBAAwB,CAAC;oBACtF,aAAa,CAAC,wBAAwB,GAAG,mBAAmB,CAAC,wBAAwB,CAAC;oBACtF,aAAa,CAAC,qBAAqB,CAAC,GAAG,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;oBAClF,aAAa,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;oBACpD,aAAa,CAAC,oBAAoB,CAAC,GAAG,mBAAmB,CAAC,oBAAoB,CAAC,CAAC;oBAChF,aAAa,CAAC,wBAAwB,CAAC,GAAG,mBAAmB,CAAC,wBAAwB,CAAC,CAAC;oBACxF,aAAa,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;oBACpD,aAAa,CAAC,oBAAoB,GAAG,mBAAmB,CAAC,oBAAoB,CAAC;oBAC9E,aAAa,CAAC,gBAAgB,CAAC,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;oBACxE,aAAa,CAAC,oBAAoB,CAAC,GAAG,mBAAmB,CAAC,oBAAoB,CAAC,CAAC;iBAChF;gBACD,aAAa,CAAC,OAAO,GAAG;oBACvB,MAAM,EAAE,aAAa,CAAC,OAAO,CAAC,MAAM;oBACpC,MAAM,EAAE,mBAAmB,EAAE,OAAO,CAAC,MAAM,IAAI,aAAa,CAAC,OAAO,CAAC,MAAM;iBAC3E,CAAC;aACF;YAED,2CAA2C;YAC3C,0CAA0C;YAC1C,aAAa,CAAC,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC;YAEnC,2DAA2D;YAC3D,wDAAwD;YACxD,aAAa;YACb,IAAI,MAAM,CAAC,OAAO,EAAE;gBACnB,IAAI,CAAC,CAAC,CAAoB,MAAM,CAAC,MAAM,4BAAoB,CAAC,IAAI,CAAC,KAAK,EAAC,IAAI,EAAC,EAAE;oBAC7E,IAAI,CAAC,IAAI,EAAE;wBACV,MAAM,IAAI,CAAC,EAAE,CAAoB,MAAO,EAAE,aAAa,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;qBAClF;gBACF,CAAC,CAAC,CAAC;aACH;iBAAM;gBACN,MAAM,IAAI,CAAC,EAAE,CAAoB,MAAM,EAAE,aAAa,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;aACjF;YAED,OAAO,MAAM,CAAC;QACf,CAAC;QAEO,KAAK,CAAC,EAAE,CAAoB,MAAmB,EAAE,aAAyC,EAAE,OAAkC,EAAE,cAAgC;YAEvK,gDAAgD;YAChD,gDAAgD;YAChD,oBAAoB;YAEpB,IAAI,CAAC,aAAa,CAAC,wBAAwB,EAAE;gBAC5C,IAAI,IAAA,eAAG,EAAmB,aAAa,CAAC,SAAS,CAAC,EAAE;oBACnD,aAAa,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAiB,uBAAuB,CAAC;wBACzE,SAAS,EAAE,aAAa,CAAC,SAAS;wBAClC,eAAe,EAAE,aAAa,CAAC,eAAe;qBAC9C,CAAC,CAAC;iBACH;qBAAM,IAAI,IAAA,eAAG,EAA+B,aAAa,CAAC,SAAS,CAAC,EAAE;oBACtE,aAAa,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAiB,oBAAoB,CAAC;wBACtE,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,GAAG;wBACtC,eAAe,EAAE,aAAa,CAAC,eAAe;qBAC9C,CAAC,CAAC;iBACH;qBAAM;oBAEN,iEAAiE;oBACjE,iEAAiE;oBACjE,gEAAgE;oBAChE,iEAAiE;oBACjE,iEAAiE;oBACjE,qBAAqB;oBAErB,aAAa,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAiB,yBAAyB,CAAC;wBAC3E,YAAY,EAAE,OAAO,CAAC,qBAAqB,EAAE,YAAY,IAAI,IAAA,iBAAI,GAA4B,CAAC,EAAE;wBAChG,eAAe,EAAE,aAAa,CAAC,eAAe;qBAC9C,CAAC,CAAC;iBACH;aACD;YAED,IAAI,IAAI,CAAC,CAAC,CAA2B,SAAS,EAAE,EAAE;gBACjD,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,IAAI,IAAA,eAAG,EAAmB,aAAa,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;gBACpG,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAA6B,OAAO,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;gBAC/F,MAAM,OAAO,GAAG,cAAc,YAAY,OAAO,CAAC,CAAC,CAAC,MAAM,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC;gBAC1F,aAAa,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;gBAEzC,IAAI,CAAC,aAAa,CAAC,wBAAwB,EAAE;oBAC5C,oDAAoD;oBACpD,kDAAkD;oBAClD,2CAA2C;oBAC3C,MAAM,IAAI,CAAC,CAAC,CAA2B,sBAAsB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;iBAClF;aACD;YAED,UAAU;YACV,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5B,CAAC;QAEO,EAAE,CAA6B,OAAkC,EAAE,SAAkC,EAAE,cAAgC;YAC9I,IAAI,OAAO,CAAC,YAAY,EAAE;gBACzB,OAAO,IAAI,CAAC,CAAC,CAA2B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,CAAC,CAA2B,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;aACzK;YAED,IAAI,OAAO,CAAC,gBAAgB,EAAE;gBAC7B,OAAO,IAAI,CAAC,CAAC,CAA2B,sBAAsB,EAAE,CAAC;aACjE;YAED,OAAO,IAAI,CAAC,CAAC,CAA2B,sBAAsB,CAAC,SAAS,CAAC,IAAI,cAAc,CAAC;QAC7F,CAAC;QAEO,EAAE,CAAa,MAAmB;YAEzC,wDAAwD;YACxD,MAAM,KAAK,GAAG,MAAI,CAAe,CAAC,CAAO,OAAO,CAAC,MAAM,CAAC,CAAC;YACzD,MAAI,CAAe,CAAC,CAAO,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAE5C,OAAO;YACP,IAAI,CAAC,CAAC,CAAwB,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QAC9G,CAAC;QAED,gBAAgB;YACf,MAAM,MAAM,GAAG,wBAAa,CAAC,gBAAgB,EAAE,CAAC;YAChD,IAAI,MAAM,EAAE;gBACX,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;aACrC;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,mBAAmB;YAClB,OAAO,IAAI,CAAC,EAAE,CAAoB,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QACtD,CAAC;QAEO,EAAE,CAA8B,eAAmC;YAC1E,OAAO,IAAI,CAAC,EAAE,CAAoB,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAA,eAAG,EAAc,MAAM,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;QAClI,CAAC;QAEO,EAAE,CAAoB,OAAsB;YACnD,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;YAE1F,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,aAAa,KAAK,eAAe,CAAC,CAAC;QACzE,CAAC;QAED,aAAa,CAAC,OAAe,EAAE,GAAG,IAAW;YAC5C,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAE5E,aAAa,EAAE,aAAa,CAAC,OAAO,EAAE,gCAAiB,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;QACxE,CAAC;QAED,SAAS,CAAC,OAAe,EAAE,OAAa,EAAE,iBAA4B;YACrE,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;gBACvC,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;oBACnE,SAAS,CAAC,gDAAgD;iBAC1D;gBAED,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,gCAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aAC/D;QACF,CAAC;QAED,UAAU;YACT,OAAO,MAAI,CAAe,CAAC,CAAO;QACnC,CAAC;QAED,cAAc;YACb,OAAO,MAAI,CAAe,CAAC,CAAO,MAAM,CAAC;QAC1C,CAAC;QAED,aAAa,CAAC,QAAgB;YAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;YAE3E,OAAO,IAAA,YAAG,EAAY,OAAO,CAAC,CAAC;QAChC,CAAC;QAED,sBAAsB,CAAC,WAAwB;YAC9C,MAAM,aAAa,GAAG,wBAAa,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YACjE,IAAI,CAAC,aAAa,EAAE;gBACnB,OAAO,SAAS,CAAC;aACjB;YAED,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAC7C,CAAC;;IAv8CW,oBAAI;mBAAJ,IAAI;QA0Bd,WAAA,SAAG,CAAA;QACH,WAAA,oBAAI,CAAA;QACJ,WAAA,WAAG,CAAA;QACH,WAAA,YAAG,CAAA;QACH,WAAA,6BAAI,CAAA;QACJ,WAAA,sBAAI,CAAA;QACJ,WAAA,2BAAI,CAAA;QACJ,WAAA,aAAI,CAAA;QACJ,YAAA,mBAAG,CAAA;QACH,YAAA,mCAAI,CAAA;QACJ,YAAA,sCAAI,CAAA;QACJ,YAAA,mBAAG,CAAA;QACH,YAAA,wBAAI,CAAA;QACJ,YAAA,WAAG,CAAA;QACH,YAAA,eAAI,CAAA;QACJ,YAAA,uBAAI,CAAA;OAzCM,IAAI,CAw8ChB","file":"windowsMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app, BrowserWindow, WebContents, shell } from 'electron';\nimport { Promises } from 'vs/base/node/pfs';\nimport { addUNCHostToAllowlist } from 'vs/base/node/unc';\nimport { hostname, release, arch } from 'os';\nimport { coalesce, distinct, firstOrDefault } from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { isWindowsDriveLetter, parseLineAndColumnAware, sanitizeFilePath, toSlashes } from 'vs/base/common/extpath';\nimport { once } from 'vs/base/common/functional';\nimport { getPathLabel } from 'vs/base/common/labels';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { basename, join, normalize, posix } from 'vs/base/common/path';\nimport { getMarks, mark } from 'vs/base/common/performance';\nimport { IProcessEnvironment, isMacintosh, isWindows, OS } from 'vs/base/common/platform';\nimport { cwd } from 'vs/base/common/process';\nimport { extUriBiasedIgnorePathCase, isEqualAuthority, normalizePath, originalFSPath, removeTrailingPathSeparator } from 'vs/base/common/resources';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { IBackupMainService } from 'vs/platform/backup/electron-main/backup';\nimport { IEmptyWindowBackupInfo } from 'vs/platform/backup/node/backup';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDialogMainService } from 'vs/platform/dialogs/electron-main/dialogMainService';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { FileType, IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport product from 'vs/platform/product/common/product';\nimport { IProtocolMainService } from 'vs/platform/protocol/electron-main/protocol';\nimport { getRemoteAuthority } from 'vs/platform/remote/common/remoteHosts';\nimport { IStateService } from 'vs/platform/state/node/state';\nimport { IAddFoldersRequest, INativeOpenFileRequest, INativeWindowConfiguration, IOpenEmptyWindowOptions, IPath, IPathsToWaitFor, isFileToOpen, isFolderToOpen, isWorkspaceToOpen, IWindowOpenable, IWindowSettings } from 'vs/platform/window/common/window';\nimport { CodeWindow } from 'vs/platform/windows/electron-main/windowImpl';\nimport { IOpenConfiguration, IOpenEmptyConfiguration, IWindowsCountChangedEvent, IWindowsMainService, OpenContext } from 'vs/platform/windows/electron-main/windows';\nimport { findWindowOnExtensionDevelopmentPath, findWindowOnFile, findWindowOnWorkspaceOrFolder } from 'vs/platform/windows/electron-main/windowsFinder';\nimport { IWindowState, WindowsStateHandler } from 'vs/platform/windows/electron-main/windowsStateHandler';\nimport { IRecent } from 'vs/platform/workspaces/common/workspaces';\nimport { hasWorkspaceFileExtension, IAnyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, IWorkspaceIdentifier, toWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { createEmptyWorkspaceIdentifier, getSingleFolderWorkspaceIdentifier, getWorkspaceIdentifier } from 'vs/platform/workspaces/node/workspaces';\nimport { IWorkspacesHistoryMainService } from 'vs/platform/workspaces/electron-main/workspacesHistoryMainService';\nimport { IWorkspacesManagementMainService } from 'vs/platform/workspaces/electron-main/workspacesManagementMainService';\nimport { ICodeWindow, UnloadReason } from 'vs/platform/window/electron-main/window';\nimport { IThemeMainService } from 'vs/platform/theme/electron-main/themeMainService';\nimport { IEditorOptions, ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IPolicyService } from 'vs/platform/policy/common/policy';\nimport { IUserDataProfilesMainService } from 'vs/platform/userDataProfile/electron-main/userDataProfile';\nimport { ILoggerMainService } from 'vs/platform/log/electron-main/loggerService';\n\n//#region Helper Interfaces\n\ntype RestoreWindowsSetting = 'preserve' | 'all' | 'folders' | 'one' | 'none';\n\ninterface IOpenBrowserWindowOptions {\n\treadonly userEnv?: IProcessEnvironment;\n\treadonly cli?: NativeParsedArgs;\n\n\treadonly workspace?: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier;\n\n\treadonly remoteAuthority?: string;\n\n\treadonly initialStartup?: boolean;\n\n\treadonly filesToOpen?: IFilesToOpen;\n\n\treadonly forceNewWindow?: boolean;\n\treadonly forceNewTabbedWindow?: boolean;\n\treadonly windowToUse?: ICodeWindow;\n\n\treadonly emptyWindowBackupInfo?: IEmptyWindowBackupInfo;\n\treadonly forceProfile?: string;\n\treadonly forceTempProfile?: boolean;\n}\n\ninterface IPathResolveOptions {\n\n\t/**\n\t * By default, resolving a path will check\n\t * if the path exists. This can be disabled\n\t * with this flag.\n\t */\n\treadonly ignoreFileNotFound?: boolean;\n\n\t/**\n\t * Will reject a path if it points to a transient\n\t * workspace as indicated by a `transient: true`\n\t * property in the workspace file.\n\t */\n\treadonly rejectTransientWorkspaces?: boolean;\n\n\t/**\n\t * If enabled, will resolve the path line/column\n\t * aware and properly remove this information\n\t * from the resulting file path.\n\t */\n\treadonly gotoLineMode?: boolean;\n\n\t/**\n\t * Forces to resolve the provided path as workspace\n\t * file instead of opening it as a file.\n\t */\n\treadonly forceOpenWorkspaceAsFile?: boolean;\n\n\t/**\n\t * The remoteAuthority to use if the URL to open is\n\t * neither `file` nor `vscode-remote`.\n\t */\n\treadonly remoteAuthority?: string;\n}\n\ninterface IFilesToOpen {\n\treadonly remoteAuthority?: string;\n\n\tfilesToOpenOrCreate: IPath[];\n\tfilesToDiff: IPath[];\n\tfilesToMerge: IPath[];\n\n\tfilesToWait?: IPathsToWaitFor;\n}\n\ninterface IPathToOpen<T = IEditorOptions> extends IPath<T> {\n\n\t/**\n\t * The workspace to open\n\t */\n\treadonly workspace?: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier;\n\n\t/**\n\t * Whether the path is considered to be transient or not\n\t * for example, a transient workspace should not add to\n\t * the workspaces history and should never restore.\n\t */\n\treadonly transient?: boolean;\n\n\t/**\n\t * The backup path to use\n\t */\n\treadonly backupPath?: string;\n\n\t/**\n\t * The remote authority for the Code instance to open. Undefined if not remote.\n\t */\n\treadonly remoteAuthority?: string;\n\n\t/**\n\t * Optional label for the recent history\n\t */\n\tlabel?: string;\n}\n\ninterface IWorkspacePathToOpen extends IPathToOpen {\n\treadonly workspace: IWorkspaceIdentifier;\n}\n\ninterface ISingleFolderWorkspacePathToOpen extends IPathToOpen {\n\treadonly workspace: ISingleFolderWorkspaceIdentifier;\n}\n\nfunction isWorkspacePathToOpen(path: IPathToOpen | undefined): path is IWorkspacePathToOpen {\n\treturn isWorkspaceIdentifier(path?.workspace);\n}\n\nfunction isSingleFolderWorkspacePathToOpen(path: IPathToOpen | undefined): path is ISingleFolderWorkspacePathToOpen {\n\treturn isSingleFolderWorkspaceIdentifier(path?.workspace);\n}\n\n//#endregion\n\nexport class WindowsMainService extends Disposable implements IWindowsMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly WINDOWS: ICodeWindow[] = [];\n\n\tprivate readonly _onDidOpenWindow = this._register(new Emitter<ICodeWindow>());\n\treadonly onDidOpenWindow = this._onDidOpenWindow.event;\n\n\tprivate readonly _onDidSignalReadyWindow = this._register(new Emitter<ICodeWindow>());\n\treadonly onDidSignalReadyWindow = this._onDidSignalReadyWindow.event;\n\n\tprivate readonly _onDidDestroyWindow = this._register(new Emitter<ICodeWindow>());\n\treadonly onDidDestroyWindow = this._onDidDestroyWindow.event;\n\n\tprivate readonly _onDidChangeWindowsCount = this._register(new Emitter<IWindowsCountChangedEvent>());\n\treadonly onDidChangeWindowsCount = this._onDidChangeWindowsCount.event;\n\n\tprivate readonly _onDidTriggerSystemContextMenu = this._register(new Emitter<{ window: ICodeWindow; x: number; y: number }>());\n\treadonly onDidTriggerSystemContextMenu = this._onDidTriggerSystemContextMenu.event;\n\n\tprivate readonly windowsStateHandler = this._register(new WindowsStateHandler(this, this.stateService, this.lifecycleMainService, this.logService, this.configurationService));\n\n\tconstructor(\n\t\tprivate readonly machineId: string,\n\t\tprivate readonly initialUserEnv: IProcessEnvironment,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerMainService private readonly loggerService: ILoggerMainService,\n\t\t@IStateService private readonly stateService: IStateService,\n\t\t@IPolicyService private readonly policyService: IPolicyService,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesMainService: IUserDataProfilesMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IBackupMainService private readonly backupMainService: IBackupMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspacesHistoryMainService private readonly workspacesHistoryMainService: IWorkspacesHistoryMainService,\n\t\t@IWorkspacesManagementMainService private readonly workspacesManagementMainService: IWorkspacesManagementMainService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IDialogMainService private readonly dialogMainService: IDialogMainService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProtocolMainService private readonly protocolMainService: IProtocolMainService,\n\t\t@IThemeMainService private readonly themeMainService: IThemeMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Signal a window is ready after having entered a workspace\n\t\tthis._register(this.workspacesManagementMainService.onDidEnterWorkspace(event => this._onDidSignalReadyWindow.fire(event.window)));\n\n\t\t// Update valid roots in protocol service for extension dev windows\n\t\tthis._register(this.onDidSignalReadyWindow(window => {\n\t\t\tif (window.config?.extensionDevelopmentPath || window.config?.extensionTestsPath) {\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tdisposables.add(Event.any(window.onDidClose, window.onDidDestroy)(() => disposables.dispose()));\n\n\t\t\t\t// Allow access to extension development path\n\t\t\t\tif (window.config.extensionDevelopmentPath) {\n\t\t\t\t\tfor (const extensionDevelopmentPath of window.config.extensionDevelopmentPath) {\n\t\t\t\t\t\tdisposables.add(this.protocolMainService.addValidFileRoot(extensionDevelopmentPath));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Allow access to extension tests path\n\t\t\t\tif (window.config.extensionTestsPath) {\n\t\t\t\t\tdisposables.add(this.protocolMainService.addValidFileRoot(window.config.extensionTestsPath));\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\topenEmptyWindow(openConfig: IOpenEmptyConfiguration, options?: IOpenEmptyWindowOptions): Promise<ICodeWindow[]> {\n\t\tconst cli = this.environmentMainService.args;\n\t\tconst remoteAuthority = options?.remoteAuthority || undefined;\n\t\tconst forceEmpty = true;\n\t\tconst forceReuseWindow = options?.forceReuseWindow;\n\t\tconst forceNewWindow = !forceReuseWindow;\n\n\t\treturn this.open({ ...openConfig, cli, forceEmpty, forceNewWindow, forceReuseWindow, remoteAuthority });\n\t}\n\n\topenExistingWindow(window: ICodeWindow, openConfig: IOpenConfiguration): void {\n\n\t\t// Bring window to front\n\t\twindow.focus();\n\n\t\t// Handle --wait\n\t\tthis.handleWaitMarkerFile(openConfig, [window]);\n\t}\n\n\tasync open(openConfig: IOpenConfiguration): Promise<ICodeWindow[]> {\n\t\tthis.logService.trace('windowsManager#open');\n\n\t\tif (openConfig.addMode && (openConfig.initialStartup || !this.getLastActiveWindow())) {\n\t\t\topenConfig.addMode = false; // Make sure addMode is only enabled if we have an active window\n\t\t}\n\n\t\tconst foldersToAdd: ISingleFolderWorkspacePathToOpen[] = [];\n\t\tconst foldersToOpen: ISingleFolderWorkspacePathToOpen[] = [];\n\n\t\tconst workspacesToOpen: IWorkspacePathToOpen[] = [];\n\t\tconst untitledWorkspacesToRestore: IWorkspacePathToOpen[] = [];\n\n\t\tconst emptyWindowsWithBackupsToRestore: IEmptyWindowBackupInfo[] = [];\n\n\t\tlet filesToOpen: IFilesToOpen | undefined;\n\t\tlet emptyToOpen = 0;\n\n\t\t// Identify things to open from open config\n\t\tconst pathsToOpen = await this.getPathsToOpen(openConfig);\n\t\tthis.logService.trace('windowsManager#open pathsToOpen', pathsToOpen);\n\t\tfor (const path of pathsToOpen) {\n\t\t\tif (isSingleFolderWorkspacePathToOpen(path)) {\n\t\t\t\tif (openConfig.addMode) {\n\t\t\t\t\t// When run with --add, take the folders that are to be opened as\n\t\t\t\t\t// folders that should be added to the currently active window.\n\t\t\t\t\tfoldersToAdd.push(path);\n\t\t\t\t} else {\n\t\t\t\t\tfoldersToOpen.push(path);\n\t\t\t\t}\n\t\t\t} else if (isWorkspacePathToOpen(path)) {\n\t\t\t\tworkspacesToOpen.push(path);\n\t\t\t} else if (path.fileUri) {\n\t\t\t\tif (!filesToOpen) {\n\t\t\t\t\tfilesToOpen = { filesToOpenOrCreate: [], filesToDiff: [], filesToMerge: [], remoteAuthority: path.remoteAuthority };\n\t\t\t\t}\n\t\t\t\tfilesToOpen.filesToOpenOrCreate.push(path);\n\t\t\t} else if (path.backupPath) {\n\t\t\t\temptyWindowsWithBackupsToRestore.push({ backupFolder: basename(path.backupPath), remoteAuthority: path.remoteAuthority });\n\t\t\t} else {\n\t\t\t\temptyToOpen++;\n\t\t\t}\n\t\t}\n\n\t\t// When run with --diff, take the first 2 files to open as files to diff\n\t\tif (openConfig.diffMode && filesToOpen && filesToOpen.filesToOpenOrCreate.length >= 2) {\n\t\t\tfilesToOpen.filesToDiff = filesToOpen.filesToOpenOrCreate.slice(0, 2);\n\t\t\tfilesToOpen.filesToOpenOrCreate = [];\n\t\t}\n\n\t\t// When run with --merge, take the first 4 files to open as files to merge\n\t\tif (openConfig.mergeMode && filesToOpen && filesToOpen.filesToOpenOrCreate.length === 4) {\n\t\t\tfilesToOpen.filesToMerge = filesToOpen.filesToOpenOrCreate.slice(0, 4);\n\t\t\tfilesToOpen.filesToOpenOrCreate = [];\n\t\t\tfilesToOpen.filesToDiff = [];\n\t\t}\n\n\t\t// When run with --wait, make sure we keep the paths to wait for\n\t\tif (filesToOpen && openConfig.waitMarkerFileURI) {\n\t\t\tfilesToOpen.filesToWait = { paths: coalesce([...filesToOpen.filesToDiff, filesToOpen.filesToMerge[3] /* [3] is the resulting merge file */, ...filesToOpen.filesToOpenOrCreate]), waitMarkerFileUri: openConfig.waitMarkerFileURI };\n\t\t}\n\n\t\t// These are windows to restore because of hot-exit or from previous session (only performed once on startup!)\n\t\tif (openConfig.initialStartup) {\n\n\t\t\t// Untitled workspaces are always restored\n\t\t\tuntitledWorkspacesToRestore.push(...this.workspacesManagementMainService.getUntitledWorkspaces());\n\t\t\tworkspacesToOpen.push(...untitledWorkspacesToRestore);\n\n\t\t\t// Empty windows with backups are always restored\n\t\t\temptyWindowsWithBackupsToRestore.push(...this.backupMainService.getEmptyWindowBackups());\n\t\t} else {\n\t\t\temptyWindowsWithBackupsToRestore.length = 0;\n\t\t}\n\n\t\t// Open based on config\n\t\tconst { windows: usedWindows, filesOpenedInWindow } = await this.doOpen(openConfig, workspacesToOpen, foldersToOpen, emptyWindowsWithBackupsToRestore, emptyToOpen, filesToOpen, foldersToAdd);\n\n\t\tthis.logService.trace(`windowsManager#open used window count ${usedWindows.length} (workspacesToOpen: ${workspacesToOpen.length}, foldersToOpen: ${foldersToOpen.length}, emptyToRestore: ${emptyWindowsWithBackupsToRestore.length}, emptyToOpen: ${emptyToOpen})`);\n\n\t\t// Make sure to pass focus to the most relevant of the windows if we open multiple\n\t\tif (usedWindows.length > 1) {\n\n\t\t\t// 1.) focus window we opened files in always with highest priority\n\t\t\tif (filesOpenedInWindow) {\n\t\t\t\tfilesOpenedInWindow.focus();\n\t\t\t}\n\n\t\t\t// Otherwise, find a good window based on open params\n\t\t\telse {\n\t\t\t\tconst focusLastActive = this.windowsStateHandler.state.lastActiveWindow && !openConfig.forceEmpty && !openConfig.cli._.length && !openConfig.cli['file-uri'] && !openConfig.cli['folder-uri'] && !(openConfig.urisToOpen && openConfig.urisToOpen.length);\n\t\t\t\tlet focusLastOpened = true;\n\t\t\t\tlet focusLastWindow = true;\n\n\t\t\t\t// 2.) focus last active window if we are not instructed to open any paths\n\t\t\t\tif (focusLastActive) {\n\t\t\t\t\tconst lastActiveWindow = usedWindows.filter(window => this.windowsStateHandler.state.lastActiveWindow && window.backupPath === this.windowsStateHandler.state.lastActiveWindow.backupPath);\n\t\t\t\t\tif (lastActiveWindow.length) {\n\t\t\t\t\t\tlastActiveWindow[0].focus();\n\t\t\t\t\t\tfocusLastOpened = false;\n\t\t\t\t\t\tfocusLastWindow = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 3.) if instructed to open paths, focus last window which is not restored\n\t\t\t\tif (focusLastOpened) {\n\t\t\t\t\tfor (let i = usedWindows.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tconst usedWindow = usedWindows[i];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(usedWindow.openedWorkspace && untitledWorkspacesToRestore.some(workspace => usedWindow.openedWorkspace && workspace.workspace.id === usedWindow.openedWorkspace.id)) ||\t// skip over restored workspace\n\t\t\t\t\t\t\t(usedWindow.backupPath && emptyWindowsWithBackupsToRestore.some(empty => usedWindow.backupPath && empty.backupFolder === basename(usedWindow.backupPath)))\t\t\t\t\t\t\t// skip over restored empty window\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tusedWindow.focus();\n\t\t\t\t\t\tfocusLastWindow = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 4.) finally, always ensure to have at least last used window focused\n\t\t\t\tif (focusLastWindow) {\n\t\t\t\t\tusedWindows[usedWindows.length - 1].focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remember in recent document list (unless this opens for extension development)\n\t\t// Also do not add paths when files are opened for diffing or merging, only if opened individually\n\t\tconst isDiff = filesToOpen && filesToOpen.filesToDiff.length > 0;\n\t\tconst isMerge = filesToOpen && filesToOpen.filesToMerge.length > 0;\n\t\tif (!usedWindows.some(window => window.isExtensionDevelopmentHost) && !isDiff && !isMerge && !openConfig.noRecentEntry) {\n\t\t\tconst recents: IRecent[] = [];\n\t\t\tfor (const pathToOpen of pathsToOpen) {\n\t\t\t\tif (isWorkspacePathToOpen(pathToOpen) && !pathToOpen.transient /* never add transient workspaces to history */) {\n\t\t\t\t\trecents.push({ label: pathToOpen.label, workspace: pathToOpen.workspace, remoteAuthority: pathToOpen.remoteAuthority });\n\t\t\t\t} else if (isSingleFolderWorkspacePathToOpen(pathToOpen)) {\n\t\t\t\t\trecents.push({ label: pathToOpen.label, folderUri: pathToOpen.workspace.uri, remoteAuthority: pathToOpen.remoteAuthority });\n\t\t\t\t} else if (pathToOpen.fileUri) {\n\t\t\t\t\trecents.push({ label: pathToOpen.label, fileUri: pathToOpen.fileUri, remoteAuthority: pathToOpen.remoteAuthority });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.workspacesHistoryMainService.addRecentlyOpened(recents);\n\t\t}\n\n\t\t// Handle --wait\n\t\tthis.handleWaitMarkerFile(openConfig, usedWindows);\n\n\t\treturn usedWindows;\n\t}\n\n\tprivate handleWaitMarkerFile(openConfig: IOpenConfiguration, usedWindows: ICodeWindow[]): void {\n\n\t\t// If we got started with --wait from the CLI, we need to signal to the outside when the window\n\t\t// used for the edit operation is closed or loaded to a different folder so that the waiting\n\t\t// process can continue. We do this by deleting the waitMarkerFilePath.\n\t\tconst waitMarkerFileURI = openConfig.waitMarkerFileURI;\n\t\tif (openConfig.context === OpenContext.CLI && waitMarkerFileURI && usedWindows.length === 1 && usedWindows[0]) {\n\t\t\t(async () => {\n\t\t\t\tawait usedWindows[0].whenClosedOrLoaded;\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(waitMarkerFileURI);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore - could have been deleted from the window already\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t}\n\n\tprivate async doOpen(\n\t\topenConfig: IOpenConfiguration,\n\t\tworkspacesToOpen: IWorkspacePathToOpen[],\n\t\tfoldersToOpen: ISingleFolderWorkspacePathToOpen[],\n\t\temptyToRestore: IEmptyWindowBackupInfo[],\n\t\temptyToOpen: number,\n\t\tfilesToOpen: IFilesToOpen | undefined,\n\t\tfoldersToAdd: ISingleFolderWorkspacePathToOpen[]\n\t): Promise<{ windows: ICodeWindow[]; filesOpenedInWindow: ICodeWindow | undefined }> {\n\n\t\t// Keep track of used windows and remember\n\t\t// if files have been opened in one of them\n\t\tconst usedWindows: ICodeWindow[] = [];\n\t\tlet filesOpenedInWindow: ICodeWindow | undefined = undefined;\n\t\tfunction addUsedWindow(window: ICodeWindow, openedFiles?: boolean): void {\n\t\t\tusedWindows.push(window);\n\n\t\t\tif (openedFiles) {\n\t\t\t\tfilesOpenedInWindow = window;\n\t\t\t\tfilesToOpen = undefined; // reset `filesToOpen` since files have been opened\n\t\t\t}\n\t\t}\n\n\t\t// Settings can decide if files/folders open in new window or not\n\t\tlet { openFolderInNewWindow, openFilesInNewWindow } = this.shouldOpenNewWindow(openConfig);\n\n\t\t// Handle folders to add by looking for the last active workspace (not on initial startup)\n\t\tif (!openConfig.initialStartup && foldersToAdd.length > 0) {\n\t\t\tconst authority = foldersToAdd[0].remoteAuthority;\n\t\t\tconst lastActiveWindow = this.getLastActiveWindowForAuthority(authority);\n\t\t\tif (lastActiveWindow) {\n\t\t\t\taddUsedWindow(this.doAddFoldersToExistingWindow(lastActiveWindow, foldersToAdd.map(folderToAdd => folderToAdd.workspace.uri)));\n\t\t\t}\n\t\t}\n\n\t\t// Handle files to open/diff/merge or to create when we dont open a folder and we do not restore any\n\t\t// folder/untitled from hot-exit by trying to open them in the window that fits best\n\t\tconst potentialNewWindowsCount = foldersToOpen.length + workspacesToOpen.length + emptyToRestore.length;\n\t\tif (filesToOpen && potentialNewWindowsCount === 0) {\n\n\t\t\t// Find suitable window or folder path to open files in\n\t\t\tconst fileToCheck: IPath<IEditorOptions> | undefined = filesToOpen.filesToOpenOrCreate[0] || filesToOpen.filesToDiff[0] || filesToOpen.filesToMerge[3] /* [3] is the resulting merge file */;\n\n\t\t\t// only look at the windows with correct authority\n\t\t\tconst windows = this.getWindows().filter(window => filesToOpen && isEqualAuthority(window.remoteAuthority, filesToOpen.remoteAuthority));\n\n\t\t\t// figure out a good window to open the files in if any\n\t\t\t// with a fallback to the last active window.\n\t\t\t//\n\t\t\t// in case `openFilesInNewWindow` is enforced, we skip\n\t\t\t// this step.\n\t\t\tlet windowToUseForFiles: ICodeWindow | undefined = undefined;\n\t\t\tif (fileToCheck?.fileUri && !openFilesInNewWindow) {\n\t\t\t\tif (openConfig.context === OpenContext.DESKTOP || openConfig.context === OpenContext.CLI || openConfig.context === OpenContext.DOCK) {\n\t\t\t\t\twindowToUseForFiles = await findWindowOnFile(windows, fileToCheck.fileUri, async workspace => workspace.configPath.scheme === Schemas.file ? this.workspacesManagementMainService.resolveLocalWorkspace(workspace.configPath) : undefined);\n\t\t\t\t}\n\n\t\t\t\tif (!windowToUseForFiles) {\n\t\t\t\t\twindowToUseForFiles = this.doGetLastActiveWindow(windows);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We found a window to open the files in\n\t\t\tif (windowToUseForFiles) {\n\n\t\t\t\t// Window is workspace\n\t\t\t\tif (isWorkspaceIdentifier(windowToUseForFiles.openedWorkspace)) {\n\t\t\t\t\tworkspacesToOpen.push({ workspace: windowToUseForFiles.openedWorkspace, remoteAuthority: windowToUseForFiles.remoteAuthority });\n\t\t\t\t}\n\n\t\t\t\t// Window is single folder\n\t\t\t\telse if (isSingleFolderWorkspaceIdentifier(windowToUseForFiles.openedWorkspace)) {\n\t\t\t\t\tfoldersToOpen.push({ workspace: windowToUseForFiles.openedWorkspace, remoteAuthority: windowToUseForFiles.remoteAuthority });\n\t\t\t\t}\n\n\t\t\t\t// Window is empty\n\t\t\t\telse {\n\t\t\t\t\taddUsedWindow(this.doOpenFilesInExistingWindow(openConfig, windowToUseForFiles, filesToOpen), true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Finally, if no window or folder is found, just open the files in an empty window\n\t\t\telse {\n\t\t\t\taddUsedWindow(await this.openInBrowserWindow({\n\t\t\t\t\tuserEnv: openConfig.userEnv,\n\t\t\t\t\tcli: openConfig.cli,\n\t\t\t\t\tinitialStartup: openConfig.initialStartup,\n\t\t\t\t\tfilesToOpen,\n\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\tremoteAuthority: filesToOpen.remoteAuthority,\n\t\t\t\t\tforceNewTabbedWindow: openConfig.forceNewTabbedWindow,\n\t\t\t\t\tforceProfile: openConfig.forceProfile,\n\t\t\t\t\tforceTempProfile: openConfig.forceTempProfile\n\t\t\t\t}), true);\n\t\t\t}\n\t\t}\n\n\t\t// Handle workspaces to open (instructed and to restore)\n\t\tconst allWorkspacesToOpen = distinct(workspacesToOpen, workspace => workspace.workspace.id); // prevent duplicates\n\t\tif (allWorkspacesToOpen.length > 0) {\n\n\t\t\t// Check for existing instances\n\t\t\tconst windowsOnWorkspace = coalesce(allWorkspacesToOpen.map(workspaceToOpen => findWindowOnWorkspaceOrFolder(this.getWindows(), workspaceToOpen.workspace.configPath)));\n\t\t\tif (windowsOnWorkspace.length > 0) {\n\t\t\t\tconst windowOnWorkspace = windowsOnWorkspace[0];\n\t\t\t\tconst filesToOpenInWindow = isEqualAuthority(filesToOpen?.remoteAuthority, windowOnWorkspace.remoteAuthority) ? filesToOpen : undefined;\n\n\t\t\t\t// Do open files\n\t\t\t\taddUsedWindow(this.doOpenFilesInExistingWindow(openConfig, windowOnWorkspace, filesToOpenInWindow), !!filesToOpenInWindow);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\n\t\t\t// Open remaining ones\n\t\t\tfor (const workspaceToOpen of allWorkspacesToOpen) {\n\t\t\t\tif (windowsOnWorkspace.some(window => window.openedWorkspace && window.openedWorkspace.id === workspaceToOpen.workspace.id)) {\n\t\t\t\t\tcontinue; // ignore folders that are already open\n\t\t\t\t}\n\n\t\t\t\tconst remoteAuthority = workspaceToOpen.remoteAuthority;\n\t\t\t\tconst filesToOpenInWindow = isEqualAuthority(filesToOpen?.remoteAuthority, remoteAuthority) ? filesToOpen : undefined;\n\n\t\t\t\t// Do open folder\n\t\t\t\taddUsedWindow(await this.doOpenFolderOrWorkspace(openConfig, workspaceToOpen, openFolderInNewWindow, filesToOpenInWindow), !!filesToOpenInWindow);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\t\t}\n\n\t\t// Handle folders to open (instructed and to restore)\n\t\tconst allFoldersToOpen = distinct(foldersToOpen, folder => extUriBiasedIgnorePathCase.getComparisonKey(folder.workspace.uri)); // prevent duplicates\n\t\tif (allFoldersToOpen.length > 0) {\n\n\t\t\t// Check for existing instances\n\t\t\tconst windowsOnFolderPath = coalesce(allFoldersToOpen.map(folderToOpen => findWindowOnWorkspaceOrFolder(this.getWindows(), folderToOpen.workspace.uri)));\n\t\t\tif (windowsOnFolderPath.length > 0) {\n\t\t\t\tconst windowOnFolderPath = windowsOnFolderPath[0];\n\t\t\t\tconst filesToOpenInWindow = isEqualAuthority(filesToOpen?.remoteAuthority, windowOnFolderPath.remoteAuthority) ? filesToOpen : undefined;\n\n\t\t\t\t// Do open files\n\t\t\t\taddUsedWindow(this.doOpenFilesInExistingWindow(openConfig, windowOnFolderPath, filesToOpenInWindow), !!filesToOpenInWindow);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\n\t\t\t// Open remaining ones\n\t\t\tfor (const folderToOpen of allFoldersToOpen) {\n\t\t\t\tif (windowsOnFolderPath.some(window => isSingleFolderWorkspaceIdentifier(window.openedWorkspace) && extUriBiasedIgnorePathCase.isEqual(window.openedWorkspace.uri, folderToOpen.workspace.uri))) {\n\t\t\t\t\tcontinue; // ignore folders that are already open\n\t\t\t\t}\n\n\t\t\t\tconst remoteAuthority = folderToOpen.remoteAuthority;\n\t\t\t\tconst filesToOpenInWindow = isEqualAuthority(filesToOpen?.remoteAuthority, remoteAuthority) ? filesToOpen : undefined;\n\n\t\t\t\t// Do open folder\n\t\t\t\taddUsedWindow(await this.doOpenFolderOrWorkspace(openConfig, folderToOpen, openFolderInNewWindow, filesToOpenInWindow), !!filesToOpenInWindow);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\t\t}\n\n\t\t// Handle empty to restore\n\t\tconst allEmptyToRestore = distinct(emptyToRestore, info => info.backupFolder); // prevent duplicates\n\t\tif (allEmptyToRestore.length > 0) {\n\t\t\tfor (const emptyWindowBackupInfo of allEmptyToRestore) {\n\t\t\t\tconst remoteAuthority = emptyWindowBackupInfo.remoteAuthority;\n\t\t\t\tconst filesToOpenInWindow = isEqualAuthority(filesToOpen?.remoteAuthority, remoteAuthority) ? filesToOpen : undefined;\n\n\t\t\t\taddUsedWindow(await this.doOpenEmpty(openConfig, true, remoteAuthority, filesToOpenInWindow, emptyWindowBackupInfo), !!filesToOpenInWindow);\n\n\t\t\t\topenFolderInNewWindow = true; // any other folders to open must open in new window then\n\t\t\t}\n\t\t}\n\n\t\t// Handle empty to open (only if no other window opened)\n\t\tif (usedWindows.length === 0 || filesToOpen) {\n\t\t\tif (filesToOpen && !emptyToOpen) {\n\t\t\t\temptyToOpen++;\n\t\t\t}\n\n\t\t\tconst remoteAuthority = filesToOpen ? filesToOpen.remoteAuthority : openConfig.remoteAuthority;\n\n\t\t\tfor (let i = 0; i < emptyToOpen; i++) {\n\t\t\t\taddUsedWindow(await this.doOpenEmpty(openConfig, openFolderInNewWindow, remoteAuthority, filesToOpen), !!filesToOpen);\n\n\t\t\t\t// any other window to open must open in new window then\n\t\t\t\topenFolderInNewWindow = true;\n\t\t\t}\n\t\t}\n\n\t\treturn { windows: distinct(usedWindows), filesOpenedInWindow };\n\t}\n\n\tprivate doOpenFilesInExistingWindow(configuration: IOpenConfiguration, window: ICodeWindow, filesToOpen?: IFilesToOpen): ICodeWindow {\n\t\tthis.logService.trace('windowsManager#doOpenFilesInExistingWindow', { filesToOpen });\n\n\t\twindow.focus(); // make sure window has focus\n\n\t\tconst params: INativeOpenFileRequest = {\n\t\t\tfilesToOpenOrCreate: filesToOpen?.filesToOpenOrCreate,\n\t\t\tfilesToDiff: filesToOpen?.filesToDiff,\n\t\t\tfilesToMerge: filesToOpen?.filesToMerge,\n\t\t\tfilesToWait: filesToOpen?.filesToWait,\n\t\t\ttermProgram: configuration?.userEnv?.['TERM_PROGRAM']\n\t\t};\n\t\twindow.sendWhenReady('vscode:openFiles', CancellationToken.None, params);\n\n\t\treturn window;\n\t}\n\n\tprivate doAddFoldersToExistingWindow(window: ICodeWindow, foldersToAdd: URI[]): ICodeWindow {\n\t\tthis.logService.trace('windowsManager#doAddFoldersToExistingWindow', { foldersToAdd });\n\n\t\twindow.focus(); // make sure window has focus\n\n\t\tconst request: IAddFoldersRequest = { foldersToAdd };\n\t\twindow.sendWhenReady('vscode:addFolders', CancellationToken.None, request);\n\n\t\treturn window;\n\t}\n\n\tprivate doOpenEmpty(openConfig: IOpenConfiguration, forceNewWindow: boolean, remoteAuthority: string | undefined, filesToOpen: IFilesToOpen | undefined, emptyWindowBackupInfo?: IEmptyWindowBackupInfo): Promise<ICodeWindow> {\n\t\tthis.logService.trace('windowsManager#doOpenEmpty', { restore: !!emptyWindowBackupInfo, remoteAuthority, filesToOpen, forceNewWindow });\n\n\t\tlet windowToUse: ICodeWindow | undefined;\n\t\tif (!forceNewWindow && typeof openConfig.contextWindowId === 'number') {\n\t\t\twindowToUse = this.getWindowById(openConfig.contextWindowId); // fix for https://github.com/microsoft/vscode/issues/97172\n\t\t}\n\n\t\treturn this.openInBrowserWindow({\n\t\t\tuserEnv: openConfig.userEnv,\n\t\t\tcli: openConfig.cli,\n\t\t\tinitialStartup: openConfig.initialStartup,\n\t\t\tremoteAuthority,\n\t\t\tforceNewWindow,\n\t\t\tforceNewTabbedWindow: openConfig.forceNewTabbedWindow,\n\t\t\tfilesToOpen,\n\t\t\twindowToUse,\n\t\t\temptyWindowBackupInfo,\n\t\t\tforceProfile: openConfig.forceProfile,\n\t\t\tforceTempProfile: openConfig.forceTempProfile\n\t\t});\n\t}\n\n\tprivate doOpenFolderOrWorkspace(openConfig: IOpenConfiguration, folderOrWorkspace: IWorkspacePathToOpen | ISingleFolderWorkspacePathToOpen, forceNewWindow: boolean, filesToOpen: IFilesToOpen | undefined, windowToUse?: ICodeWindow): Promise<ICodeWindow> {\n\t\tthis.logService.trace('windowsManager#doOpenFolderOrWorkspace', { folderOrWorkspace, filesToOpen });\n\n\t\tif (!forceNewWindow && !windowToUse && typeof openConfig.contextWindowId === 'number') {\n\t\t\twindowToUse = this.getWindowById(openConfig.contextWindowId); // fix for https://github.com/microsoft/vscode/issues/49587\n\t\t}\n\n\t\treturn this.openInBrowserWindow({\n\t\t\tworkspace: folderOrWorkspace.workspace,\n\t\t\tuserEnv: openConfig.userEnv,\n\t\t\tcli: openConfig.cli,\n\t\t\tinitialStartup: openConfig.initialStartup,\n\t\t\tremoteAuthority: folderOrWorkspace.remoteAuthority,\n\t\t\tforceNewWindow,\n\t\t\tforceNewTabbedWindow: openConfig.forceNewTabbedWindow,\n\t\t\tfilesToOpen,\n\t\t\twindowToUse,\n\t\t\tforceProfile: openConfig.forceProfile,\n\t\t\tforceTempProfile: openConfig.forceTempProfile\n\t\t});\n\t}\n\n\tprivate async getPathsToOpen(openConfig: IOpenConfiguration): Promise<IPathToOpen[]> {\n\t\tlet pathsToOpen: IPathToOpen[];\n\t\tlet isCommandLineOrAPICall = false;\n\t\tlet restoredWindows = false;\n\n\t\t// Extract paths: from API\n\t\tif (openConfig.urisToOpen && openConfig.urisToOpen.length > 0) {\n\t\t\tpathsToOpen = await this.doExtractPathsFromAPI(openConfig);\n\t\t\tisCommandLineOrAPICall = true;\n\t\t}\n\n\t\t// Check for force empty\n\t\telse if (openConfig.forceEmpty) {\n\t\t\tpathsToOpen = [Object.create(null)];\n\t\t}\n\n\t\t// Extract paths: from CLI\n\t\telse if (openConfig.cli._.length || openConfig.cli['folder-uri'] || openConfig.cli['file-uri']) {\n\t\t\tpathsToOpen = await this.doExtractPathsFromCLI(openConfig.cli);\n\t\t\tif (pathsToOpen.length === 0) {\n\t\t\t\tpathsToOpen.push(Object.create(null)); // add an empty window if we did not have windows to open from command line\n\t\t\t}\n\n\t\t\tisCommandLineOrAPICall = true;\n\t\t}\n\n\t\t// Extract paths: from previous session\n\t\telse {\n\t\t\tpathsToOpen = await this.doGetPathsFromLastSession();\n\t\t\tif (pathsToOpen.length === 0) {\n\t\t\t\tpathsToOpen.push(Object.create(null)); // add an empty window if we did not have windows to restore\n\t\t\t}\n\n\t\t\trestoredWindows = true;\n\t\t}\n\n\t\t// Convert multiple folders into workspace (if opened via API or CLI)\n\t\t// This will ensure to open these folders in one window instead of multiple\n\t\t// If we are in `addMode`, we should not do this because in that case all\n\t\t// folders should be added to the existing window.\n\t\tif (!openConfig.addMode && isCommandLineOrAPICall) {\n\t\t\tconst foldersToOpen = pathsToOpen.filter(path => isSingleFolderWorkspacePathToOpen(path)) as ISingleFolderWorkspacePathToOpen[];\n\t\t\tif (foldersToOpen.length > 1) {\n\t\t\t\tconst remoteAuthority = foldersToOpen[0].remoteAuthority;\n\t\t\t\tif (foldersToOpen.every(folderToOpen => isEqualAuthority(folderToOpen.remoteAuthority, remoteAuthority))) { // only if all folder have the same authority\n\t\t\t\t\tconst workspace = await this.workspacesManagementMainService.createUntitledWorkspace(foldersToOpen.map(folder => ({ uri: folder.workspace.uri })));\n\n\t\t\t\t\t// Add workspace and remove folders thereby\n\t\t\t\t\tpathsToOpen.push({ workspace, remoteAuthority });\n\t\t\t\t\tpathsToOpen = pathsToOpen.filter(path => !isSingleFolderWorkspacePathToOpen(path));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for `window.startup` setting to include all windows\n\t\t// from the previous session if this is the initial startup and we have\n\t\t// not restored windows already otherwise.\n\t\t// Use `unshift` to ensure any new window to open comes last\n\t\t// for proper focus treatment.\n\t\tif (openConfig.initialStartup && !restoredWindows && this.configurationService.getValue<IWindowSettings | undefined>('window')?.restoreWindows === 'preserve') {\n\t\t\tconst lastSessionPaths = await this.doGetPathsFromLastSession();\n\t\t\tpathsToOpen.unshift(...lastSessionPaths.filter(path => isWorkspacePathToOpen(path) || isSingleFolderWorkspacePathToOpen(path) || path.backupPath));\n\t\t}\n\n\t\treturn pathsToOpen;\n\t}\n\n\tprivate async doExtractPathsFromAPI(openConfig: IOpenConfiguration): Promise<IPathToOpen[]> {\n\t\tconst pathResolveOptions: IPathResolveOptions = {\n\t\t\tgotoLineMode: openConfig.gotoLineMode,\n\t\t\tremoteAuthority: openConfig.remoteAuthority\n\t\t};\n\n\t\tconst pathsToOpen = await Promise.all(coalesce(openConfig.urisToOpen || []).map(async pathToOpen => {\n\t\t\tconst path = await this.resolveOpenable(pathToOpen, pathResolveOptions);\n\n\t\t\t// Path exists\n\t\t\tif (path) {\n\t\t\t\tpath.label = pathToOpen.label;\n\n\t\t\t\treturn path;\n\t\t\t}\n\n\t\t\t// Path does not exist: show a warning box\n\t\t\tconst uri = this.resourceFromOpenable(pathToOpen);\n\n\t\t\tthis.dialogMainService.showMessageBox({\n\t\t\t\ttype: 'info',\n\t\t\t\tbuttons: [localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, \"&&OK\")],\n\t\t\t\tmessage: uri.scheme === Schemas.file ? localize('pathNotExistTitle', \"Path does not exist\") : localize('uriInvalidTitle', \"URI can not be opened\"),\n\t\t\t\tdetail: uri.scheme === Schemas.file ?\n\t\t\t\t\tlocalize('pathNotExistDetail', \"The path '{0}' does not exist on this computer.\", getPathLabel(uri, { os: OS, tildify: this.environmentMainService })) :\n\t\t\t\t\tlocalize('uriInvalidDetail', \"The URI '{0}' is not valid and can not be opened.\", uri.toString(true))\n\t\t\t}, BrowserWindow.getFocusedWindow() ?? undefined);\n\n\t\t\treturn undefined;\n\t\t}));\n\n\t\treturn coalesce(pathsToOpen);\n\t}\n\n\tprivate async doExtractPathsFromCLI(cli: NativeParsedArgs): Promise<IPath[]> {\n\t\tconst pathsToOpen: IPathToOpen[] = [];\n\t\tconst pathResolveOptions: IPathResolveOptions = {\n\t\t\tignoreFileNotFound: true,\n\t\t\tgotoLineMode: cli.goto,\n\t\t\tremoteAuthority: cli.remote || undefined,\n\t\t\tforceOpenWorkspaceAsFile:\n\t\t\t\t// special case diff / merge mode to force open\n\t\t\t\t// workspace as file\n\t\t\t\t// https://github.com/microsoft/vscode/issues/149731\n\t\t\t\tcli.diff && cli._.length === 2 ||\n\t\t\t\tcli.merge && cli._.length === 4\n\t\t};\n\n\t\t// folder uris\n\t\tconst folderUris = cli['folder-uri'];\n\t\tif (folderUris) {\n\t\t\tconst resolvedFolderUris = await Promise.all(folderUris.map(rawFolderUri => {\n\t\t\t\tconst folderUri = this.cliArgToUri(rawFolderUri);\n\t\t\t\tif (!folderUri) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn this.resolveOpenable({ folderUri }, pathResolveOptions);\n\t\t\t}));\n\n\t\t\tpathsToOpen.push(...coalesce(resolvedFolderUris));\n\t\t}\n\n\t\t// file uris\n\t\tconst fileUris = cli['file-uri'];\n\t\tif (fileUris) {\n\t\t\tconst resolvedFileUris = await Promise.all(fileUris.map(rawFileUri => {\n\t\t\t\tconst fileUri = this.cliArgToUri(rawFileUri);\n\t\t\t\tif (!fileUri) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn this.resolveOpenable(hasWorkspaceFileExtension(rawFileUri) ? { workspaceUri: fileUri } : { fileUri }, pathResolveOptions);\n\t\t\t}));\n\n\t\t\tpathsToOpen.push(...coalesce(resolvedFileUris));\n\t\t}\n\n\t\t// folder or file paths\n\t\tconst resolvedCliPaths = await Promise.all(cli._.map(cliPath => {\n\t\t\treturn pathResolveOptions.remoteAuthority ? this.doResolveRemotePath(cliPath, pathResolveOptions) : this.doResolveFilePath(cliPath, pathResolveOptions);\n\t\t}));\n\n\t\tpathsToOpen.push(...coalesce(resolvedCliPaths));\n\n\t\treturn pathsToOpen;\n\t}\n\n\tprivate cliArgToUri(arg: string): URI | undefined {\n\t\ttry {\n\t\t\tconst uri = URI.parse(arg);\n\t\t\tif (!uri.scheme) {\n\t\t\t\tthis.logService.error(`Invalid URI input string, scheme missing: ${arg}`);\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (!uri.path) {\n\t\t\t\treturn uri.with({ path: '/' });\n\t\t\t}\n\n\t\t\treturn uri;\n\t\t} catch (e) {\n\t\t\tthis.logService.error(`Invalid URI input string: ${arg}, ${e.message}`);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async doGetPathsFromLastSession(): Promise<IPathToOpen[]> {\n\t\tconst restoreWindowsSetting = this.getRestoreWindowsSetting();\n\n\t\tswitch (restoreWindowsSetting) {\n\n\t\t\t// none: no window to restore\n\t\t\tcase 'none':\n\t\t\t\treturn [];\n\n\t\t\t// one: restore last opened workspace/folder or empty window\n\t\t\t// all: restore all windows\n\t\t\t// folders: restore last opened folders only\n\t\t\tcase 'one':\n\t\t\tcase 'all':\n\t\t\tcase 'preserve':\n\t\t\tcase 'folders': {\n\n\t\t\t\t// Collect previously opened windows\n\t\t\t\tconst lastSessionWindows: IWindowState[] = [];\n\t\t\t\tif (restoreWindowsSetting !== 'one') {\n\t\t\t\t\tlastSessionWindows.push(...this.windowsStateHandler.state.openedWindows);\n\t\t\t\t}\n\t\t\t\tif (this.windowsStateHandler.state.lastActiveWindow) {\n\t\t\t\t\tlastSessionWindows.push(this.windowsStateHandler.state.lastActiveWindow);\n\t\t\t\t}\n\n\t\t\t\tconst pathsToOpen = await Promise.all(lastSessionWindows.map(async lastSessionWindow => {\n\n\t\t\t\t\t// Workspaces\n\t\t\t\t\tif (lastSessionWindow.workspace) {\n\t\t\t\t\t\tconst pathToOpen = await this.resolveOpenable({ workspaceUri: lastSessionWindow.workspace.configPath }, { remoteAuthority: lastSessionWindow.remoteAuthority, rejectTransientWorkspaces: true /* https://github.com/microsoft/vscode/issues/119695 */ });\n\t\t\t\t\t\tif (isWorkspacePathToOpen(pathToOpen)) {\n\t\t\t\t\t\t\treturn pathToOpen;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Folders\n\t\t\t\t\telse if (lastSessionWindow.folderUri) {\n\t\t\t\t\t\tconst pathToOpen = await this.resolveOpenable({ folderUri: lastSessionWindow.folderUri }, { remoteAuthority: lastSessionWindow.remoteAuthority });\n\t\t\t\t\t\tif (isSingleFolderWorkspacePathToOpen(pathToOpen)) {\n\t\t\t\t\t\t\treturn pathToOpen;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Empty window, potentially editors open to be restored\n\t\t\t\t\telse if (restoreWindowsSetting !== 'folders' && lastSessionWindow.backupPath) {\n\t\t\t\t\t\treturn { backupPath: lastSessionWindow.backupPath, remoteAuthority: lastSessionWindow.remoteAuthority };\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t}));\n\n\t\t\t\treturn coalesce(pathsToOpen);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getRestoreWindowsSetting(): RestoreWindowsSetting {\n\t\tlet restoreWindows: RestoreWindowsSetting;\n\t\tif (this.lifecycleMainService.wasRestarted) {\n\t\t\trestoreWindows = 'all'; // always reopen all windows when an update was applied\n\t\t} else {\n\t\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings | undefined>('window');\n\t\t\trestoreWindows = windowConfig?.restoreWindows || 'all'; // by default restore all windows\n\n\t\t\tif (!['preserve', 'all', 'folders', 'one', 'none'].includes(restoreWindows)) {\n\t\t\t\trestoreWindows = 'all'; // by default restore all windows\n\t\t\t}\n\t\t}\n\n\t\treturn restoreWindows;\n\t}\n\n\tprivate async resolveOpenable(openable: IWindowOpenable, options: IPathResolveOptions = Object.create(null)): Promise<IPathToOpen | undefined> {\n\n\t\t// handle file:// openables with some extra validation\n\t\tconst uri = this.resourceFromOpenable(openable);\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\tif (isFileToOpen(openable)) {\n\t\t\t\toptions = { ...options, forceOpenWorkspaceAsFile: true };\n\t\t\t}\n\n\t\t\treturn this.doResolveFilePath(uri.fsPath, options);\n\t\t}\n\n\t\t// handle non file:// openables\n\t\treturn this.doResolveRemoteOpenable(openable, options);\n\t}\n\n\tprivate doResolveRemoteOpenable(openable: IWindowOpenable, options: IPathResolveOptions): IPathToOpen<ITextEditorOptions> | undefined {\n\t\tlet uri = this.resourceFromOpenable(openable);\n\n\t\t// use remote authority from vscode\n\t\tconst remoteAuthority = getRemoteAuthority(uri) || options.remoteAuthority;\n\n\t\t// normalize URI\n\t\turi = removeTrailingPathSeparator(normalizePath(uri));\n\n\t\t// File\n\t\tif (isFileToOpen(openable)) {\n\t\t\tif (options.gotoLineMode) {\n\t\t\t\tconst { path, line, column } = parseLineAndColumnAware(uri.path);\n\n\t\t\t\treturn {\n\t\t\t\t\tfileUri: uri.with({ path }),\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tselection: line ? { startLineNumber: line, startColumn: column || 1 } : undefined\n\t\t\t\t\t},\n\t\t\t\t\tremoteAuthority\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn { fileUri: uri, remoteAuthority };\n\t\t}\n\n\t\t// Workspace\n\t\telse if (isWorkspaceToOpen(openable)) {\n\t\t\treturn { workspace: getWorkspaceIdentifier(uri), remoteAuthority };\n\t\t}\n\n\t\t// Folder\n\t\treturn { workspace: getSingleFolderWorkspaceIdentifier(uri), remoteAuthority };\n\t}\n\n\tprivate resourceFromOpenable(openable: IWindowOpenable): URI {\n\t\tif (isWorkspaceToOpen(openable)) {\n\t\t\treturn openable.workspaceUri;\n\t\t}\n\n\t\tif (isFolderToOpen(openable)) {\n\t\t\treturn openable.folderUri;\n\t\t}\n\n\t\treturn openable.fileUri;\n\t}\n\n\tprivate async doResolveFilePath(path: string, options: IPathResolveOptions, skipHandleUNCError?: boolean): Promise<IPathToOpen<ITextEditorOptions> | undefined> {\n\n\t\t// Extract line/col information from path\n\t\tlet lineNumber: number | undefined;\n\t\tlet columnNumber: number | undefined;\n\t\tif (options.gotoLineMode) {\n\t\t\t({ path, line: lineNumber, column: columnNumber } = parseLineAndColumnAware(path));\n\t\t}\n\n\t\t// Ensure the path is normalized and absolute\n\t\tpath = sanitizeFilePath(normalize(path), cwd());\n\n\t\ttry {\n\t\t\tconst pathStat = await Promises.stat(path);\n\n\t\t\t// File\n\t\t\tif (pathStat.isFile()) {\n\n\t\t\t\t// Workspace (unless disabled via flag)\n\t\t\t\tif (!options.forceOpenWorkspaceAsFile) {\n\t\t\t\t\tconst workspace = await this.workspacesManagementMainService.resolveLocalWorkspace(URI.file(path));\n\t\t\t\t\tif (workspace) {\n\n\t\t\t\t\t\t// If the workspace is transient and we are to ignore\n\t\t\t\t\t\t// transient workspaces, reject it.\n\t\t\t\t\t\tif (workspace.transient && options.rejectTransientWorkspaces) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tworkspace: { id: workspace.id, configPath: workspace.configPath },\n\t\t\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\t\t\texists: true,\n\t\t\t\t\t\t\tremoteAuthority: workspace.remoteAuthority,\n\t\t\t\t\t\t\ttransient: workspace.transient\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tfileUri: URI.file(path),\n\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\texists: true,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tselection: lineNumber ? { startLineNumber: lineNumber, startColumn: columnNumber || 1 } : undefined\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Folder\n\t\t\telse if (pathStat.isDirectory()) {\n\t\t\t\treturn {\n\t\t\t\t\tworkspace: getSingleFolderWorkspaceIdentifier(URI.file(path), pathStat),\n\t\t\t\t\ttype: FileType.Directory,\n\t\t\t\t\texists: true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Special device: in POSIX environments, we may get /dev/null passed\n\t\t\t// in (for example git uses it to signal one side of a diff does not\n\t\t\t// exist). In that special case, treat it like a file to support this\n\t\t\t// scenario ()\n\t\t\telse if (!isWindows && path === '/dev/null') {\n\t\t\t\treturn {\n\t\t\t\t\tfileUri: URI.file(path),\n\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\texists: true\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\n\t\t\tif (error.code === 'ERR_UNC_HOST_NOT_ALLOWED' && !skipHandleUNCError) {\n\t\t\t\treturn this.onUNCHostNotAllowed(path, options);\n\t\t\t}\n\n\t\t\tconst fileUri = URI.file(path);\n\n\t\t\t// since file does not seem to exist anymore, remove from recent\n\t\t\tthis.workspacesHistoryMainService.removeRecentlyOpened([fileUri]);\n\n\t\t\t// assume this is a file that does not yet exist\n\t\t\tif (options.ignoreFileNotFound) {\n\t\t\t\treturn {\n\t\t\t\t\tfileUri,\n\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\texists: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async onUNCHostNotAllowed(path: string, options: IPathResolveOptions): Promise<IPathToOpen<ITextEditorOptions> | undefined> {\n\t\tconst uri = URI.file(path);\n\n\t\tconst { response, checkboxChecked } = await this.dialogMainService.showMessageBox({\n\t\t\ttype: 'warning',\n\t\t\tbuttons: [\n\t\t\t\tlocalize({ key: 'allow', comment: ['&& denotes a mnemonic'] }, \"&&Allow\"),\n\t\t\t\tlocalize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, \"&&Cancel\"),\n\t\t\t\tlocalize({ key: 'learnMore', comment: ['&& denotes a mnemonic'] }, \"&&Learn More\"),\n\t\t\t],\n\t\t\tmessage: localize('confirmOpenMessage', \"The host '{0}' was not found in the list of allowed hosts. Do you want to allow it anyway?\", uri.authority),\n\t\t\tdetail: localize('confirmOpenDetail', \"The path '{0}' uses a host that is not allowed. Unless you trust the host, you should press 'Cancel'\", getPathLabel(uri, { os: OS, tildify: this.environmentMainService })),\n\t\t\tcheckboxLabel: localize('doNotAskAgain', \"Permanently allow host '{0}'\", uri.authority),\n\t\t\tcancelId: 1\n\t\t});\n\n\t\tif (response === 0) {\n\t\t\taddUNCHostToAllowlist(uri.authority);\n\n\t\t\tif (checkboxChecked) {\n\t\t\t\tthis._register(Event.once(this.onDidOpenWindow)(window => {\n\t\t\t\t\twindow.sendWhenReady('vscode:configureAllowedUNCHost', CancellationToken.None, uri.authority);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\treturn this.doResolveFilePath(path, options, true /* do not handle UNC error again */);\n\t\t}\n\n\t\tif (response === 2) {\n\t\t\tshell.openExternal('https://aka.ms/vscode-windows-unc');\n\n\t\t\treturn this.onUNCHostNotAllowed(path, options); // keep showing the dialog until decision (https://github.com/microsoft/vscode/issues/181956)\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate doResolveRemotePath(path: string, options: IPathResolveOptions): IPathToOpen<ITextEditorOptions> | undefined {\n\t\tconst first = path.charCodeAt(0);\n\t\tconst remoteAuthority = options.remoteAuthority;\n\n\t\t// Extract line/col information from path\n\t\tlet lineNumber: number | undefined;\n\t\tlet columnNumber: number | undefined;\n\n\t\tif (options.gotoLineMode) {\n\t\t\t({ path, line: lineNumber, column: columnNumber } = parseLineAndColumnAware(path));\n\t\t}\n\n\t\t// make absolute\n\t\tif (first !== CharCode.Slash) {\n\t\t\tif (isWindowsDriveLetter(first) && path.charCodeAt(path.charCodeAt(1)) === CharCode.Colon) {\n\t\t\t\tpath = toSlashes(path);\n\t\t\t}\n\n\t\t\tpath = `/${path}`;\n\t\t}\n\n\t\tconst uri = URI.from({ scheme: Schemas.vscodeRemote, authority: remoteAuthority, path: path });\n\n\t\t// guess the file type:\n\t\t// - if it ends with a slash it's a folder\n\t\t// - if in goto line mode or if it has a file extension, it's a file or a workspace\n\t\t// - by defaults it's a folder\n\t\tif (path.charCodeAt(path.length - 1) !== CharCode.Slash) {\n\n\t\t\t// file name ends with .code-workspace\n\t\t\tif (hasWorkspaceFileExtension(path)) {\n\t\t\t\tif (options.forceOpenWorkspaceAsFile) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfileUri: uri,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tselection: lineNumber ? { startLineNumber: lineNumber, startColumn: columnNumber || 1 } : undefined\n\t\t\t\t\t\t},\n\t\t\t\t\t\tremoteAuthority: options.remoteAuthority\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn { workspace: getWorkspaceIdentifier(uri), remoteAuthority };\n\t\t\t}\n\n\t\t\t// file name starts with a dot or has an file extension\n\t\t\telse if (options.gotoLineMode || posix.basename(path).indexOf('.') !== -1) {\n\t\t\t\treturn {\n\t\t\t\t\tfileUri: uri,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tselection: lineNumber ? { startLineNumber: lineNumber, startColumn: columnNumber || 1 } : undefined\n\t\t\t\t\t},\n\t\t\t\t\tremoteAuthority\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn { workspace: getSingleFolderWorkspaceIdentifier(uri), remoteAuthority };\n\t}\n\n\tprivate shouldOpenNewWindow(openConfig: IOpenConfiguration): { openFolderInNewWindow: boolean; openFilesInNewWindow: boolean } {\n\n\t\t// let the user settings override how folders are open in a new window or same window unless we are forced\n\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings | undefined>('window');\n\t\tconst openFolderInNewWindowConfig = windowConfig?.openFoldersInNewWindow || 'default' /* default */;\n\t\tconst openFilesInNewWindowConfig = windowConfig?.openFilesInNewWindow || 'off' /* default */;\n\n\t\tlet openFolderInNewWindow = (openConfig.preferNewWindow || openConfig.forceNewWindow) && !openConfig.forceReuseWindow;\n\t\tif (!openConfig.forceNewWindow && !openConfig.forceReuseWindow && (openFolderInNewWindowConfig === 'on' || openFolderInNewWindowConfig === 'off')) {\n\t\t\topenFolderInNewWindow = (openFolderInNewWindowConfig === 'on');\n\t\t}\n\n\t\t// let the user settings override how files are open in a new window or same window unless we are forced (not for extension development though)\n\t\tlet openFilesInNewWindow: boolean = false;\n\t\tif (openConfig.forceNewWindow || openConfig.forceReuseWindow) {\n\t\t\topenFilesInNewWindow = !!openConfig.forceNewWindow && !openConfig.forceReuseWindow;\n\t\t} else {\n\n\t\t\t// macOS: by default we open files in a new window if this is triggered via DOCK context\n\t\t\tif (isMacintosh) {\n\t\t\t\tif (openConfig.context === OpenContext.DOCK) {\n\t\t\t\t\topenFilesInNewWindow = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Linux/Windows: by default we open files in the new window unless triggered via DIALOG / MENU context\n\t\t\t// or from the integrated terminal where we assume the user prefers to open in the current window\n\t\t\telse {\n\t\t\t\tif (openConfig.context !== OpenContext.DIALOG && openConfig.context !== OpenContext.MENU && !(openConfig.userEnv && openConfig.userEnv['TERM_PROGRAM'] === 'vscode')) {\n\t\t\t\t\topenFilesInNewWindow = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// finally check for overrides of default\n\t\t\tif (!openConfig.cli.extensionDevelopmentPath && (openFilesInNewWindowConfig === 'on' || openFilesInNewWindowConfig === 'off')) {\n\t\t\t\topenFilesInNewWindow = (openFilesInNewWindowConfig === 'on');\n\t\t\t}\n\t\t}\n\n\t\treturn { openFolderInNewWindow: !!openFolderInNewWindow, openFilesInNewWindow };\n\t}\n\n\tasync openExtensionDevelopmentHostWindow(extensionDevelopmentPaths: string[], openConfig: IOpenConfiguration): Promise<ICodeWindow[]> {\n\n\t\t// Reload an existing extension development host window on the same path\n\t\t// We currently do not allow more than one extension development window\n\t\t// on the same extension path.\n\t\tconst existingWindow = findWindowOnExtensionDevelopmentPath(this.getWindows(), extensionDevelopmentPaths);\n\t\tif (existingWindow) {\n\t\t\tthis.lifecycleMainService.reload(existingWindow, openConfig.cli);\n\t\t\texistingWindow.focus(); // make sure it gets focus and is restored\n\n\t\t\treturn [existingWindow];\n\t\t}\n\n\t\tlet folderUris = openConfig.cli['folder-uri'] || [];\n\t\tlet fileUris = openConfig.cli['file-uri'] || [];\n\t\tlet cliArgs = openConfig.cli._;\n\n\t\t// Fill in previously opened workspace unless an explicit path is provided and we are not unit testing\n\t\tif (!cliArgs.length && !folderUris.length && !fileUris.length && !openConfig.cli.extensionTestsPath) {\n\t\t\tconst extensionDevelopmentWindowState = this.windowsStateHandler.state.lastPluginDevelopmentHostWindow;\n\t\t\tconst workspaceToOpen = extensionDevelopmentWindowState?.workspace ?? extensionDevelopmentWindowState?.folderUri;\n\t\t\tif (workspaceToOpen) {\n\t\t\t\tif (URI.isUri(workspaceToOpen)) {\n\t\t\t\t\tif (workspaceToOpen.scheme === Schemas.file) {\n\t\t\t\t\t\tcliArgs = [workspaceToOpen.fsPath];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfolderUris = [workspaceToOpen.toString()];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (workspaceToOpen.configPath.scheme === Schemas.file) {\n\t\t\t\t\t\tcliArgs = [originalFSPath(workspaceToOpen.configPath)];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfileUris = [workspaceToOpen.configPath.toString()];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet remoteAuthority = openConfig.remoteAuthority;\n\t\tfor (const extensionDevelopmentPath of extensionDevelopmentPaths) {\n\t\t\tif (extensionDevelopmentPath.match(/^[a-zA-Z][a-zA-Z0-9\\+\\-\\.]+:/)) {\n\t\t\t\tconst url = URI.parse(extensionDevelopmentPath);\n\t\t\t\tconst extensionDevelopmentPathRemoteAuthority = getRemoteAuthority(url);\n\t\t\t\tif (extensionDevelopmentPathRemoteAuthority) {\n\t\t\t\t\tif (remoteAuthority) {\n\t\t\t\t\t\tif (!isEqualAuthority(extensionDevelopmentPathRemoteAuthority, remoteAuthority)) {\n\t\t\t\t\t\t\tthis.logService.error('more than one extension development path authority');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tremoteAuthority = extensionDevelopmentPathRemoteAuthority;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make sure that we do not try to open:\n\t\t// - a workspace or folder that is already opened\n\t\t// - a workspace or file that has a different authority as the extension development.\n\n\t\tcliArgs = cliArgs.filter(path => {\n\t\t\tconst uri = URI.file(path);\n\t\t\tif (!!findWindowOnWorkspaceOrFolder(this.getWindows(), uri)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn isEqualAuthority(getRemoteAuthority(uri), remoteAuthority);\n\t\t});\n\n\t\tfolderUris = folderUris.filter(folderUriStr => {\n\t\t\tconst folderUri = this.cliArgToUri(folderUriStr);\n\t\t\tif (folderUri && !!findWindowOnWorkspaceOrFolder(this.getWindows(), folderUri)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn folderUri ? isEqualAuthority(getRemoteAuthority(folderUri), remoteAuthority) : false;\n\t\t});\n\n\t\tfileUris = fileUris.filter(fileUriStr => {\n\t\t\tconst fileUri = this.cliArgToUri(fileUriStr);\n\t\t\tif (fileUri && !!findWindowOnWorkspaceOrFolder(this.getWindows(), fileUri)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn fileUri ? isEqualAuthority(getRemoteAuthority(fileUri), remoteAuthority) : false;\n\t\t});\n\n\t\topenConfig.cli._ = cliArgs;\n\t\topenConfig.cli['folder-uri'] = folderUris;\n\t\topenConfig.cli['file-uri'] = fileUris;\n\n\t\t// Open it\n\t\tconst openArgs: IOpenConfiguration = {\n\t\t\tcontext: openConfig.context,\n\t\t\tcli: openConfig.cli,\n\t\t\tforceNewWindow: true,\n\t\t\tforceEmpty: !cliArgs.length && !folderUris.length && !fileUris.length,\n\t\t\tuserEnv: openConfig.userEnv,\n\t\t\tnoRecentEntry: true,\n\t\t\twaitMarkerFileURI: openConfig.waitMarkerFileURI,\n\t\t\tremoteAuthority,\n\t\t\tforceProfile: openConfig.forceProfile,\n\t\t\tforceTempProfile: openConfig.forceTempProfile\n\t\t};\n\n\t\treturn this.open(openArgs);\n\t}\n\n\tprivate async openInBrowserWindow(options: IOpenBrowserWindowOptions): Promise<ICodeWindow> {\n\t\tconst windowConfig = this.configurationService.getValue<IWindowSettings | undefined>('window');\n\n\t\tconst lastActiveWindow = this.getLastActiveWindow();\n\t\tconst defaultProfile = lastActiveWindow?.profile ?? this.userDataProfilesMainService.defaultProfile;\n\n\t\tlet window: ICodeWindow | undefined;\n\t\tif (!options.forceNewWindow && !options.forceNewTabbedWindow) {\n\t\t\twindow = options.windowToUse || lastActiveWindow;\n\t\t\tif (window) {\n\t\t\t\twindow.focus();\n\t\t\t}\n\t\t}\n\n\t\t// Build up the window configuration from provided options, config and environment\n\t\tconst configuration: INativeWindowConfiguration = {\n\n\t\t\t// Inherit CLI arguments from environment and/or\n\t\t\t// the specific properties from this launch if provided\n\t\t\t...this.environmentMainService.args,\n\t\t\t...options.cli,\n\n\t\t\tmachineId: this.machineId,\n\n\t\t\twindowId: -1,\t// Will be filled in by the window once loaded later\n\n\t\t\tmainPid: process.pid,\n\n\t\t\tappRoot: this.environmentMainService.appRoot,\n\t\t\texecPath: process.execPath,\n\t\t\tcodeCachePath: this.environmentMainService.codeCachePath,\n\t\t\t// If we know the backup folder upfront (for empty windows to restore), we can set it\n\t\t\t// directly here which helps for restoring UI state associated with that window.\n\t\t\t// For all other cases we first call into registerEmptyWindowBackup() to set it before\n\t\t\t// loading the window.\n\t\t\tbackupPath: options.emptyWindowBackupInfo ? join(this.environmentMainService.backupHome, options.emptyWindowBackupInfo.backupFolder) : undefined,\n\n\t\t\tprofiles: {\n\t\t\t\thome: this.userDataProfilesMainService.profilesHome,\n\t\t\t\tall: this.userDataProfilesMainService.profiles,\n\t\t\t\t// Set to default profile first and resolve and update the profile\n\t\t\t\t// only after the workspace-backup is registered.\n\t\t\t\t// Because, workspace identifier of an empty window is known only then.\n\t\t\t\tprofile: defaultProfile\n\t\t\t},\n\n\t\t\thomeDir: this.environmentMainService.userHome.with({ scheme: Schemas.file }).fsPath,\n\t\t\ttmpDir: this.environmentMainService.tmpDir.with({ scheme: Schemas.file }).fsPath,\n\t\t\tuserDataDir: this.environmentMainService.userDataPath,\n\n\t\t\tremoteAuthority: options.remoteAuthority,\n\t\t\tworkspace: options.workspace,\n\t\t\tuserEnv: { ...this.initialUserEnv, ...options.userEnv },\n\n\t\t\tfilesToOpenOrCreate: options.filesToOpen?.filesToOpenOrCreate,\n\t\t\tfilesToDiff: options.filesToOpen?.filesToDiff,\n\t\t\tfilesToMerge: options.filesToOpen?.filesToMerge,\n\t\t\tfilesToWait: options.filesToOpen?.filesToWait,\n\n\t\t\tlogLevel: this.loggerService.getLogLevel(),\n\t\t\tloggers: {\n\t\t\t\twindow: [],\n\t\t\t\tglobal: this.loggerService.getRegisteredLoggers()\n\t\t\t},\n\t\t\tlogsPath: this.environmentMainService.logsHome.with({ scheme: Schemas.file }).fsPath,\n\n\t\t\tproduct,\n\t\t\tisInitialStartup: options.initialStartup,\n\t\t\tperfMarks: getMarks(),\n\t\t\tos: { release: release(), hostname: hostname(), arch: arch() },\n\t\t\tzoomLevel: typeof windowConfig?.zoomLevel === 'number' ? windowConfig.zoomLevel : undefined,\n\n\t\t\tautoDetectHighContrast: windowConfig?.autoDetectHighContrast ?? true,\n\t\t\tautoDetectColorScheme: windowConfig?.autoDetectColorScheme ?? false,\n\t\t\taccessibilitySupport: app.accessibilitySupportEnabled,\n\t\t\tcolorScheme: this.themeMainService.getColorScheme(),\n\t\t\tpoliciesData: this.policyService.serialize(),\n\t\t\tcontinueOn: this.environmentMainService.continueOn\n\t\t};\n\n\t\t// New window\n\t\tif (!window) {\n\t\t\tconst state = this.windowsStateHandler.getNewWindowState(configuration);\n\n\t\t\t// Create the window\n\t\t\tmark('code/willCreateCodeWindow');\n\t\t\tconst createdWindow = window = this.instantiationService.createInstance(CodeWindow, {\n\t\t\t\tstate,\n\t\t\t\textensionDevelopmentPath: configuration.extensionDevelopmentPath,\n\t\t\t\tisExtensionTestHost: !!configuration.extensionTestsPath\n\t\t\t});\n\t\t\tmark('code/didCreateCodeWindow');\n\n\t\t\t// Add as window tab if configured (macOS only)\n\t\t\tif (options.forceNewTabbedWindow) {\n\t\t\t\tconst activeWindow = this.getLastActiveWindow();\n\t\t\t\tactiveWindow?.addTabbedWindow(createdWindow);\n\t\t\t}\n\n\t\t\t// Add to our list of windows\n\t\t\tWindowsMainService.WINDOWS.push(createdWindow);\n\n\t\t\t// Indicate new window via event\n\t\t\tthis._onDidOpenWindow.fire(createdWindow);\n\n\t\t\t// Indicate number change via event\n\t\t\tthis._onDidChangeWindowsCount.fire({ oldCount: this.getWindowCount() - 1, newCount: this.getWindowCount() });\n\n\t\t\t// Window Events\n\t\t\tonce(createdWindow.onDidSignalReady)(() => this._onDidSignalReadyWindow.fire(createdWindow));\n\t\t\tonce(createdWindow.onDidClose)(() => this.onWindowClosed(createdWindow));\n\t\t\tonce(createdWindow.onDidDestroy)(() => this._onDidDestroyWindow.fire(createdWindow));\n\t\t\tcreatedWindow.onDidTriggerSystemContextMenu(({ x, y }) => this._onDidTriggerSystemContextMenu.fire({ window: createdWindow, x, y }));\n\n\t\t\tconst webContents = assertIsDefined(createdWindow.win?.webContents);\n\t\t\twebContents.removeAllListeners('devtools-reload-page'); // remove built in listener so we can handle this on our own\n\t\t\twebContents.on('devtools-reload-page', () => this.lifecycleMainService.reload(createdWindow));\n\n\t\t\t// Lifecycle\n\t\t\tthis.lifecycleMainService.registerWindow(createdWindow);\n\t\t}\n\n\t\t// Existing window\n\t\telse {\n\n\t\t\t// Some configuration things get inherited if the window is being reused and we are\n\t\t\t// in extension development host mode. These options are all development related.\n\t\t\tconst currentWindowConfig = window.config;\n\t\t\tif (!configuration.extensionDevelopmentPath && currentWindowConfig?.extensionDevelopmentPath) {\n\t\t\t\tconfiguration.extensionDevelopmentPath = currentWindowConfig.extensionDevelopmentPath;\n\t\t\t\tconfiguration.extensionDevelopmentKind = currentWindowConfig.extensionDevelopmentKind;\n\t\t\t\tconfiguration['enable-proposed-api'] = currentWindowConfig['enable-proposed-api'];\n\t\t\t\tconfiguration.verbose = currentWindowConfig.verbose;\n\t\t\t\tconfiguration['inspect-extensions'] = currentWindowConfig['inspect-extensions'];\n\t\t\t\tconfiguration['inspect-brk-extensions'] = currentWindowConfig['inspect-brk-extensions'];\n\t\t\t\tconfiguration.debugId = currentWindowConfig.debugId;\n\t\t\t\tconfiguration.extensionEnvironment = currentWindowConfig.extensionEnvironment;\n\t\t\t\tconfiguration['extensions-dir'] = currentWindowConfig['extensions-dir'];\n\t\t\t\tconfiguration['disable-extensions'] = currentWindowConfig['disable-extensions'];\n\t\t\t}\n\t\t\tconfiguration.loggers = {\n\t\t\t\tglobal: configuration.loggers.global,\n\t\t\t\twindow: currentWindowConfig?.loggers.window ?? configuration.loggers.window\n\t\t\t};\n\t\t}\n\n\t\t// Update window identifier and session now\n\t\t// that we have the window object in hand.\n\t\tconfiguration.windowId = window.id;\n\n\t\t// If the window was already loaded, make sure to unload it\n\t\t// first and only load the new configuration if that was\n\t\t// not vetoed\n\t\tif (window.isReady) {\n\t\t\tthis.lifecycleMainService.unload(window, UnloadReason.LOAD).then(async veto => {\n\t\t\t\tif (!veto) {\n\t\t\t\t\tawait this.doOpenInBrowserWindow(window!, configuration, options, defaultProfile);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.doOpenInBrowserWindow(window, configuration, options, defaultProfile);\n\t\t}\n\n\t\treturn window;\n\t}\n\n\tprivate async doOpenInBrowserWindow(window: ICodeWindow, configuration: INativeWindowConfiguration, options: IOpenBrowserWindowOptions, defaultProfile: IUserDataProfile): Promise<void> {\n\n\t\t// Register window for backups unless the window\n\t\t// is for extension development, where we do not\n\t\t// keep any backups.\n\n\t\tif (!configuration.extensionDevelopmentPath) {\n\t\t\tif (isWorkspaceIdentifier(configuration.workspace)) {\n\t\t\t\tconfiguration.backupPath = this.backupMainService.registerWorkspaceBackup({\n\t\t\t\t\tworkspace: configuration.workspace,\n\t\t\t\t\tremoteAuthority: configuration.remoteAuthority\n\t\t\t\t});\n\t\t\t} else if (isSingleFolderWorkspaceIdentifier(configuration.workspace)) {\n\t\t\t\tconfiguration.backupPath = this.backupMainService.registerFolderBackup({\n\t\t\t\t\tfolderUri: configuration.workspace.uri,\n\t\t\t\t\tremoteAuthority: configuration.remoteAuthority\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\t// Empty windows are special in that they provide no workspace on\n\t\t\t\t// their configuration. To properly register them with the backup\n\t\t\t\t// service, we either use the provided associated `backupFolder`\n\t\t\t\t// in case we restore a previously opened empty window or we have\n\t\t\t\t// to generate a new empty window workspace identifier to be used\n\t\t\t\t// as `backupFolder`.\n\n\t\t\t\tconfiguration.backupPath = this.backupMainService.registerEmptyWindowBackup({\n\t\t\t\t\tbackupFolder: options.emptyWindowBackupInfo?.backupFolder ?? createEmptyWorkspaceIdentifier().id,\n\t\t\t\t\tremoteAuthority: configuration.remoteAuthority\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (this.userDataProfilesMainService.isEnabled()) {\n\t\t\tconst workspace = configuration.workspace ?? toWorkspaceIdentifier(configuration.backupPath, false);\n\t\t\tconst profilePromise = this.resolveProfileForBrowserWindow(options, workspace, defaultProfile);\n\t\t\tconst profile = profilePromise instanceof Promise ? await profilePromise : profilePromise;\n\t\t\tconfiguration.profiles.profile = profile;\n\n\t\t\tif (!configuration.extensionDevelopmentPath) {\n\t\t\t\t// Associate the configured profile to the workspace\n\t\t\t\t// unless the window is for extension development,\n\t\t\t\t// where we do not persist the associations\n\t\t\t\tawait this.userDataProfilesMainService.setProfileForWorkspace(workspace, profile);\n\t\t\t}\n\t\t}\n\n\t\t// Load it\n\t\twindow.load(configuration);\n\t}\n\n\tprivate resolveProfileForBrowserWindow(options: IOpenBrowserWindowOptions, workspace: IAnyWorkspaceIdentifier, defaultProfile: IUserDataProfile): Promise<IUserDataProfile> | IUserDataProfile {\n\t\tif (options.forceProfile) {\n\t\t\treturn this.userDataProfilesMainService.profiles.find(p => p.name === options.forceProfile) ?? this.userDataProfilesMainService.createNamedProfile(options.forceProfile);\n\t\t}\n\n\t\tif (options.forceTempProfile) {\n\t\t\treturn this.userDataProfilesMainService.createTransientProfile();\n\t\t}\n\n\t\treturn this.userDataProfilesMainService.getProfileForWorkspace(workspace) ?? defaultProfile;\n\t}\n\n\tprivate onWindowClosed(window: ICodeWindow): void {\n\n\t\t// Remove from our list so that Electron can clean it up\n\t\tconst index = WindowsMainService.WINDOWS.indexOf(window);\n\t\tWindowsMainService.WINDOWS.splice(index, 1);\n\n\t\t// Emit\n\t\tthis._onDidChangeWindowsCount.fire({ oldCount: this.getWindowCount() + 1, newCount: this.getWindowCount() });\n\t}\n\n\tgetFocusedWindow(): ICodeWindow | undefined {\n\t\tconst window = BrowserWindow.getFocusedWindow();\n\t\tif (window) {\n\t\t\treturn this.getWindowById(window.id);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetLastActiveWindow(): ICodeWindow | undefined {\n\t\treturn this.doGetLastActiveWindow(this.getWindows());\n\t}\n\n\tprivate getLastActiveWindowForAuthority(remoteAuthority: string | undefined): ICodeWindow | undefined {\n\t\treturn this.doGetLastActiveWindow(this.getWindows().filter(window => isEqualAuthority(window.remoteAuthority, remoteAuthority)));\n\t}\n\n\tprivate doGetLastActiveWindow(windows: ICodeWindow[]): ICodeWindow | undefined {\n\t\tconst lastFocusedDate = Math.max.apply(Math, windows.map(window => window.lastFocusTime));\n\n\t\treturn windows.find(window => window.lastFocusTime === lastFocusedDate);\n\t}\n\n\tsendToFocused(channel: string, ...args: any[]): void {\n\t\tconst focusedWindow = this.getFocusedWindow() || this.getLastActiveWindow();\n\n\t\tfocusedWindow?.sendWhenReady(channel, CancellationToken.None, ...args);\n\t}\n\n\tsendToAll(channel: string, payload?: any, windowIdsToIgnore?: number[]): void {\n\t\tfor (const window of this.getWindows()) {\n\t\t\tif (windowIdsToIgnore && windowIdsToIgnore.indexOf(window.id) >= 0) {\n\t\t\t\tcontinue; // do not send if we are instructed to ignore it\n\t\t\t}\n\n\t\t\twindow.sendWhenReady(channel, CancellationToken.None, payload);\n\t\t}\n\t}\n\n\tgetWindows(): ICodeWindow[] {\n\t\treturn WindowsMainService.WINDOWS;\n\t}\n\n\tgetWindowCount(): number {\n\t\treturn WindowsMainService.WINDOWS.length;\n\t}\n\n\tgetWindowById(windowId: number): ICodeWindow | undefined {\n\t\tconst windows = this.getWindows().filter(window => window.id === windowId);\n\n\t\treturn firstOrDefault(windows);\n\t}\n\n\tgetWindowByWebContents(webContents: WebContents): ICodeWindow | undefined {\n\t\tconst browserWindow = BrowserWindow.fromWebContents(webContents);\n\t\tif (!browserWindow) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.getWindowById(browserWindow.id);\n\t}\n}\n"]}