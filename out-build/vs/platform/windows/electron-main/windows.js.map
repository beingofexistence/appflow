{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/windows/electron-main/windows.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWnF,QAAA,IAAI,GAAkB,IAAA,mBAAG,EAAkC,oBAAoB,CAAC,CAAC;IAqC9F,IAAkB,WAmBjB;IAnBD,WAAkB,WAAW;QAE5B,6CAA6C;QAC7C,2CAAG,CAAA;QAEH,iGAAiG;QACjG,6CAAI,CAAA;QAEJ,2CAA2C;QAC3C,6CAAI,CAAA;QAEJ,uCAAuC;QACvC,iDAAM,CAAA;QAEN,2BAA2B;QAC3B,mDAAO,CAAA;QAEP,0BAA0B;QAC1B,2CAAG,CAAA;IACJ,CAAC,EAnBiB,WAAW,2BAAX,WAAW,QAmB5B","file":"windows.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WebContents } from 'electron';\nimport { Event } from 'vs/base/common/event';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ICodeWindow } from 'vs/platform/window/electron-main/window';\nimport { IOpenEmptyWindowOptions, IWindowOpenable } from 'vs/platform/window/common/window';\n\nexport const IWindowsMainService = createDecorator<IWindowsMainService>('windowsMainService');\n\nexport interface IWindowsMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeWindowsCount: Event<IWindowsCountChangedEvent>;\n\n\treadonly onDidOpenWindow: Event<ICodeWindow>;\n\treadonly onDidSignalReadyWindow: Event<ICodeWindow>;\n\treadonly onDidTriggerSystemContextMenu: Event<{ window: ICodeWindow; x: number; y: number }>;\n\treadonly onDidDestroyWindow: Event<ICodeWindow>;\n\n\topen(openConfig: IOpenConfiguration): Promise<ICodeWindow[]>;\n\topenEmptyWindow(openConfig: IOpenEmptyConfiguration, options?: IOpenEmptyWindowOptions): Promise<ICodeWindow[]>;\n\topenExtensionDevelopmentHostWindow(extensionDevelopmentPath: string[], openConfig: IOpenConfiguration): Promise<ICodeWindow[]>;\n\n\topenExistingWindow(window: ICodeWindow, openConfig: IOpenConfiguration): void;\n\n\tsendToFocused(channel: string, ...args: any[]): void;\n\tsendToAll(channel: string, payload?: any, windowIdsToIgnore?: number[]): void;\n\n\tgetWindows(): ICodeWindow[];\n\tgetWindowCount(): number;\n\n\tgetFocusedWindow(): ICodeWindow | undefined;\n\tgetLastActiveWindow(): ICodeWindow | undefined;\n\n\tgetWindowById(windowId: number): ICodeWindow | undefined;\n\tgetWindowByWebContents(webContents: WebContents): ICodeWindow | undefined;\n}\n\nexport interface IWindowsCountChangedEvent {\n\treadonly oldCount: number;\n\treadonly newCount: number;\n}\n\nexport const enum OpenContext {\n\n\t// opening when running from the command line\n\tCLI,\n\n\t// macOS only: opening from the dock (also when opening files to a running instance from desktop)\n\tDOCK,\n\n\t// opening from the main application window\n\tMENU,\n\n\t// opening from a file or folder dialog\n\tDIALOG,\n\n\t// opening from the OS's UI\n\tDESKTOP,\n\n\t// opening through the API\n\tAPI\n}\n\nexport interface IBaseOpenConfiguration {\n\treadonly context: OpenContext;\n\treadonly contextWindowId?: number;\n}\n\nexport interface IOpenConfiguration extends IBaseOpenConfiguration {\n\treadonly cli: NativeParsedArgs;\n\treadonly userEnv?: IProcessEnvironment;\n\treadonly urisToOpen?: IWindowOpenable[];\n\treadonly waitMarkerFileURI?: URI;\n\treadonly preferNewWindow?: boolean;\n\treadonly forceNewWindow?: boolean;\n\treadonly forceNewTabbedWindow?: boolean;\n\treadonly forceReuseWindow?: boolean;\n\treadonly forceEmpty?: boolean;\n\treadonly diffMode?: boolean;\n\treadonly mergeMode?: boolean;\n\taddMode?: boolean;\n\treadonly gotoLineMode?: boolean;\n\treadonly initialStartup?: boolean;\n\treadonly noRecentEntry?: boolean;\n\t/**\n\t * The remote authority to use when windows are opened with either\n\t * - no workspace (empty window)\n\t * - a workspace that is neither `file://` nor `vscode-remote://`\n\t */\n\treadonly remoteAuthority?: string;\n\treadonly forceProfile?: string;\n\treadonly forceTempProfile?: boolean;\n}\n\nexport interface IOpenEmptyConfiguration extends IBaseOpenConfiguration { }\n"]}