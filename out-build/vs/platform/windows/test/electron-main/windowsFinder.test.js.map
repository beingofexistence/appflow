{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/windows/test/electron-main/windowsFinder.test.ts"],"names":[],"mappings":"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","file":"windowsFinder.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { join } from 'vs/base/common/path';\nimport { extUriBiasedIgnorePathCase } from 'vs/base/common/resources';\nimport { URI, UriDto } from 'vs/base/common/uri';\nimport { ICommandAction } from 'vs/platform/action/common/action';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { INativeWindowConfiguration } from 'vs/platform/window/common/window';\nimport { ICodeWindow, ILoadEvent, IWindowState } from 'vs/platform/window/electron-main/window';\nimport { findWindowOnFile } from 'vs/platform/windows/electron-main/windowsFinder';\nimport { toWorkspaceFolders } from 'vs/platform/workspaces/common/workspaces';\nimport { IWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { FileAccess } from 'vs/base/common/network';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('WindowsFinder', () => {\n\n\tconst fixturesFolder = FileAccess.asFileUri('vs/platform/windows/test/electron-main/fixtures').fsPath;\n\n\tconst testWorkspace: IWorkspaceIdentifier = {\n\t\tid: Date.now().toString(),\n\t\tconfigPath: URI.file(join(fixturesFolder, 'workspaces.json'))\n\t};\n\n\tconst testWorkspaceFolders = toWorkspaceFolders([{ path: join(fixturesFolder, 'vscode_workspace_1_folder') }, { path: join(fixturesFolder, 'vscode_workspace_2_folder') }], testWorkspace.configPath, extUriBiasedIgnorePathCase);\n\tconst localWorkspaceResolver = async (workspace: any) => { return workspace === testWorkspace ? { id: testWorkspace.id, configPath: workspace.configPath, folders: testWorkspaceFolders } : undefined; };\n\n\tfunction createTestCodeWindow(options: { lastFocusTime: number; openedFolderUri?: URI; openedWorkspace?: IWorkspaceIdentifier }): ICodeWindow {\n\t\treturn new class implements ICodeWindow {\n\t\t\tonWillLoad: Event<ILoadEvent> = Event.None;\n\t\t\tonDidTriggerSystemContextMenu: Event<{ x: number; y: number }> = Event.None;\n\t\t\tonDidSignalReady: Event<void> = Event.None;\n\t\t\tonDidClose: Event<void> = Event.None;\n\t\t\tonDidDestroy: Event<void> = Event.None;\n\t\t\twhenClosedOrLoaded: Promise<void> = Promise.resolve();\n\t\t\tid: number = -1;\n\t\t\twin: Electron.BrowserWindow = null!;\n\t\t\tconfig: INativeWindowConfiguration | undefined;\n\t\t\topenedWorkspace = options.openedFolderUri ? { id: '', uri: options.openedFolderUri } : options.openedWorkspace;\n\t\t\tbackupPath?: string | undefined;\n\t\t\tremoteAuthority?: string | undefined;\n\t\t\tisExtensionDevelopmentHost = false;\n\t\t\tisExtensionTestHost = false;\n\t\t\tlastFocusTime = options.lastFocusTime;\n\t\t\tisFullScreen = false;\n\t\t\tisReady = true;\n\n\t\t\tready(): Promise<ICodeWindow> { throw new Error('Method not implemented.'); }\n\t\t\tsetReady(): void { throw new Error('Method not implemented.'); }\n\t\t\taddTabbedWindow(window: ICodeWindow): void { throw new Error('Method not implemented.'); }\n\t\t\tload(config: INativeWindowConfiguration, options: { isReload?: boolean }): void { throw new Error('Method not implemented.'); }\n\t\t\treload(cli?: NativeParsedArgs): void { throw new Error('Method not implemented.'); }\n\t\t\tfocus(options?: { force: boolean }): void { throw new Error('Method not implemented.'); }\n\t\t\tclose(): void { throw new Error('Method not implemented.'); }\n\t\t\tgetBounds(): Electron.Rectangle { throw new Error('Method not implemented.'); }\n\t\t\tsend(channel: string, ...args: any[]): void { throw new Error('Method not implemented.'); }\n\t\t\tsendWhenReady(channel: string, token: CancellationToken, ...args: any[]): void { throw new Error('Method not implemented.'); }\n\t\t\ttoggleFullScreen(): void { throw new Error('Method not implemented.'); }\n\t\t\tisMinimized(): boolean { throw new Error('Method not implemented.'); }\n\t\t\tsetRepresentedFilename(name: string): void { throw new Error('Method not implemented.'); }\n\t\t\tgetRepresentedFilename(): string | undefined { throw new Error('Method not implemented.'); }\n\t\t\tsetDocumentEdited(edited: boolean): void { throw new Error('Method not implemented.'); }\n\t\t\tisDocumentEdited(): boolean { throw new Error('Method not implemented.'); }\n\t\t\thandleTitleDoubleClick(): void { throw new Error('Method not implemented.'); }\n\t\t\tupdateTouchBar(items: UriDto<ICommandAction>[][]): void { throw new Error('Method not implemented.'); }\n\t\t\tserializeWindowState(): IWindowState { throw new Error('Method not implemented'); }\n\t\t\tupdateWindowControls(options: { height?: number | undefined; backgroundColor?: string | undefined; foregroundColor?: string | undefined }): void { throw new Error('Method not implemented.'); }\n\t\t\tdispose(): void { }\n\t\t};\n\t}\n\n\tconst vscodeFolderWindow: ICodeWindow = createTestCodeWindow({ lastFocusTime: 1, openedFolderUri: URI.file(join(fixturesFolder, 'vscode_folder')) });\n\tconst lastActiveWindow: ICodeWindow = createTestCodeWindow({ lastFocusTime: 3, openedFolderUri: undefined });\n\tconst noVscodeFolderWindow: ICodeWindow = createTestCodeWindow({ lastFocusTime: 2, openedFolderUri: URI.file(join(fixturesFolder, 'no_vscode_folder')) });\n\tconst windows: ICodeWindow[] = [\n\t\tvscodeFolderWindow,\n\t\tlastActiveWindow,\n\t\tnoVscodeFolderWindow,\n\t];\n\n\ttest('New window without folder when no windows exist', async () => {\n\t\tassert.strictEqual(await findWindowOnFile([], URI.file('nonexisting'), localWorkspaceResolver), undefined);\n\t\tassert.strictEqual(await findWindowOnFile([], URI.file(join(fixturesFolder, 'no_vscode_folder', 'file.txt')), localWorkspaceResolver), undefined);\n\t});\n\n\ttest('Existing window with folder', async () => {\n\t\tassert.strictEqual(await findWindowOnFile(windows, URI.file(join(fixturesFolder, 'no_vscode_folder', 'file.txt')), localWorkspaceResolver), noVscodeFolderWindow);\n\n\t\tassert.strictEqual(await findWindowOnFile(windows, URI.file(join(fixturesFolder, 'vscode_folder', 'file.txt')), localWorkspaceResolver), vscodeFolderWindow);\n\n\t\tconst window: ICodeWindow = createTestCodeWindow({ lastFocusTime: 1, openedFolderUri: URI.file(join(fixturesFolder, 'vscode_folder', 'nested_folder')) });\n\t\tassert.strictEqual(await findWindowOnFile([window], URI.file(join(fixturesFolder, 'vscode_folder', 'nested_folder', 'subfolder', 'file.txt')), localWorkspaceResolver), window);\n\t});\n\n\ttest('More specific existing window wins', async () => {\n\t\tconst window: ICodeWindow = createTestCodeWindow({ lastFocusTime: 2, openedFolderUri: URI.file(join(fixturesFolder, 'no_vscode_folder')) });\n\t\tconst nestedFolderWindow: ICodeWindow = createTestCodeWindow({ lastFocusTime: 1, openedFolderUri: URI.file(join(fixturesFolder, 'no_vscode_folder', 'nested_folder')) });\n\t\tassert.strictEqual(await findWindowOnFile([window, nestedFolderWindow], URI.file(join(fixturesFolder, 'no_vscode_folder', 'nested_folder', 'subfolder', 'file.txt')), localWorkspaceResolver), nestedFolderWindow);\n\t});\n\n\ttest('Workspace folder wins', async () => {\n\t\tconst window: ICodeWindow = createTestCodeWindow({ lastFocusTime: 1, openedWorkspace: testWorkspace });\n\t\tassert.strictEqual(await findWindowOnFile([window], URI.file(join(fixturesFolder, 'vscode_workspace_2_folder', 'nested_vscode_folder', 'subfolder', 'file.txt')), localWorkspaceResolver), window);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}