{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/telemetry/test/common/telemetryLogAppender.test.ts"],"names":[],"mappings":";;;;IAYA,MAAM,mBAAoB,SAAQ,SAAG;QAIpC,YAAY,WAAqB,SAAG;YACnC,KAAK,EAAE,CAAC;YAHF,SAAI,GAAa,EAAE,CAAC;YAI1B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzB,CAAC;QAED,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;YACpC,IAAI,IAAI,CAAC,CAAC,CAAa,cAAQ,CAAC,KAAK,CAAC,EAAE;gBACvC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;aAC/C;QACF,CAAC;QAED,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;YACpC,IAAI,IAAI,CAAC,CAAC,CAAa,cAAQ,CAAC,KAAK,CAAC,EAAE;gBACvC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACxB;QACF,CAAC;QAED,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW;YACnC,IAAI,IAAI,CAAC,CAAC,CAAa,cAAQ,CAAC,IAAI,CAAC,EAAE;gBACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACxB;QACF,CAAC;QAED,IAAI,CAAC,OAAuB,EAAE,GAAG,IAAW;YAC3C,IAAI,IAAI,CAAC,CAAC,CAAa,cAAQ,CAAC,OAAO,CAAC,EAAE;gBACzC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;aACnC;QACF,CAAC;QAED,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW;YACpC,IAAI,IAAI,CAAC,CAAC,CAAa,cAAQ,CAAC,KAAK,CAAC,EAAE;gBACvC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACxB;QACF,CAAC;QAEQ,OAAO,KAAW,CAAC;QAC5B,KAAK,KAAW,CAAC;KACjB;IAED,MAAa,IAAI;QAKhB,YAA6B,CAAkB;YAAlB,MAAC,GAAD,CAAC,CAAiB;YAc/C,0BAAqB,GAAG,aAAK,CAAC,IAAI,CAAC;YACnC,wBAAmB,GAAG,aAAK,CAAC,IAAI,CAAC;YACjC,uBAAkB,GAAG,aAAK,CAAC,IAAI,CAAC;QAhBmB,CAAC;QAEpD,SAAS;YACR,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAED,YAAY;YACX,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACjB,IAAI,CAAC,MAAM,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAQ,CAAC;aACrD;YAED,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAKD,WAAW,KAAW,CAAC;QACvB,WAAW,KAAK,OAAO,cAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QACvC,aAAa,KAAW,CAAC;QACzB,kBAAkB,KAAK,OAAO,IAAI,CAAC,CAAC,CAAQ,CAAC,CAAC;QAC9C,cAAc,KAAK,CAAC;QACpB,gBAAgB,KAAW,CAAC;QAC5B,oBAAoB,KAAK,OAAO,EAAE,CAAC,CAAC,CAAC;QACrC,mBAAmB,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;KAC3C;IA9BD,oBA8BC;IAED,KAAK,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAEjC,IAAI,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,iBAAiB,GAAG,IAAI,IAAI,CAAuB,SAAG,CAAe,CAAC;YAC5E,MAAM,wBAAwB,GAAG,IAAI,+BAAI,EAAsB,CAAC;YAChE,MAAM,UAAU,GAAG,IAAI,2BAAI,CAAiB,IAAI,SAAG,EAAa,EAAE,iBAAiB,EAAE,wBAAwB,CAAC,IAAI,CAAC,iBAAG,EAAkB,EAAE,CAAC,EAAE,wBAAwB,CAAC,IAAI,CAAC,oBAAG,EAAc,EAAE,CAAC,CAAC,CAAC;YACjM,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,EAAE,CAAC,CAAC;YACrF,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpE,wBAAwB,CAAC,OAAO,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,iBAAiB,GAAG,IAAI,IAAI,CAAuB,cAAQ,CAAC,KAAK,CAAC,CAAC;YACzE,MAAM,wBAAwB,GAAG,IAAI,+BAAI,EAAsB,CAAC;YAChE,MAAM,UAAU,GAAG,IAAI,2BAAI,CAAiB,IAAI,SAAG,EAAa,EAAE,iBAAiB,EAAE,wBAAwB,CAAC,IAAI,CAAC,iBAAG,EAAkB,EAAE,CAAC,EAAE,wBAAwB,CAAC,IAAI,CAAC,oBAAG,EAAc,EAAE,CAAC,CAAC,CAAC;YACjM,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,EAAE,CAAC,CAAC;YACrF,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;oBACpG,UAAU,EAAE;wBACX,KAAK,EAAE,OAAO;qBACd;oBACD,YAAY,EAAE;wBACb,MAAM,EAAE,CAAC,EAAE,kBAAkB,EAAE,CAAC;qBAChC;iBACD,CAAC,CAAC,CAAC,CAAC;YACL,wBAAwB,CAAC,OAAO,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"telemetryLogAppender.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { AbstractLogger, DEFAULT_LOG_LEVEL, ILogger, ILoggerService, LogLevel, NullLogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { TelemetryLogAppender } from 'vs/platform/telemetry/common/telemetryLogAppender';\n\nclass TestTelemetryLogger extends AbstractLogger implements ILogger {\n\n\tpublic logs: string[] = [];\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper();\n\t\tthis.setLevel(logLevel);\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Trace)) {\n\t\t\tthis.logs.push(message + JSON.stringify(args));\n\t\t}\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Debug)) {\n\t\t\tthis.logs.push(message);\n\t\t}\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Info)) {\n\t\t\tthis.logs.push(message);\n\t\t}\n\t}\n\n\twarn(message: string | Error, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Warning)) {\n\t\t\tthis.logs.push(message.toString());\n\t\t}\n\t}\n\n\terror(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Error)) {\n\t\t\tthis.logs.push(message);\n\t\t}\n\t}\n\n\toverride dispose(): void { }\n\tflush(): void { }\n}\n\nexport class TestTelemetryLoggerService implements ILoggerService {\n\t_serviceBrand: undefined;\n\n\tlogger?: TestTelemetryLogger;\n\n\tconstructor(private readonly logLevel: LogLevel) { }\n\n\tgetLogger() {\n\t\treturn this.logger;\n\t}\n\n\tcreateLogger() {\n\t\tif (!this.logger) {\n\t\t\tthis.logger = new TestTelemetryLogger(this.logLevel);\n\t\t}\n\n\t\treturn this.logger;\n\t}\n\n\tonDidChangeVisibility = Event.None;\n\tonDidChangeLogLevel = Event.None;\n\tonDidChangeLoggers = Event.None;\n\tsetLogLevel(): void { }\n\tgetLogLevel() { return LogLevel.Info; }\n\tsetVisibility(): void { }\n\tgetDefaultLogLevel() { return this.logLevel; }\n\tregisterLogger() { }\n\tderegisterLogger(): void { }\n\tgetRegisteredLoggers() { return []; }\n\tgetRegisteredLogger() { return undefined; }\n}\n\nsuite('TelemetryLogAdapter', () => {\n\n\ttest('Do not Log Telemetry if log level is not trace', async () => {\n\t\tconst testLoggerService = new TestTelemetryLoggerService(DEFAULT_LOG_LEVEL);\n\t\tconst testInstantiationService = new TestInstantiationService();\n\t\tconst testObject = new TelemetryLogAppender(new NullLogService(), testLoggerService, testInstantiationService.stub(IEnvironmentService, {}), testInstantiationService.stub(IProductService, {}));\n\t\ttestObject.log('testEvent', { hello: 'world', isTrue: true, numberBetween1And3: 2 });\n\t\tassert.strictEqual(testLoggerService.createLogger().logs.length, 2);\n\t\ttestInstantiationService.dispose();\n\t});\n\n\ttest('Log Telemetry if log level is trace', async () => {\n\t\tconst testLoggerService = new TestTelemetryLoggerService(LogLevel.Trace);\n\t\tconst testInstantiationService = new TestInstantiationService();\n\t\tconst testObject = new TelemetryLogAppender(new NullLogService(), testLoggerService, testInstantiationService.stub(IEnvironmentService, {}), testInstantiationService.stub(IProductService, {}));\n\t\ttestObject.log('testEvent', { hello: 'world', isTrue: true, numberBetween1And3: 2 });\n\t\tassert.strictEqual(testLoggerService.createLogger().logs[2], 'telemetry/testEvent' + JSON.stringify([{\n\t\t\tproperties: {\n\t\t\t\thello: 'world',\n\t\t\t},\n\t\t\tmeasurements: {\n\t\t\t\tisTrue: 1, numberBetween1And3: 2\n\t\t\t}\n\t\t}]));\n\t\ttestInstantiationService.dispose();\n\t});\n});\n"]}