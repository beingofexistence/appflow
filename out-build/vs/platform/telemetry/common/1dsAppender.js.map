{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/telemetry/common/1dsAppender.ts"],"names":[],"mappings":"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","file":"1dsAppender.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IExtendedConfiguration, IExtendedTelemetryItem, ITelemetryItem, ITelemetryUnloadState } from '@microsoft/1ds-core-js';\nimport type { IChannelConfiguration, IXHROverride, PostChannel } from '@microsoft/1ds-post-js';\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { mixin } from 'vs/base/common/objects';\nimport { ITelemetryAppender, validateTelemetryData } from 'vs/platform/telemetry/common/telemetryUtils';\n\n// Interface type which is a subset of @microsoft/1ds-core-js AppInsightsCore.\n// Allows us to more easily build mock objects for testing as the interface is quite large and we only need a few properties.\nexport interface IAppInsightsCore {\n\tpluginVersionString: string;\n\ttrack(item: ITelemetryItem | IExtendedTelemetryItem): void;\n\tunload(isAsync: boolean, unloadComplete: (unloadState: ITelemetryUnloadState) => void): void;\n}\n\nconst endpointUrl = 'https://mobile.events.data.microsoft.com/OneCollector/1.0';\nconst endpointHealthUrl = 'https://mobile.events.data.microsoft.com/ping';\n\nasync function getClient(instrumentationKey: string, addInternalFlag?: boolean, xhrOverride?: IXHROverride): Promise<IAppInsightsCore> {\n\tconst oneDs = await importAMDNodeModule<typeof import('@microsoft/1ds-core-js')>('@microsoft/1ds-core-js', 'dist/ms.core.js');\n\tconst postPlugin = await importAMDNodeModule<typeof import('@microsoft/1ds-post-js')>('@microsoft/1ds-post-js', 'dist/ms.post.js');\n\tconst appInsightsCore = new oneDs.AppInsightsCore();\n\tconst collectorChannelPlugin: PostChannel = new postPlugin.PostChannel();\n\t// Configure the app insights core to send to collector++ and disable logging of debug info\n\tconst coreConfig: IExtendedConfiguration = {\n\t\tinstrumentationKey,\n\t\tendpointUrl,\n\t\tloggingLevelTelemetry: 0,\n\t\tloggingLevelConsole: 0,\n\t\tdisableCookiesUsage: true,\n\t\tdisableDbgExt: true,\n\t\tdisableInstrumentationKeyValidation: true,\n\t\tchannels: [[\n\t\t\tcollectorChannelPlugin\n\t\t]]\n\t};\n\n\tif (xhrOverride) {\n\t\tcoreConfig.extensionConfig = {};\n\t\t// Configure the channel to use a XHR Request override since it's not available in node\n\t\tconst channelConfig: IChannelConfiguration = {\n\t\t\talwaysUseXhrOverride: true,\n\t\t\thttpXHROverride: xhrOverride\n\t\t};\n\t\tcoreConfig.extensionConfig[collectorChannelPlugin.identifier] = channelConfig;\n\t}\n\n\tappInsightsCore.initialize(coreConfig, []);\n\n\tappInsightsCore.addTelemetryInitializer((envelope) => {\n\t\tif (addInternalFlag) {\n\t\t\tenvelope['ext'] = envelope['ext'] ?? {};\n\t\t\tenvelope['ext']['utc'] = envelope['ext']['utc'] ?? {};\n\t\t\t// Sets it to be internal only based on Windows UTC flagging\n\t\t\tenvelope['ext']['utc']['flags'] = 0x0000811ECD;\n\t\t}\n\t});\n\n\treturn appInsightsCore;\n}\n\n// TODO @lramos15 maybe make more in line with src/vs/platform/telemetry/browser/appInsightsAppender.ts with caching support\nexport abstract class AbstractOneDataSystemAppender implements ITelemetryAppender {\n\n\tprotected _aiCoreOrKey: IAppInsightsCore | string | undefined;\n\tprivate _asyncAiCore: Promise<IAppInsightsCore> | null;\n\tprotected readonly endPointUrl = endpointUrl;\n\tprotected readonly endPointHealthUrl = endpointHealthUrl;\n\n\tconstructor(\n\t\tprivate readonly _isInternalTelemetry: boolean,\n\t\tprivate _eventPrefix: string,\n\t\tprivate _defaultData: { [key: string]: any } | null,\n\t\tiKeyOrClientFactory: string | (() => IAppInsightsCore), // allow factory function for testing\n\t\tprivate _xhrOverride?: IXHROverride\n\t) {\n\t\tif (!this._defaultData) {\n\t\t\tthis._defaultData = {};\n\t\t}\n\n\t\tif (typeof iKeyOrClientFactory === 'function') {\n\t\t\tthis._aiCoreOrKey = iKeyOrClientFactory();\n\t\t} else {\n\t\t\tthis._aiCoreOrKey = iKeyOrClientFactory;\n\t\t}\n\t\tthis._asyncAiCore = null;\n\t}\n\n\tprivate _withAIClient(callback: (aiCore: IAppInsightsCore) => void): void {\n\t\tif (!this._aiCoreOrKey) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof this._aiCoreOrKey !== 'string') {\n\t\t\tcallback(this._aiCoreOrKey);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._asyncAiCore) {\n\t\t\tthis._asyncAiCore = getClient(this._aiCoreOrKey, this._isInternalTelemetry, this._xhrOverride);\n\t\t}\n\n\t\tthis._asyncAiCore.then(\n\t\t\t(aiClient) => {\n\t\t\t\tcallback(aiClient);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t);\n\t}\n\n\tlog(eventName: string, data?: any): void {\n\t\tif (!this._aiCoreOrKey) {\n\t\t\treturn;\n\t\t}\n\t\tdata = mixin(data, this._defaultData);\n\t\tdata = validateTelemetryData(data);\n\t\tconst name = this._eventPrefix + '/' + eventName;\n\n\t\ttry {\n\t\t\tthis._withAIClient((aiClient) => {\n\t\t\t\taiClient.pluginVersionString = data?.properties.version ?? 'Unknown';\n\t\t\t\taiClient.track({\n\t\t\t\t\tname,\n\t\t\t\t\tbaseData: { name, properties: data?.properties, measurements: data?.measurements }\n\t\t\t\t});\n\t\t\t});\n\t\t} catch { }\n\t}\n\n\tflush(): Promise<any> {\n\t\tif (this._aiCoreOrKey) {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tthis._withAIClient((aiClient) => {\n\t\t\t\t\taiClient.unload(true, () => {\n\t\t\t\t\t\tthis._aiCoreOrKey = undefined;\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"]}