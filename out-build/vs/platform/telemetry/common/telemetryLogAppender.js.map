{"version":3,"sources":["vs/platform/telemetry/common/telemetryLogAppender.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IASzF,IAAM,IAAI,GAAV,MAAM,IAAqB,SAAQ,eAAG;QAI5C,YACc,UAAe,EACZ,aAAkB,EACb,kBAAuB,EAC3B,cAAmB,EACnB,IAAiB,EAAE;YAEpC,KAAK,EAAE,CAAC;YAFS,MAAC,GAAD,CAAC,CAAkB;YAIpC,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,oBAAG,CAAY,CAAC;YACvD,IAAI,MAAM,EAAE;gBACX,IAAI,CAAC,CAAC,GAAQ,IAAI,CAAC,CAAC,CAAS,MAAM,CAAC,CAAC;aACrC;iBAAM;gBACN,wIAAwI;gBACxI,MAAM,wBAAwB,GAAG,IAAA,oBAAG,EAAW,cAAc,EAAE,kBAAkB,CAAC,CAAC;gBACnF,MAAM,SAAS,GAAG,wBAAwB,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;gBAChE,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,IAAA,oBAAG,EAAe,cAAc,EAAE,kBAAkB,CAAC,IAAI,UAAU,CAAC,QAAQ,EAAE,KAAK,cAAQ,CAAC,KAAK,CAAC;gBAC1H,IAAI,CAAC,CAAC,GAAQ,IAAI,CAAC,CAAC,CAAS,aAAa,CAAC,YAAY,CAAC,oBAAG,EAAa,EAAE,IAAI,EAAE,IAAA,cAAQ,EAAC,CAAc,EAAE,IAAc,EAAE,SAAS,CAAC,EAAE,MAAM,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC9J,IAAI,CAAC,CAAC,CAAS,UAAU,CAAC,mBAAmB,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,oBAAG,EAAa,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC/G,IAAI,CAAC,CAAC,CAAM,IAAI,CAAC,gGAAgG,CAAC,CAAC;gBACnH,IAAI,CAAC,CAAC,CAAM,IAAI,CAAC,6DAA6D,CAAC,CAAC;aAChF;QACF,CAAC;QAED,KAAK;YACJ,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAED,GAAG,CAAC,SAAiB,EAAE,IAAS;YAC/B,IAAI,CAAC,CAAC,CAAM,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,aAAkB,SAAS,EAAE,EAAE,IAAA,oBAAG,EAAmB,IAAI,CAAC,CAAC,CAAC;QACxF,CAAC;KACD,CAAA;IAnCY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,SAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,oBAAG,CAAA;OARO,IAAI,CAmChB","file":"telemetryLogAppender.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILogService, ILogger, ILoggerService, LogLevel } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ITelemetryAppender, isLoggingOnly, supportsTelemetry, telemetryLogId, validateTelemetryData } from 'vs/platform/telemetry/common/telemetryUtils';\n\nexport class TelemetryLogAppender extends Disposable implements ITelemetryAppender {\n\n\tprivate readonly logger: ILogger;\n\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\tprivate readonly prefix: string = '',\n\t) {\n\t\tsuper();\n\n\t\tconst logger = loggerService.getLogger(telemetryLogId);\n\t\tif (logger) {\n\t\t\tthis.logger = this._register(logger);\n\t\t} else {\n\t\t\t// Not a perfect check, but a nice way to indicate if we only have logging enabled for debug purposes and nothing is actually being sent\n\t\t\tconst justLoggingAndNotSending = isLoggingOnly(productService, environmentService);\n\t\t\tconst logSuffix = justLoggingAndNotSending ? ' (Not Sent)' : '';\n\t\t\tconst isVisible = () => supportsTelemetry(productService, environmentService) && logService.getLevel() === LogLevel.Trace;\n\t\t\tthis.logger = this._register(loggerService.createLogger(telemetryLogId, { name: localize('telemetryLog', \"Telemetry{0}\", logSuffix), hidden: !isVisible() }));\n\t\t\tthis._register(logService.onDidChangeLogLevel(() => loggerService.setVisibility(telemetryLogId, isVisible())));\n\t\t\tthis.logger.info('Below are logs for every telemetry event sent from VS Code once the log level is set to trace.');\n\t\t\tthis.logger.info('===========================================================');\n\t\t}\n\t}\n\n\tflush(): Promise<any> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tlog(eventName: string, data: any): void {\n\t\tthis.logger.trace(`${this.prefix}telemetry/${eventName}`, validateTelemetryData(data));\n\t}\n}\n\n"]}