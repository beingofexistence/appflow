{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/telemetry/common/telemetryUtils.ts"],"names":[],"mappings":"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","file":"telemetryUtils.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { cloneAndChange, safeStringify } from 'vs/base/common/objects';\nimport { isObject } from 'vs/base/common/types';\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { ConfigurationTarget, ConfigurationTargetToString, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { getRemoteName } from 'vs/platform/remote/common/remoteHosts';\nimport { verifyMicrosoftInternalDomain } from 'vs/platform/telemetry/common/commonProperties';\nimport { ICustomEndpointTelemetryService, ITelemetryData, ITelemetryEndpoint, ITelemetryService, TelemetryConfiguration, TelemetryLevel, TELEMETRY_CRASH_REPORTER_SETTING_ID, TELEMETRY_OLD_SETTING_ID, TELEMETRY_SETTING_ID } from 'vs/platform/telemetry/common/telemetry';\n\n/**\n * A special class used to denoting a telemetry value which should not be clean.\n * This is because that value is \"Trusted\" not to contain identifiable information such as paths.\n * NOTE: This is used as an API type as well, and should not be changed.\n */\nexport class TelemetryTrustedValue<T> {\n\t// This is merely used as an identifier as the instance will be lost during serialization over the exthost\n\tpublic readonly isTrustedTelemetryValue = true;\n\tconstructor(public readonly value: T) { }\n}\n\nexport class NullTelemetryServiceShape implements ITelemetryService {\n\tdeclare readonly _serviceBrand: undefined;\n\treadonly telemetryLevel = TelemetryLevel.NONE;\n\treadonly sessionId = 'someValue.sessionId';\n\treadonly machineId = 'someValue.machineId';\n\treadonly firstSessionDate = 'someValue.firstSessionDate';\n\treadonly sendErrorTelemetry = false;\n\tpublicLog() { }\n\tpublicLog2() { }\n\tpublicLogError() { }\n\tpublicLogError2() { }\n\tsetExperimentProperty() { }\n}\n\nexport const NullTelemetryService = new NullTelemetryServiceShape();\n\nexport class NullEndpointTelemetryService implements ICustomEndpointTelemetryService {\n\t_serviceBrand: undefined;\n\n\tasync publicLog(_endpoint: ITelemetryEndpoint, _eventName: string, _data?: ITelemetryData): Promise<void> {\n\t\t// noop\n\t}\n\n\tasync publicLogError(_endpoint: ITelemetryEndpoint, _errorEventName: string, _data?: ITelemetryData): Promise<void> {\n\t\t// noop\n\t}\n}\n\nexport const telemetryLogId = 'telemetry';\nexport const extensionTelemetryLogChannelId = 'extensionTelemetryLog';\n\nexport interface ITelemetryAppender {\n\tlog(eventName: string, data: any): void;\n\tflush(): Promise<any>;\n}\n\nexport const NullAppender: ITelemetryAppender = { log: () => null, flush: () => Promise.resolve(null) };\n\n\n/* __GDPR__FRAGMENT__\n\t\"URIDescriptor\" : {\n\t\t\"mimeType\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"scheme\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"ext\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"path\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t}\n*/\nexport interface URIDescriptor {\n\tmimeType?: string;\n\tscheme?: string;\n\text?: string;\n\tpath?: string;\n}\n\nexport function configurationTelemetry(telemetryService: ITelemetryService, configurationService: IConfigurationService): IDisposable {\n\t// Debounce the event by 1000 ms and merge all affected keys into one event\n\tconst debouncedConfigService = Event.debounce(configurationService.onDidChangeConfiguration, (last, cur) => {\n\t\tconst newAffectedKeys: ReadonlySet<string> = last ? new Set([...last.affectedKeys, ...cur.affectedKeys]) : cur.affectedKeys;\n\t\treturn { ...cur, affectedKeys: newAffectedKeys };\n\t}, 1000, true);\n\n\treturn debouncedConfigService(event => {\n\t\tif (event.source !== ConfigurationTarget.DEFAULT) {\n\t\t\ttype UpdateConfigurationClassification = {\n\t\t\t\towner: 'lramos15, sbatten';\n\t\t\t\tcomment: 'Event which fires when user updates settings';\n\t\t\t\tconfigurationSource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'What configuration file was updated i.e user or workspace' };\n\t\t\t\tconfigurationKeys: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'What configuration keys were updated' };\n\t\t\t};\n\t\t\ttype UpdateConfigurationEvent = {\n\t\t\t\tconfigurationSource: string;\n\t\t\t\tconfigurationKeys: string[];\n\t\t\t};\n\t\t\ttelemetryService.publicLog2<UpdateConfigurationEvent, UpdateConfigurationClassification>('updateConfiguration', {\n\t\t\t\tconfigurationSource: ConfigurationTargetToString(event.source),\n\t\t\t\tconfigurationKeys: Array.from(event.affectedKeys)\n\t\t\t});\n\t\t}\n\t});\n}\n\n/**\n * Determines whether or not we support logging telemetry.\n * This checks if the product is capable of collecting telemetry but not whether or not it can send it\n * For checking the user setting and what telemetry you can send please check `getTelemetryLevel`.\n * This returns true if `--disable-telemetry` wasn't used, the product.json allows for telemetry, and we're not testing an extension\n * If false telemetry is disabled throughout the product\n * @param productService\n * @param environmentService\n * @returns false - telemetry is completely disabled, true - telemetry is logged locally, but may not be sent\n */\nexport function supportsTelemetry(productService: IProductService, environmentService: IEnvironmentService): boolean {\n\t// If it's OSS and telemetry isn't disabled via the CLI we will allow it for logging only purposes\n\tif (!environmentService.isBuilt && !environmentService.disableTelemetry) {\n\t\treturn true;\n\t}\n\treturn !(environmentService.disableTelemetry || !productService.enableTelemetry || environmentService.extensionTestsLocationURI);\n}\n\n/**\n * Checks to see if we're in logging only mode to debug telemetry.\n * This is if telemetry is enabled and we're in OSS, but no telemetry key is provided so it's not being sent just logged.\n * @param productService\n * @param environmentService\n * @returns True if telemetry is actually disabled and we're only logging for debug purposes\n */\nexport function isLoggingOnly(productService: IProductService, environmentService: IEnvironmentService): boolean {\n\t// Logging only mode is only for OSS\n\tif (environmentService.isBuilt) {\n\t\treturn false;\n\t}\n\n\tif (environmentService.disableTelemetry) {\n\t\treturn false;\n\t}\n\n\tif (productService.enableTelemetry && productService.aiConfig?.ariaKey) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Determines how telemetry is handled based on the user's configuration.\n *\n * @param configurationService\n * @returns OFF, ERROR, ON\n */\nexport function getTelemetryLevel(configurationService: IConfigurationService): TelemetryLevel {\n\tconst newConfig = configurationService.getValue<TelemetryConfiguration>(TELEMETRY_SETTING_ID);\n\tconst crashReporterConfig = configurationService.getValue<boolean | undefined>(TELEMETRY_CRASH_REPORTER_SETTING_ID);\n\tconst oldConfig = configurationService.getValue<boolean | undefined>(TELEMETRY_OLD_SETTING_ID);\n\n\t// If `telemetry.enableCrashReporter` is false or `telemetry.enableTelemetry' is false, disable telemetry\n\tif (oldConfig === false || crashReporterConfig === false) {\n\t\treturn TelemetryLevel.NONE;\n\t}\n\n\t// Maps new telemetry setting to a telemetry level\n\tswitch (newConfig ?? TelemetryConfiguration.ON) {\n\t\tcase TelemetryConfiguration.ON:\n\t\t\treturn TelemetryLevel.USAGE;\n\t\tcase TelemetryConfiguration.ERROR:\n\t\t\treturn TelemetryLevel.ERROR;\n\t\tcase TelemetryConfiguration.CRASH:\n\t\t\treturn TelemetryLevel.CRASH;\n\t\tcase TelemetryConfiguration.OFF:\n\t\t\treturn TelemetryLevel.NONE;\n\t}\n}\n\nexport interface Properties {\n\t[key: string]: string;\n}\n\nexport interface Measurements {\n\t[key: string]: number;\n}\n\nexport function validateTelemetryData(data?: any): { properties: Properties; measurements: Measurements } {\n\n\tconst properties: Properties = {};\n\tconst measurements: Measurements = {};\n\n\tconst flat: Record<string, any> = {};\n\tflatten(data, flat);\n\n\tfor (let prop in flat) {\n\t\t// enforce property names less than 150 char, take the last 150 char\n\t\tprop = prop.length > 150 ? prop.substr(prop.length - 149) : prop;\n\t\tconst value = flat[prop];\n\n\t\tif (typeof value === 'number') {\n\t\t\tmeasurements[prop] = value;\n\n\t\t} else if (typeof value === 'boolean') {\n\t\t\tmeasurements[prop] = value ? 1 : 0;\n\n\t\t} else if (typeof value === 'string') {\n\t\t\tif (value.length > 8192) {\n\t\t\t\tconsole.warn(`Telemetry property: ${prop} has been trimmed to 8192, the original length is ${value.length}`);\n\t\t\t}\n\t\t\t//enforce property value to be less than 8192 char, take the first 8192 char\n\t\t\t// https://docs.microsoft.com/en-us/azure/azure-monitor/app/api-custom-events-metrics#limits\n\t\t\tproperties[prop] = value.substring(0, 8191);\n\n\t\t} else if (typeof value !== 'undefined' && value !== null) {\n\t\t\tproperties[prop] = value;\n\t\t}\n\t}\n\n\treturn {\n\t\tproperties,\n\t\tmeasurements\n\t};\n}\n\nconst telemetryAllowedAuthorities = new Set(['ssh-remote', 'dev-container', 'attached-container', 'wsl', 'tunnel', 'codespaces', 'amlext']);\n\nexport function cleanRemoteAuthority(remoteAuthority?: string): string {\n\tif (!remoteAuthority) {\n\t\treturn 'none';\n\t}\n\tconst remoteName = getRemoteName(remoteAuthority);\n\treturn telemetryAllowedAuthorities.has(remoteName) ? remoteName : 'other';\n}\n\nfunction flatten(obj: any, result: { [key: string]: any }, order: number = 0, prefix?: string): void {\n\tif (!obj) {\n\t\treturn;\n\t}\n\n\tfor (const item of Object.getOwnPropertyNames(obj)) {\n\t\tconst value = obj[item];\n\t\tconst index = prefix ? prefix + item : item;\n\n\t\tif (Array.isArray(value)) {\n\t\t\tresult[index] = safeStringify(value);\n\n\t\t} else if (value instanceof Date) {\n\t\t\t// TODO unsure why this is here and not in _getData\n\t\t\tresult[index] = value.toISOString();\n\n\t\t} else if (isObject(value)) {\n\t\t\tif (order < 2) {\n\t\t\t\tflatten(value, result, order + 1, index + '.');\n\t\t\t} else {\n\t\t\t\tresult[index] = safeStringify(value);\n\t\t\t}\n\t\t} else {\n\t\t\tresult[index] = value;\n\t\t}\n\t}\n}\n\n/**\n * Whether or not this is an internal user\n * @param productService The product service\n * @param configService The config servivce\n * @returns true if internal, false otherwise\n */\nexport function isInternalTelemetry(productService: IProductService, configService: IConfigurationService) {\n\tconst msftInternalDomains = productService.msftInternalDomains || [];\n\tconst internalTesting = configService.getValue<boolean>('telemetry.internalTesting');\n\treturn verifyMicrosoftInternalDomain(msftInternalDomains) || internalTesting;\n}\n\ninterface IPathEnvironment {\n\tappRoot: string;\n\textensionsPath: string;\n\tuserDataPath: string;\n\tuserHome: URI;\n\ttmpDir: URI;\n}\n\nexport function getPiiPathsFromEnvironment(paths: IPathEnvironment): string[] {\n\treturn [paths.appRoot, paths.extensionsPath, paths.userHome.fsPath, paths.tmpDir.fsPath, paths.userDataPath];\n}\n\n//#region Telemetry Cleaning\n\n/**\n * Cleans a given stack of possible paths\n * @param stack The stack to sanitize\n * @param cleanupPatterns Cleanup patterns to remove from the stack\n * @returns The cleaned stack\n */\nfunction anonymizeFilePaths(stack: string, cleanupPatterns: RegExp[]): string {\n\n\t// Fast check to see if it is a file path to avoid doing unnecessary heavy regex work\n\tif (!stack || (!stack.includes('/') && !stack.includes('\\\\'))) {\n\t\treturn stack;\n\t}\n\n\tlet updatedStack = stack;\n\n\tconst cleanUpIndexes: [number, number][] = [];\n\tfor (const regexp of cleanupPatterns) {\n\t\twhile (true) {\n\t\t\tconst result = regexp.exec(stack);\n\t\t\tif (!result) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcleanUpIndexes.push([result.index, regexp.lastIndex]);\n\t\t}\n\t}\n\n\tconst nodeModulesRegex = /^[\\\\\\/]?(node_modules|node_modules\\.asar)[\\\\\\/]/;\n\tconst fileRegex = /(file:\\/\\/)?([a-zA-Z]:(\\\\\\\\|\\\\|\\/)|(\\\\\\\\|\\\\|\\/))?([\\w-\\._]+(\\\\\\\\|\\\\|\\/))+[\\w-\\._]*/g;\n\tlet lastIndex = 0;\n\tupdatedStack = '';\n\n\twhile (true) {\n\t\tconst result = fileRegex.exec(stack);\n\t\tif (!result) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Check to see if the any cleanupIndexes partially overlap with this match\n\t\tconst overlappingRange = cleanUpIndexes.some(([start, end]) => result.index < end && start < fileRegex.lastIndex);\n\n\t\t// anoynimize user file paths that do not need to be retained or cleaned up.\n\t\tif (!nodeModulesRegex.test(result[0]) && !overlappingRange) {\n\t\t\tupdatedStack += stack.substring(lastIndex, result.index) + '<REDACTED: user-file-path>';\n\t\t\tlastIndex = fileRegex.lastIndex;\n\t\t}\n\t}\n\tif (lastIndex < stack.length) {\n\t\tupdatedStack += stack.substr(lastIndex);\n\t}\n\n\treturn updatedStack;\n}\n\n/**\n * Attempts to remove commonly leaked PII\n * @param property The property which will be removed if it contains user data\n * @returns The new value for the property\n */\nfunction removePropertiesWithPossibleUserInfo(property: string): string {\n\t// If for some reason it is undefined we skip it (this shouldn't be possible);\n\tif (!property) {\n\t\treturn property;\n\t}\n\n\tconst userDataRegexes = [\n\t\t{ label: 'Google API Key', regex: /AIza[A-Za-z0-9_\\\\\\-]{35}/ },\n\t\t{ label: 'Slack Token', regex: /xox[pbar]\\-[A-Za-z0-9]/ },\n\t\t{ label: 'Generic Secret', regex: /(key|token|sig|secret|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/i },\n\t\t{ label: 'Email', regex: /@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+/ } // Regex which matches @*.site\n\t];\n\n\t// Check for common user data in the telemetry events\n\tfor (const secretRegex of userDataRegexes) {\n\t\tif (secretRegex.regex.test(property)) {\n\t\t\treturn `<REDACTED: ${secretRegex.label}>`;\n\t\t}\n\t}\n\n\treturn property;\n}\n\n\n/**\n * Does a best possible effort to clean a data object from any possible PII.\n * @param data The data object to clean\n * @param paths Any additional patterns that should be removed from the data set\n * @returns A new object with the PII removed\n */\nexport function cleanData(data: Record<string, any>, cleanUpPatterns: RegExp[]): Record<string, any> {\n\treturn cloneAndChange(data, value => {\n\n\t\t// If it's a trusted value it means it's okay to skip cleaning so we don't clean it\n\t\tif (value instanceof TelemetryTrustedValue || Object.hasOwnProperty.call(value, 'isTrustedTelemetryValue')) {\n\t\t\treturn value.value;\n\t\t}\n\n\t\t// We only know how to clean strings\n\t\tif (typeof value === 'string') {\n\t\t\tlet updatedProperty = value.replaceAll('%20', ' ');\n\n\t\t\t// First we anonymize any possible file paths\n\t\t\tupdatedProperty = anonymizeFilePaths(updatedProperty, cleanUpPatterns);\n\n\t\t\t// Then we do a simple regex replace with the defined patterns\n\t\t\tfor (const regexp of cleanUpPatterns) {\n\t\t\t\tupdatedProperty = updatedProperty.replace(regexp, '');\n\t\t\t}\n\n\t\t\t// Lastly, remove commonly leaked PII\n\t\t\tupdatedProperty = removePropertiesWithPossibleUserInfo(updatedProperty);\n\n\t\t\treturn updatedProperty;\n\t\t}\n\t\treturn undefined;\n\t});\n}\n\n//#endregion\n"]}