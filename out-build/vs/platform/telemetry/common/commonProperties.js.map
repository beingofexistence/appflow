{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/telemetry/common/commonProperties.ts"],"names":[],"mappings":"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","file":"commonProperties.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isLinuxSnap, platform, Platform, PlatformToString } from 'vs/base/common/platform';\nimport { env, platform as nodePlatform } from 'vs/base/common/process';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { ICommonProperties } from 'vs/platform/telemetry/common/telemetry';\n\nfunction getPlatformDetail(hostname: string): string | undefined {\n\tif (platform === Platform.Linux && /^penguin(\\.|$)/i.test(hostname)) {\n\t\treturn 'chromebook';\n\t}\n\n\treturn undefined;\n}\n\nexport function resolveCommonProperties(\n\trelease: string,\n\thostname: string,\n\tarch: string,\n\tcommit: string | undefined,\n\tversion: string | undefined,\n\tmachineId: string | undefined,\n\tisInternalTelemetry: boolean,\n\tproduct?: string\n): ICommonProperties {\n\tconst result: ICommonProperties = Object.create(null);\n\n\t// __GDPR__COMMON__ \"common.machineId\" : { \"endPoint\": \"MacAddressHash\", \"classification\": \"EndUserPseudonymizedInformation\", \"purpose\": \"FeatureInsight\" }\n\tresult['common.machineId'] = machineId;\n\t// __GDPR__COMMON__ \"sessionID\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['sessionID'] = generateUuid() + Date.now();\n\t// __GDPR__COMMON__ \"commitHash\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\tresult['commitHash'] = commit;\n\t// __GDPR__COMMON__ \"version\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['version'] = version;\n\t// __GDPR__COMMON__ \"common.platformVersion\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['common.platformVersion'] = (release || '').replace(/^(\\d+)(\\.\\d+)?(\\.\\d+)?(.*)/, '$1$2$3');\n\t// __GDPR__COMMON__ \"common.platform\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['common.platform'] = PlatformToString(platform);\n\t// __GDPR__COMMON__ \"common.nodePlatform\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\tresult['common.nodePlatform'] = nodePlatform;\n\t// __GDPR__COMMON__ \"common.nodeArch\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\tresult['common.nodeArch'] = arch;\n\t// __GDPR__COMMON__ \"common.product\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\tresult['common.product'] = product || 'desktop';\n\n\tif (isInternalTelemetry) {\n\t\t// __GDPR__COMMON__ \"common.msftInternal\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\tresult['common.msftInternal'] = isInternalTelemetry;\n\t}\n\n\t// dynamic properties which value differs on each call\n\tlet seq = 0;\n\tconst startTime = Date.now();\n\tObject.defineProperties(result, {\n\t\t// __GDPR__COMMON__ \"timestamp\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t'timestamp': {\n\t\t\tget: () => new Date(),\n\t\t\tenumerable: true\n\t\t},\n\t\t// __GDPR__COMMON__ \"common.timesincesessionstart\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t'common.timesincesessionstart': {\n\t\t\tget: () => Date.now() - startTime,\n\t\t\tenumerable: true\n\t\t},\n\t\t// __GDPR__COMMON__ \"common.sequence\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t'common.sequence': {\n\t\t\tget: () => seq++,\n\t\t\tenumerable: true\n\t\t}\n\t});\n\n\tif (isLinuxSnap) {\n\t\t// __GDPR__COMMON__ \"common.snap\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\tresult['common.snap'] = 'true';\n\t}\n\n\tconst platformDetail = getPlatformDetail(hostname);\n\n\tif (platformDetail) {\n\t\t// __GDPR__COMMON__ \"common.platformDetail\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\tresult['common.platformDetail'] = platformDetail;\n\t}\n\n\treturn result;\n}\n\nexport function verifyMicrosoftInternalDomain(domainList: readonly string[]): boolean {\n\tconst userDnsDomain = env['USERDNSDOMAIN'];\n\tif (!userDnsDomain) {\n\t\treturn false;\n\t}\n\n\tconst domain = userDnsDomain.toLowerCase();\n\treturn domainList.some(msftDomain => domain === msftDomain);\n}\n"]}