{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/telemetry/common/errorTelemetry.ts"],"names":[],"mappings":"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","file":"errorTelemetry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { binarySearch } from 'vs/base/common/arrays';\nimport { errorHandler, ErrorNoTelemetry } from 'vs/base/common/errors';\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { safeStringify } from 'vs/base/common/objects';\nimport { FileOperationError } from 'vs/platform/files/common/files';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\ntype ErrorEventFragment = {\n\towner: 'lramos15, sbatten';\n\tcomment: 'Whenever an error in VS Code is thrown.';\n\tcallstack: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; comment: 'The callstack of the error.' };\n\tmsg?: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; comment: 'The message of the error. Normally the first line int the callstack.' };\n\tfile?: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; comment: 'The file the error originated from.' };\n\tline?: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The line the error originate on.' };\n\tcolumn?: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The column of the line which the error orginated on.' };\n\tuncaught_error_name?: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; comment: 'If the error is uncaught what is the error type' };\n\tuncaught_error_msg?: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; comment: 'If the error is uncaught this is just msg but for uncaught errors.' };\n\tcount?: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'How many times this error has been thrown' };\n};\nexport interface ErrorEvent {\n\tcallstack: string;\n\tmsg?: string;\n\tfile?: string;\n\tline?: number;\n\tcolumn?: number;\n\tuncaught_error_name?: string;\n\tuncaught_error_msg?: string;\n\tcount?: number;\n}\n\nexport namespace ErrorEvent {\n\texport function compare(a: ErrorEvent, b: ErrorEvent) {\n\t\tif (a.callstack < b.callstack) {\n\t\t\treturn -1;\n\t\t} else if (a.callstack > b.callstack) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n}\n\nexport default abstract class BaseErrorTelemetry {\n\n\tpublic static ERROR_FLUSH_TIMEOUT: number = 5 * 1000;\n\n\tprivate _telemetryService: ITelemetryService;\n\tprivate _flushDelay: number;\n\tprivate _flushHandle: any = -1;\n\tprivate _buffer: ErrorEvent[] = [];\n\tprotected readonly _disposables = new DisposableStore();\n\n\tconstructor(telemetryService: ITelemetryService, flushDelay = BaseErrorTelemetry.ERROR_FLUSH_TIMEOUT) {\n\t\tthis._telemetryService = telemetryService;\n\t\tthis._flushDelay = flushDelay;\n\n\t\t// (1) check for unexpected but handled errors\n\t\tconst unbind = errorHandler.addListener((err) => this._onErrorEvent(err));\n\t\tthis._disposables.add(toDisposable(unbind));\n\n\t\t// (2) install implementation-specific error listeners\n\t\tthis.installErrorListeners();\n\t}\n\n\tdispose() {\n\t\tclearTimeout(this._flushHandle);\n\t\tthis._flushBuffer();\n\t\tthis._disposables.dispose();\n\t}\n\n\tprotected installErrorListeners(): void {\n\t\t// to override\n\t}\n\n\tprivate _onErrorEvent(err: any): void {\n\n\t\tif (!err || err.code) {\n\t\t\treturn;\n\t\t}\n\n\t\t// unwrap nested errors from loader\n\t\tif (err.detail && err.detail.stack) {\n\t\t\terr = err.detail;\n\t\t}\n\n\t\t// If it's the no telemetry error it doesn't get logged\n\t\t// TOOD @lramos15 hacking in FileOperation error because it's too messy to adopt ErrorNoTelemetry. A better solution should be found\n\t\tif (ErrorNoTelemetry.isErrorNoTelemetry(err) || err instanceof FileOperationError || (typeof err?.message === 'string' && err.message.includes('Unable to read file'))) {\n\t\t\treturn;\n\t\t}\n\n\t\t// work around behavior in workerServer.ts that breaks up Error.stack\n\t\tconst callstack = Array.isArray(err.stack) ? err.stack.join('\\n') : err.stack;\n\t\tconst msg = err.message ? err.message : safeStringify(err);\n\n\t\t// errors without a stack are not useful telemetry\n\t\tif (!callstack) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._enqueue({ msg, callstack });\n\t}\n\n\tprotected _enqueue(e: ErrorEvent): void {\n\n\t\tconst idx = binarySearch(this._buffer, e, ErrorEvent.compare);\n\t\tif (idx < 0) {\n\t\t\te.count = 1;\n\t\t\tthis._buffer.splice(~idx, 0, e);\n\t\t} else {\n\t\t\tif (!this._buffer[idx].count) {\n\t\t\t\tthis._buffer[idx].count = 0;\n\t\t\t}\n\t\t\tthis._buffer[idx].count! += 1;\n\t\t}\n\n\t\tif (this._flushHandle === -1) {\n\t\t\tthis._flushHandle = setTimeout(() => {\n\t\t\t\tthis._flushBuffer();\n\t\t\t\tthis._flushHandle = -1;\n\t\t\t}, this._flushDelay);\n\t\t}\n\t}\n\n\tprivate _flushBuffer(): void {\n\t\tfor (const error of this._buffer) {\n\t\t\ttype UnhandledErrorClassification = {} & ErrorEventFragment;\n\t\t\tthis._telemetryService.publicLogError2<ErrorEvent, UnhandledErrorClassification>('UnhandledError', error);\n\t\t}\n\t\tthis._buffer.length = 0;\n\t}\n}\n"]}