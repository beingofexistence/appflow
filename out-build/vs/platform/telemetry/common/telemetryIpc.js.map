{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/telemetry/common/telemetryIpc.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAa,IAAI;QAEhB,YAAoB,CAA+B;YAA/B,MAAC,GAAD,CAAC,CAA8B;QAAI,CAAC;QAExD,MAAM,CAAI,CAAU,EAAE,KAAa;YAClC,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,CAAC,CAAU,EAAE,OAAe,EAAE,EAAE,SAAS,EAAE,IAAI,EAAiB;YACnE,IAAI,CAAC,CAAC,CAAS,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;YACpD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;KACD;IAZD,oBAYC;IAED,MAAa,IAAI;QAEhB,YAAoB,CAAiB;YAAjB,MAAC,GAAD,CAAC,CAAgB;QAAI,CAAC;QAE1C,GAAG,CAAC,SAAiB,EAAE,IAAU;YAChC,IAAI,CAAC,CAAC,CAAO,IAAI,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;iBAC3C,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,CAAC,4BAA4B,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAE1E,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAED,KAAK;YACJ,OAAO;YACP,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC1B,CAAC;KACD;IAfD,oBAeC","file":"telemetryIpc.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ITelemetryAppender } from 'vs/platform/telemetry/common/telemetryUtils';\n\nexport interface ITelemetryLog {\n\teventName: string;\n\tdata?: any;\n}\n\nexport class TelemetryAppenderChannel implements IServerChannel {\n\n\tconstructor(private appenders: ITelemetryAppender[]) { }\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, { eventName, data }: ITelemetryLog): Promise<any> {\n\t\tthis.appenders.forEach(a => a.log(eventName, data));\n\t\treturn Promise.resolve(null);\n\t}\n}\n\nexport class TelemetryAppenderClient implements ITelemetryAppender {\n\n\tconstructor(private channel: IChannel) { }\n\n\tlog(eventName: string, data?: any): any {\n\t\tthis.channel.call('log', { eventName, data })\n\t\t\t.then(undefined, err => `Failed to log telemetry: ${console.warn(err)}`);\n\n\t\treturn Promise.resolve(null);\n\t}\n\n\tflush(): Promise<void> {\n\t\t// TODO\n\t\treturn Promise.resolve();\n\t}\n}\n"]}