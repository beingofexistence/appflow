{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/telemetry/common/telemetry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKnF,QAAA,GAAG,GAAiB,IAAA,mBAAG,EAAgC,kBAAkB,CAAC,CAAC;IAmD3E,QAAA,GAAG,GAA+B,IAAA,mBAAG,EAA8C,gCAAgC,CAAC,CAAC;IASlI,OAAO;IACM,QAAA,GAAG,GAA4B,8BAA8B,CAAC;IAC9D,QAAA,GAAG,GAA0B,4BAA4B,CAAC;IAC1D,QAAA,GAAG,GAAyB,2BAA2B,CAAC;IACxD,QAAA,GAAG,GAAY,qBAAqB,CAAC;IAElD,qBAAqB;IACR,QAAA,GAAG,GAAoB,WAAW,CAAC;IACnC,QAAA,GAAG,GAAoB,0BAA0B,CAAC;IAClD,QAAA,GAAG,GAAmC,+BAA+B,CAAC;IACtE,QAAA,GAAG,GAAwB,2BAA2B,CAAC;IAEpE,IAAkB,cAKjB;IALD,WAAkB,cAAc;QAC/B,mDAAQ,CAAA;QACR,qDAAS,CAAA;QACT,qDAAS,CAAA;QACT,qDAAS,CAAA;IACV,CAAC,EALiB,cAAc,8BAAd,cAAc,QAK/B;IAED,IAAkB,sBAKjB;IALD,WAAkB,sBAAsB;QACvC,qCAAW,CAAA;QACX,yCAAe,CAAA;QACf,yCAAe,CAAA;QACf,oCAAU,CAAA;IACX,CAAC,EALiB,sBAAsB,sCAAtB,sBAAsB,QAKvC","file":"telemetry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ClassifiedEvent, IGDPRProperty, OmitMetadata, StrictPropertyCheck } from 'vs/platform/telemetry/common/gdprTypings';\n\nexport const ITelemetryService = createDecorator<ITelemetryService>('telemetryService');\n\nexport interface ITelemetryData {\n\tfrom?: string;\n\ttarget?: string;\n\t[key: string]: any;\n}\n\nexport interface ITelemetryService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly telemetryLevel: TelemetryLevel;\n\n\treadonly sessionId: string;\n\treadonly machineId: string;\n\treadonly firstSessionDate: string;\n\treadonly msftInternal?: boolean;\n\n\t/**\n\t * Whether error telemetry will get sent. If false, `publicLogError` will no-op.\n\t */\n\treadonly sendErrorTelemetry: boolean;\n\n\t/**\n\t * @deprecated Use publicLog2 and the typescript GDPR annotation where possible\n\t */\n\tpublicLog(eventName: string, data?: ITelemetryData): void;\n\n\t/**\n\t * Sends a telemetry event that has been privacy approved.\n\t * Do not call this unless you have been given approval.\n\t */\n\tpublicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n\n\t/**\n\t * @deprecated Use publicLogError2 and the typescript GDPR annotation where possible\n\t */\n\tpublicLogError(errorEventName: string, data?: ITelemetryData): void;\n\n\tpublicLogError2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n\n\tsetExperimentProperty(name: string, value: string): void;\n}\n\nexport interface ITelemetryEndpoint {\n\tid: string;\n\taiKey: string;\n\tsendErrorTelemetry: boolean;\n}\n\nexport const ICustomEndpointTelemetryService = createDecorator<ICustomEndpointTelemetryService>('customEndpointTelemetryService');\n\nexport interface ICustomEndpointTelemetryService {\n\treadonly _serviceBrand: undefined;\n\n\tpublicLog(endpoint: ITelemetryEndpoint, eventName: string, data?: ITelemetryData): void;\n\tpublicLogError(endpoint: ITelemetryEndpoint, errorEventName: string, data?: ITelemetryData): void;\n}\n\n// Keys\nexport const currentSessionDateStorageKey = 'telemetry.currentSessionDate';\nexport const firstSessionDateStorageKey = 'telemetry.firstSessionDate';\nexport const lastSessionDateStorageKey = 'telemetry.lastSessionDate';\nexport const machineIdKey = 'telemetry.machineId';\n\n// Configuration Keys\nexport const TELEMETRY_SECTION_ID = 'telemetry';\nexport const TELEMETRY_SETTING_ID = 'telemetry.telemetryLevel';\nexport const TELEMETRY_CRASH_REPORTER_SETTING_ID = 'telemetry.enableCrashReporter';\nexport const TELEMETRY_OLD_SETTING_ID = 'telemetry.enableTelemetry';\n\nexport const enum TelemetryLevel {\n\tNONE = 0,\n\tCRASH = 1,\n\tERROR = 2,\n\tUSAGE = 3\n}\n\nexport const enum TelemetryConfiguration {\n\tOFF = 'off',\n\tCRASH = 'crash',\n\tERROR = 'error',\n\tON = 'all'\n}\n\nexport interface ICommonProperties {\n\t[name: string]: string | boolean | undefined;\n}\n"]}