{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/telemetry/node/telemetry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKzF,KAAK,UAAU,IAAI,CAAkB,OAAe,EAAE,cAAuB;QACnF,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAE5C,8DAA8D;QAC9D,MAAM,cAAc,GAAG,CAAC,QAAgB,EAAE,OAAe,EAAE,EAAE;YAC5D,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,eAAe,CAAC,OAAO,CAAC,GAAG,aAAa,CAAC;QAC1C,CAAC,CAAC;QAEF,IAAI,cAAc,EAAE;YACnB,MAAM,IAAI,GAAa,EAAE,CAAC;YAE1B,MAAM,KAAK,GAAG,MAAM,cAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YACrD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACzB,IAAI;oBACH,MAAM,QAAQ,GAAG,MAAM,cAAQ,CAAC,IAAI,CAAC,IAAA,UAAG,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACjE,IAAI,QAAQ,CAAC,WAAW,EAAE,EAAE;wBAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAChB;iBACD;gBAAC,MAAM;oBACP,sFAAsF;iBACtF;aACD;YAED,MAAM,oBAAoB,GAAa,EAAE,CAAC;YAC1C,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;gBACvB,MAAM,KAAK,GAAG,CAAC,MAAM,cAAQ,CAAC,OAAO,CAAC,IAAA,UAAG,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC;gBAC5G,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACvB,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,kGAAkG;iBAClI;aACD;YAED,KAAK,MAAM,MAAM,IAAI,oBAAoB,EAAE;gBAC1C,MAAM,QAAQ,GAAG,CAAC,MAAM,cAAQ,CAAC,QAAQ,CAAC,IAAA,UAAG,EAAE,cAAc,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;gBACtG,cAAc,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;aACjC;SACD;QAED,IAAI,QAAQ,GAAG,CAAC,MAAM,cAAQ,CAAC,QAAQ,CAAC,IAAA,UAAG,EAAE,OAAO,EAAE,qBAAqB,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC1F,cAAc,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QAExC,QAAQ,GAAG,CAAC,MAAM,cAAQ,CAAC,QAAQ,CAAC,IAAA,UAAG,EAAE,OAAO,EAAE,2BAA2B,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC5F,cAAc,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QAE9C,OAAO,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC;IA7CD,oBA6CC","file":"telemetry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { join } from 'vs/base/common/path';\nimport { Promises } from 'vs/base/node/pfs';\n\nexport async function buildTelemetryMessage(appRoot: string, extensionsPath?: string): Promise<string> {\n\tconst mergedTelemetry = Object.create(null);\n\n\t// Simple function to merge the telemetry into one json object\n\tconst mergeTelemetry = (contents: string, dirName: string) => {\n\t\tconst telemetryData = JSON.parse(contents);\n\t\tmergedTelemetry[dirName] = telemetryData;\n\t};\n\n\tif (extensionsPath) {\n\t\tconst dirs: string[] = [];\n\n\t\tconst files = await Promises.readdir(extensionsPath);\n\t\tfor (const file of files) {\n\t\t\ttry {\n\t\t\t\tconst fileStat = await Promises.stat(join(extensionsPath, file));\n\t\t\t\tif (fileStat.isDirectory()) {\n\t\t\t\t\tdirs.push(file);\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// This handles case where broken symbolic links can cause statSync to throw and error\n\t\t\t}\n\t\t}\n\n\t\tconst telemetryJsonFolders: string[] = [];\n\t\tfor (const dir of dirs) {\n\t\t\tconst files = (await Promises.readdir(join(extensionsPath, dir))).filter(file => file === 'telemetry.json');\n\t\t\tif (files.length === 1) {\n\t\t\t\ttelemetryJsonFolders.push(dir); // // We know it contains a telemetry.json file so we add it to the list of folders which have one\n\t\t\t}\n\t\t}\n\n\t\tfor (const folder of telemetryJsonFolders) {\n\t\t\tconst contents = (await Promises.readFile(join(extensionsPath, folder, 'telemetry.json'))).toString();\n\t\t\tmergeTelemetry(contents, folder);\n\t\t}\n\t}\n\n\tlet contents = (await Promises.readFile(join(appRoot, 'telemetry-core.json'))).toString();\n\tmergeTelemetry(contents, 'vscode-core');\n\n\tcontents = (await Promises.readFile(join(appRoot, 'telemetry-extensions.json'))).toString();\n\tmergeTelemetry(contents, 'vscode-extensions');\n\n\treturn JSON.stringify(mergedTelemetry, null, 4);\n}\n"]}