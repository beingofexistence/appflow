{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/telemetry/node/1dsAppender.ts"],"names":[],"mappings":"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","file":"1dsAppender.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IPayloadData, IXHROverride } from '@microsoft/1ds-post-js';\nimport { streamToBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IRequestOptions } from 'vs/base/parts/request/common/request';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport * as https from 'https';\nimport { AbstractOneDataSystemAppender, IAppInsightsCore } from 'vs/platform/telemetry/common/1dsAppender';\n\ntype OnCompleteFunc = (status: number, headers: { [headerName: string]: string }, response?: string) => void;\n\ninterface IResponseData {\n\theaders: { [headerName: string]: string };\n\tstatusCode: number;\n\tresponseData: string;\n}\n\n/**\n * Completes a request to submit telemetry to the server utilizing the request service\n * @param options The options which will be used to make the request\n * @param requestService The request service\n * @returns An object containing the headers, statusCode, and responseData\n */\nasync function makeTelemetryRequest(options: IRequestOptions, requestService: IRequestService): Promise<IResponseData> {\n\tconst response = await requestService.request(options, CancellationToken.None);\n\tconst responseData = (await streamToBuffer(response.stream)).toString();\n\tconst statusCode = response.res.statusCode ?? 200;\n\tconst headers = response.res.headers as Record<string, any>;\n\treturn {\n\t\theaders,\n\t\tstatusCode,\n\t\tresponseData\n\t};\n}\n\n/**\n * Complete a request to submit telemetry to the server utilizing the https module. Only used when the request service is not available\n * @param options The options which will be used to make the request\n * @returns An object containing the headers, statusCode, and responseData\n */\nasync function makeLegacyTelemetryRequest(options: IRequestOptions): Promise<IResponseData> {\n\tconst httpsOptions = {\n\t\tmethod: options.type,\n\t\theaders: options.headers\n\t};\n\tconst responsePromise = new Promise<IResponseData>((resolve, reject) => {\n\t\tconst req = https.request(options.url ?? '', httpsOptions, res => {\n\t\t\tres.on('data', function (responseData) {\n\t\t\t\tresolve({\n\t\t\t\t\theaders: res.headers as Record<string, any>,\n\t\t\t\t\tstatusCode: res.statusCode ?? 200,\n\t\t\t\t\tresponseData: responseData.toString()\n\t\t\t\t});\n\t\t\t});\n\t\t\t// On response with error send status of 0 and a blank response to oncomplete so we can retry events\n\t\t\tres.on('error', function (err) {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t\treq.write(options.data, (err) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t\treq.end();\n\t});\n\treturn responsePromise;\n}\n\nasync function sendPostAsync(requestService: IRequestService | undefined, payload: IPayloadData, oncomplete: OnCompleteFunc) {\n\tconst telemetryRequestData = typeof payload.data === 'string' ? payload.data : new TextDecoder().decode(payload.data);\n\tconst requestOptions: IRequestOptions = {\n\t\ttype: 'POST',\n\t\theaders: {\n\t\t\t...payload.headers,\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Content-Length': Buffer.byteLength(payload.data).toString()\n\t\t},\n\t\turl: payload.urlString,\n\t\tdata: telemetryRequestData\n\t};\n\n\ttry {\n\t\tconst responseData = requestService ? await makeTelemetryRequest(requestOptions, requestService) : await makeLegacyTelemetryRequest(requestOptions);\n\t\toncomplete(responseData.statusCode, responseData.headers, responseData.responseData);\n\t} catch {\n\t\t// If it errors out, send status of 0 and a blank response to oncomplete so we can retry events\n\t\toncomplete(0, {});\n\t}\n}\n\n\nexport class OneDataSystemAppender extends AbstractOneDataSystemAppender {\n\n\tconstructor(\n\t\trequestService: IRequestService | undefined,\n\t\tisInternalTelemetry: boolean,\n\t\teventPrefix: string,\n\t\tdefaultData: { [key: string]: any } | null,\n\t\tiKeyOrClientFactory: string | (() => IAppInsightsCore), // allow factory function for testing\n\t) {\n\t\t// Override the way events get sent since node doesn't have XHTMLRequest\n\t\tconst customHttpXHROverride: IXHROverride = {\n\t\t\tsendPOST: (payload: IPayloadData, oncomplete) => {\n\t\t\t\t// Fire off the async request without awaiting it\n\t\t\t\tsendPostAsync(requestService, payload, oncomplete);\n\t\t\t}\n\t\t};\n\n\t\tsuper(isInternalTelemetry, eventPrefix, defaultData, iKeyOrClientFactory, customHttpXHROverride);\n\t}\n}\n"]}