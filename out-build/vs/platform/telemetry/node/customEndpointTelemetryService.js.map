{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/telemetry/node/customEndpointTelemetryService.ts"],"names":[],"mappings":"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","file":"customEndpointTelemetryService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FileAccess } from 'vs/base/common/network';\nimport { Client as TelemetryClient } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILogService, ILoggerService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ICustomEndpointTelemetryService, ITelemetryData, ITelemetryEndpoint, ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { TelemetryAppenderClient } from 'vs/platform/telemetry/common/telemetryIpc';\nimport { TelemetryLogAppender } from 'vs/platform/telemetry/common/telemetryLogAppender';\nimport { TelemetryService } from 'vs/platform/telemetry/common/telemetryService';\n\nexport class CustomEndpointTelemetryService implements ICustomEndpointTelemetryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate customTelemetryServices = new Map<string, ITelemetryService>();\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tprivate getCustomTelemetryService(endpoint: ITelemetryEndpoint): ITelemetryService {\n\t\tif (!this.customTelemetryServices.has(endpoint.id)) {\n\t\t\tconst telemetryInfo: { [key: string]: string } = Object.create(null);\n\t\t\ttelemetryInfo['common.vscodemachineid'] = this.telemetryService.machineId;\n\t\t\ttelemetryInfo['common.vscodesessionid'] = this.telemetryService.sessionId;\n\t\t\tconst args = [endpoint.id, JSON.stringify(telemetryInfo), endpoint.aiKey];\n\t\t\tconst client = new TelemetryClient(\n\t\t\t\tFileAccess.asFileUri('bootstrap-fork').fsPath,\n\t\t\t\t{\n\t\t\t\t\tserverName: 'Debug Telemetry',\n\t\t\t\t\ttimeout: 1000 * 60 * 5,\n\t\t\t\t\targs,\n\t\t\t\t\tenv: {\n\t\t\t\t\t\tELECTRON_RUN_AS_NODE: 1,\n\t\t\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/workbench/contrib/debug/node/telemetryApp'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst channel = client.getChannel('telemetryAppender');\n\t\t\tconst appenders = [\n\t\t\t\tnew TelemetryAppenderClient(channel),\n\t\t\t\tnew TelemetryLogAppender(this.logService, this.loggerService, this.environmentService, this.productService, `[${endpoint.id}] `),\n\t\t\t];\n\n\t\t\tthis.customTelemetryServices.set(endpoint.id, new TelemetryService({\n\t\t\t\tappenders,\n\t\t\t\tsendErrorTelemetry: endpoint.sendErrorTelemetry\n\t\t\t}, this.configurationService, this.productService));\n\t\t}\n\n\t\treturn this.customTelemetryServices.get(endpoint.id)!;\n\t}\n\n\tpublicLog(telemetryEndpoint: ITelemetryEndpoint, eventName: string, data?: ITelemetryData) {\n\t\tconst customTelemetryService = this.getCustomTelemetryService(telemetryEndpoint);\n\t\tcustomTelemetryService.publicLog(eventName, data);\n\t}\n\n\tpublicLogError(telemetryEndpoint: ITelemetryEndpoint, errorEventName: string, data?: ITelemetryData) {\n\t\tconst customTelemetryService = this.getCustomTelemetryService(telemetryEndpoint);\n\t\tcustomTelemetryService.publicLogError(errorEventName, data);\n\t}\n}\n"]}