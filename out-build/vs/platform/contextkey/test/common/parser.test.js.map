{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/contextkey/test/common/parser.test.ts"],"names":[],"mappings":"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","file":"parser.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { Parser } from 'vs/platform/contextkey/common/contextkey';\n\nfunction parseToStr(input: string): string {\n\tconst parser = new Parser();\n\n\tconst prints: string[] = [];\n\n\tconst print = (...ss: string[]) => { ss.forEach(s => prints.push(s)); };\n\n\tconst expr = parser.parse(input);\n\tif (expr === undefined) {\n\t\tif (parser.lexingErrors.length > 0) {\n\t\t\tprint('Lexing errors:', '\\n\\n');\n\t\t\tparser.lexingErrors.forEach(lexingError => print(`Unexpected token '${lexingError.lexeme}' at offset ${lexingError.offset}. ${lexingError.additionalInfo}`, '\\n'));\n\t\t}\n\n\t\tif (parser.parsingErrors.length > 0) {\n\t\t\tif (parser.lexingErrors.length > 0) { print('\\n --- \\n'); }\n\t\t\tprint('Parsing errors:', '\\n\\n');\n\t\t\tparser.parsingErrors.forEach(parsingError => print(`Unexpected '${parsingError.lexeme}' at offset ${parsingError.offset}.`, '\\n'));\n\t\t}\n\n\t} else {\n\t\tprint(expr.serialize());\n\t}\n\n\treturn prints.join('');\n}\n\nsuite('Context Key Parser', () => {\n\n\ttest(' foo', () => {\n\t\tconst input = ' foo';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo\");\n\t});\n\n\ttest('!foo', () => {\n\t\tconst input = '!foo';\n\t\tassert.deepStrictEqual(parseToStr(input), \"!foo\");\n\t});\n\n\ttest('foo =~ /bar/', () => {\n\t\tconst input = 'foo =~ /bar/';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo =~ /bar/\");\n\t});\n\n\ttest(`foo || (foo =~ /bar/ && baz)`, () => {\n\t\tconst input = `foo || (foo =~ /bar/ && baz)`;\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo || baz && foo =~ /bar/\");\n\t});\n\n\ttest('foo || (foo =~ /bar/ || baz)', () => {\n\t\tconst input = 'foo || (foo =~ /bar/ || baz)';\n\t\tassert.deepStrictEqual(parseToStr(input), \"baz || foo || foo =~ /bar/\");\n\t});\n\n\ttest(`(foo || bar) && (jee || jar)`, () => {\n\t\tconst input = `(foo || bar) && (jee || jar)`;\n\t\tassert.deepStrictEqual(parseToStr(input), \"bar && jar || bar && jee || foo && jar || foo && jee\");\n\t});\n\n\ttest('foo && foo =~ /zee/i', () => {\n\t\tconst input = 'foo && foo =~ /zee/i';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo && foo =~ /zee/i\");\n\t});\n\n\ttest('foo.bar==enabled', () => {\n\t\tconst input = 'foo.bar==enabled';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo.bar == 'enabled'\");\n\t});\n\n\ttest(`foo.bar == 'enabled'`, () => {\n\t\tconst input = `foo.bar == 'enabled'`;\n\t\tassert.deepStrictEqual(parseToStr(input), `foo.bar == 'enabled'`);\n\t});\n\n\ttest('foo.bar:zed==completed - equality with no space', () => {\n\t\tconst input = 'foo.bar:zed==completed';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo.bar:zed == 'completed'\");\n\t});\n\n\ttest('a && b || c', () => {\n\t\tconst input = 'a && b || c';\n\t\tassert.deepStrictEqual(parseToStr(input), \"c || a && b\");\n\t});\n\n\ttest('fooBar && baz.jar && fee.bee<K-loo+1>', () => {\n\t\tconst input = 'fooBar && baz.jar && fee.bee<K-loo+1>';\n\t\tassert.deepStrictEqual(parseToStr(input), \"baz.jar && fee.bee<K-loo+1> && fooBar\");\n\t});\n\n\ttest('foo.barBaz<C-r> < 2', () => {\n\t\tconst input = 'foo.barBaz<C-r> < 2';\n\t\tassert.deepStrictEqual(parseToStr(input), `foo.barBaz<C-r> < 2`);\n\t});\n\n\ttest('foo.bar >= -1', () => {\n\t\tconst input = 'foo.bar >= -1';\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo.bar >= -1\");\n\t});\n\n\ttest(`key contains &nbsp: view == vsc-packages-activitybar-folders && vsc-packages-folders-loaded`, () => {\n\t\tconst input = `view == vsc-packages-activitybar-folders && vsc-packages-folders-loaded`;\n\t\tassert.deepStrictEqual(parseToStr(input), \"vsc-packages-folders-loaded && view == 'vsc-packages-activitybar-folders'\");\n\t});\n\n\ttest('foo.bar <= -1', () => {\n\t\tconst input = 'foo.bar <= -1';\n\t\tassert.deepStrictEqual(parseToStr(input), `foo.bar <= -1`);\n\t});\n\n\ttest('!cmake:hideBuildCommand \\u0026\\u0026 cmake:enableFullFeatureSet', () => {\n\t\tconst input = '!cmake:hideBuildCommand \\u0026\\u0026 cmake:enableFullFeatureSet';\n\t\tassert.deepStrictEqual(parseToStr(input), \"cmake:enableFullFeatureSet && !cmake:hideBuildCommand\");\n\t});\n\n\ttest('!(foo && bar)', () => {\n\t\tconst input = '!(foo && bar)';\n\t\tassert.deepStrictEqual(parseToStr(input), \"!bar || !foo\");\n\t});\n\n\ttest('!(foo && bar || boar) || deer', () => {\n\t\tconst input = '!(foo && bar || boar) || deer';\n\t\tassert.deepStrictEqual(parseToStr(input), \"deer || !bar && !boar || !boar && !foo\");\n\t});\n\n\ttest(`!(!foo)`, () => {\n\t\tconst input = `!(!foo)`;\n\t\tassert.deepStrictEqual(parseToStr(input), \"foo\");\n\t});\n\n\tsuite('controversial', () => {\n\t\t/*\n\t\t\tnew parser KEEPS old one's behavior:\n\n\t\t\told parser output: { key: 'debugState', op: '==', value: '\"stopped\"' }\n\t\t\tnew parser output: { key: 'debugState', op: '==', value: '\"stopped\"' }\n\n\t\t\tTODO@ulugbekna: we should consider breaking old parser's behavior, and not take double quotes as part of the `value` because that's not what user expects.\n\t\t*/\n\t\ttest(`debugState == \"stopped\"`, () => {\n\t\t\tconst input = `debugState == \"stopped\"`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"debugState == '\\\"stopped\\\"'\");\n\t\t});\n\n\t\t/*\n\t\t\tnew parser BREAKS old one's behavior:\n\n\t\t\told parser output: { key: 'viewItem', op: '==', value: 'VSCode WorkSpace' }\n\t\t\tnew parser output: { key: 'viewItem', op: '==', value: 'VSCode' }\n\n\t\t\tTODO@ulugbekna: since this's breaking, we can have hacky code that tries detecting such cases and replicate old parser's behavior.\n\t\t*/\n\t\ttest(` viewItem == VSCode WorkSpace`, () => {\n\t\t\tconst input = ` viewItem == VSCode WorkSpace`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected 'WorkSpace' at offset 20.\\n\");\n\t\t});\n\n\n\t});\n\n\tsuite('regex', () => {\n\n\t\ttest(`resource =~ //foo/(barr|door/(Foo-Bar%20Templates|Soo%20Looo)|Web%20Site%Jjj%20Llll)(/.*)*$/`, () => {\n\t\t\tconst input = `resource =~ //foo/(barr|door/(Foo-Bar%20Templates|Soo%20Looo)|Web%20Site%Jjj%20Llll)(/.*)*$/`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"resource =~ /\\\\/foo\\\\/(barr|door\\\\/(Foo-Bar%20Templates|Soo%20Looo)|Web%20Site%Jjj%20Llll)(\\\\/.*)*$/\");\n\t\t});\n\n\t\ttest(`resource =~ /((/scratch/(?!update)(.*)/)|((/src/).*/)).*$/`, () => {\n\t\t\tconst input = `resource =~ /((/scratch/(?!update)(.*)/)|((/src/).*/)).*$/`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"resource =~ /((\\\\/scratch\\\\/(?!update)(.*)\\\\/)|((\\\\/src\\\\/).*\\\\/)).*$/\");\n\t\t});\n\n\t\ttest(`resourcePath =~ /\\.md(\\.yml|\\.txt)*$/giym`, () => {\n\t\t\tconst input = `resourcePath =~ /\\.md(\\.yml|\\.txt)*$/giym`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"resourcePath =~ /.md(.yml|.txt)*$/im\");\n\t\t});\n\n\t});\n\n\tsuite('error handling', () => {\n\n\t\ttest(`/foo`, () => {\n\t\t\tconst input = `/foo`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Lexing errors:\\n\\nUnexpected token '/foo' at offset 0. Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\\\\\/'.\\n\\n --- \\nParsing errors:\\n\\nUnexpected '/foo' at offset 0.\\n\");\n\t\t});\n\n\t\ttest(`!b == 'true'`, () => {\n\t\t\tconst input = `!b == 'true'`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected '==' at offset 3.\\n\");\n\t\t});\n\n\t\ttest('!foo &&  in bar', () => {\n\t\t\tconst input = '!foo &&  in bar';\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected 'in' at offset 9.\\n\");\n\t\t});\n\n\t\ttest('vim<c-r> == 1 && vim<2<=3', () => {\n\t\t\tconst input = 'vim<c-r> == 1 && vim<2<=3';\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Lexing errors:\\n\\nUnexpected token '=' at offset 23. Did you mean == or =~?\\n\\n --- \\nParsing errors:\\n\\nUnexpected '=' at offset 23.\\n\"); // FIXME\n\t\t});\n\n\t\ttest(`foo && 'bar`, () => {\n\t\t\tconst input = `foo && 'bar`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Lexing errors:\\n\\nUnexpected token ''bar' at offset 7. Did you forget to open or close the quote?\\n\\n --- \\nParsing errors:\\n\\nUnexpected ''bar' at offset 7.\\n\");\n\t\t});\n\n\t\ttest(`config.foo &&  &&bar =~ /^foo$|^bar-foo$|^joo$|^jar$/ && !foo`, () => {\n\t\t\tconst input = `config.foo &&  &&bar =~ /^foo$|^bar-foo$|^joo$|^jar$/ && !foo`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected '&&' at offset 15.\\n\");\n\t\t});\n\n\t\ttest(`!foo == 'test'`, () => {\n\t\t\tconst input = `!foo == 'test'`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected '==' at offset 5.\\n\");\n\t\t});\n\n\t\ttest(`!!foo`, function () {\n\t\t\tconst input = `!!foo`;\n\t\t\tassert.deepStrictEqual(parseToStr(input), \"Parsing errors:\\n\\nUnexpected '!' at offset 1.\\n\");\n\t\t});\n\n\t});\n\n});\n"]}