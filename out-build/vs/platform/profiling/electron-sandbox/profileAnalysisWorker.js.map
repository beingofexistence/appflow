{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/profiling/electron-sandbox/profileAnalysisWorker.ts"],"names":[],"mappings":"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","file":"profileAnalysisWorker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { basename } from 'vs/base/common/path';\nimport { TernarySearchTree } from 'vs/base/common/ternarySearchTree';\nimport { URI } from 'vs/base/common/uri';\nimport { IRequestHandler } from 'vs/base/common/worker/simpleWorker';\nimport { IV8Profile, Utils } from 'vs/platform/profiling/common/profiling';\nimport { IProfileModel, BottomUpSample, buildModel, BottomUpNode, processNode, CdpCallFrame } from 'vs/platform/profiling/common/profilingModel';\nimport { BottomUpAnalysis, IProfileAnalysisWorker, ProfilingOutput } from 'vs/platform/profiling/electron-sandbox/profileAnalysisWorkerService';\n\nexport function create(): IRequestHandler {\n\treturn new ProfileAnalysisWorker();\n}\n\nclass ProfileAnalysisWorker implements IRequestHandler, IProfileAnalysisWorker {\n\n\t_requestHandlerBrand: any;\n\n\tanalyseBottomUp(profile: IV8Profile): BottomUpAnalysis {\n\t\tif (!Utils.isValidProfile(profile)) {\n\t\t\treturn { kind: ProfilingOutput.Irrelevant, samples: [] };\n\t\t}\n\n\t\tconst model = buildModel(profile);\n\t\tconst samples = bottomUp(model, 5)\n\t\t\t.filter(s => !s.isSpecial);\n\n\t\tif (samples.length === 0 || samples[0].percentage < 10) {\n\t\t\t// ignore this profile because 90% of the time is spent inside \"special\" frames\n\t\t\t// like idle, GC, or program\n\t\t\treturn { kind: ProfilingOutput.Irrelevant, samples: [] };\n\t\t}\n\n\t\treturn { kind: ProfilingOutput.Interesting, samples };\n\t}\n\n\tanalyseByUrlCategory(profile: IV8Profile, categories: [url: URI, category: string][]): [category: string, aggregated: number][] {\n\n\t\t// build search tree\n\t\tconst searchTree = TernarySearchTree.forUris<string>();\n\t\tsearchTree.fill(categories);\n\n\t\t// cost by categories\n\t\tconst model = buildModel(profile);\n\t\tconst aggegrateByCategory = new Map<string, number>();\n\n\t\tfor (const node of model.nodes) {\n\t\t\tconst loc = model.locations[node.locationId];\n\t\t\tlet category: string | undefined;\n\t\t\ttry {\n\t\t\t\tcategory = searchTree.findSubstr(URI.parse(loc.callFrame.url));\n\t\t\t} catch {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\tif (!category) {\n\t\t\t\tcategory = printCallFrameShort(loc.callFrame);\n\t\t\t}\n\t\t\tconst value = aggegrateByCategory.get(category) ?? 0;\n\t\t\tconst newValue = value + node.selfTime;\n\t\t\taggegrateByCategory.set(category, newValue);\n\t\t}\n\n\t\tconst result: [string, number][] = [];\n\t\tfor (const [key, value] of aggegrateByCategory) {\n\t\t\tresult.push([key, value]);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nfunction isSpecial(call: CdpCallFrame): boolean {\n\treturn call.functionName.startsWith('(') && call.functionName.endsWith(')');\n}\n\nfunction printCallFrameShort(frame: CdpCallFrame): string {\n\tlet result = frame.functionName || '(anonymous)';\n\tif (frame.url) {\n\t\tresult += '#';\n\t\tresult += basename(frame.url);\n\t\tif (frame.lineNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.lineNumber + 1;\n\t\t}\n\t\tif (frame.columnNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.columnNumber + 1;\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction printCallFrameStackLike(frame: CdpCallFrame): string {\n\tlet result = frame.functionName || '(anonymous)';\n\tif (frame.url) {\n\t\tresult += ' (';\n\t\tresult += frame.url;\n\t\tif (frame.lineNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.lineNumber + 1;\n\t\t}\n\t\tif (frame.columnNumber >= 0) {\n\t\t\tresult += ':';\n\t\t\tresult += frame.columnNumber + 1;\n\t\t}\n\t\tresult += ')';\n\t}\n\treturn result;\n}\n\nfunction getHeaviestLocationIds(model: IProfileModel, topN: number) {\n\tconst stackSelfTime: { [locationId: number]: number } = {};\n\tfor (const node of model.nodes) {\n\t\tstackSelfTime[node.locationId] = (stackSelfTime[node.locationId] || 0) + node.selfTime;\n\t}\n\n\tconst locationIds = Object.entries(stackSelfTime)\n\t\t.sort(([, a], [, b]) => b - a)\n\t\t.slice(0, topN)\n\t\t.map(([locationId]) => Number(locationId));\n\n\treturn new Set(locationIds);\n}\n\nfunction bottomUp(model: IProfileModel, topN: number) {\n\tconst root = BottomUpNode.root();\n\tconst locationIds = getHeaviestLocationIds(model, topN);\n\n\tfor (const node of model.nodes) {\n\t\tif (locationIds.has(node.locationId)) {\n\t\t\tprocessNode(root, node, model);\n\t\t\troot.addNode(node);\n\t\t}\n\t}\n\n\tconst result = Object.values(root.children)\n\t\t.sort((a, b) => b.selfTime - a.selfTime)\n\t\t.slice(0, topN);\n\n\tconst samples: BottomUpSample[] = [];\n\n\tfor (const node of result) {\n\n\t\tconst sample: BottomUpSample = {\n\t\t\tselfTime: Math.round(node.selfTime / 1000),\n\t\t\ttotalTime: Math.round(node.aggregateTime / 1000),\n\t\t\tlocation: printCallFrameShort(node.callFrame),\n\t\t\tabsLocation: printCallFrameStackLike(node.callFrame),\n\t\t\turl: node.callFrame.url,\n\t\t\tcaller: [],\n\t\t\tpercentage: Math.round(node.selfTime / (model.duration / 100)),\n\t\t\tisSpecial: isSpecial(node.callFrame)\n\t\t};\n\n\t\t// follow the heaviest caller paths\n\t\tconst stack = [node];\n\t\twhile (stack.length) {\n\t\t\tconst node = stack.pop()!;\n\t\t\tlet top: BottomUpNode | undefined;\n\t\t\tfor (const candidate of Object.values(node.children)) {\n\t\t\t\tif (!top || top.selfTime < candidate.selfTime) {\n\t\t\t\t\ttop = candidate;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (top) {\n\t\t\t\tconst percentage = Math.round(top.selfTime / (node.selfTime / 100));\n\t\t\t\tsample.caller.push({\n\t\t\t\t\tpercentage,\n\t\t\t\t\tlocation: printCallFrameShort(top.callFrame),\n\t\t\t\t\tabsLocation: printCallFrameStackLike(top.callFrame),\n\t\t\t\t});\n\t\t\t\tstack.push(top);\n\t\t\t}\n\t\t}\n\n\t\tsamples.push(sample);\n\t}\n\n\treturn samples;\n}\n"]}