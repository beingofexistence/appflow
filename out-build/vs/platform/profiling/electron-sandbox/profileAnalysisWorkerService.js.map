{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/profiling/electron-sandbox/profileAnalysisWorkerService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAehG,IAAkB,eAIjB;IAJD,WAAkB,eAAe;QAChC,2DAAO,CAAA;QACP,iEAAU,CAAA;QACV,mEAAW,CAAA;IACZ,CAAC,EAJiB,eAAe,+BAAf,eAAe,QAIhC;IAMY,QAAA,IAAI,GAA4B,IAAA,mBAAG,EAA4C,+BAA+B,CAAC,CAAC;IAS7H,YAAY;IAEZ,IAAM,4BAA4B,GAAlC,MAAM,4BAA4B;QAMjC,YACoB,CAAuC,EAC7C,CAAiC;YADV,MAAC,GAAD,CAAC,CAAqB;YAC5B,MAAC,GAAD,CAAC,CAAe;YAJ9B,MAAC,GAAgB,IAAI,0BAAG,CAAkB,oBAAoB,CAAC,CAAC;QAK7E,CAAC;QAEG,KAAK,CAAC,CAAC,CAAc,QAAiE;YAE7F,MAAM,MAAM,GAAG,IAAI,iCAAkB,CACpC,IAAI,CAAC,CAAC,EACN,8DAA8D,EAC9D,EAAE,UAAU,CAAE,CACd,CAAC;YAEF,IAAI;gBACH,MAAM,CAAC,GAAG,MAAM,QAAQ,CAAC,MAAM,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;gBACxD,OAAO,CAAC,CAAC;aACT;oBAAS;gBACT,MAAM,CAAC,OAAO,EAAE,CAAC;aACjB;QACF,CAAC;QAED,KAAK,CAAC,eAAe,CAAC,OAAmB,EAAE,mBAAyC,EAAE,YAAoB,EAAE,mBAA4B;YACvI,OAAO,IAAI,CAAC,CAAC,CAAW,KAAK,EAAC,MAAM,EAAC,EAAE;gBACtC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;gBACrD,IAAI,MAAM,CAAC,IAAI,wCAAgC,EAAE;oBAChD,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;wBACpC,IAAA,6BAAI,EAAS;4BACZ,MAAM;4BACN,YAAY;4BACZ,MAAM,EAAE,mBAAmB,CAAC,MAAM,CAAC,GAAG,CAAC;yBACvC,EAAE,IAAI,CAAC,CAAC,EAAkB,IAAI,CAAC,CAAC,EAAY,mBAAmB,CAAC,CAAC;qBAClE;iBACD;gBACD,OAAO,MAAM,CAAC,IAAI,CAAC;YACpB,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,iBAAiB,CAAC,OAAmB,EAAE,SAAwC;YACpF,OAAO,IAAI,CAAC,CAAC,CAAW,KAAK,EAAC,MAAM,EAAC,EAAE;gBACtC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBACrE,OAAO,MAAM,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IAjDK,4BAA4B;QAO/B,WAAA,eAAG,CAAA;QACH,WAAA,SAAG,CAAA;OARA,4BAA4B,CAiDjC;IA4BD,IAAA,gBAAG,EAAe,YAAI,EAA2B,4BAA4B,oCAA4B,CAAC","file":"profileAnalysisWorkerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { DefaultWorkerFactory } from 'vs/base/browser/defaultWorkerFactory';\nimport { URI } from 'vs/base/common/uri';\nimport { SimpleWorkerClient } from 'vs/base/common/worker/simpleWorker';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IV8Profile } from 'vs/platform/profiling/common/profiling';\nimport { BottomUpSample } from 'vs/platform/profiling/common/profilingModel';\nimport { reportSample } from 'vs/platform/profiling/common/profilingTelemetrySpec';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\n\nexport const enum ProfilingOutput {\n\tFailure,\n\tIrrelevant,\n\tInteresting,\n}\n\nexport interface IScriptUrlClassifier {\n\t(scriptUrl: string): string;\n}\n\nexport const IProfileAnalysisWorkerService = createDecorator<IProfileAnalysisWorkerService>('IProfileAnalysisWorkerService');\n\nexport interface IProfileAnalysisWorkerService {\n\treadonly _serviceBrand: undefined;\n\tanalyseBottomUp(profile: IV8Profile, callFrameClassifier: IScriptUrlClassifier, perfBaseline: number, sendAsErrorTelemtry: boolean): Promise<ProfilingOutput>;\n\tanalyseByLocation(profile: IV8Profile, locations: [location: URI, id: string][]): Promise<[category: string, aggregated: number][]>;\n}\n\n\n// ---- impl\n\nclass ProfileAnalysisWorkerService implements IProfileAnalysisWorkerService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _workerFactory = new DefaultWorkerFactory('CpuProfileAnalysis');\n\n\tconstructor(\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tprivate async _withWorker<R>(callback: (worker: Proxied<IProfileAnalysisWorker>) => Promise<R>): Promise<R> {\n\n\t\tconst worker = new SimpleWorkerClient<Proxied<IProfileAnalysisWorker>, {}>(\n\t\t\tthis._workerFactory,\n\t\t\t'vs/platform/profiling/electron-sandbox/profileAnalysisWorker',\n\t\t\t{ /* host */ }\n\t\t);\n\n\t\ttry {\n\t\t\tconst r = await callback(await worker.getProxyObject());\n\t\t\treturn r;\n\t\t} finally {\n\t\t\tworker.dispose();\n\t\t}\n\t}\n\n\tasync analyseBottomUp(profile: IV8Profile, callFrameClassifier: IScriptUrlClassifier, perfBaseline: number, sendAsErrorTelemtry: boolean): Promise<ProfilingOutput> {\n\t\treturn this._withWorker(async worker => {\n\t\t\tconst result = await worker.analyseBottomUp(profile);\n\t\t\tif (result.kind === ProfilingOutput.Interesting) {\n\t\t\t\tfor (const sample of result.samples) {\n\t\t\t\t\treportSample({\n\t\t\t\t\t\tsample,\n\t\t\t\t\t\tperfBaseline,\n\t\t\t\t\t\tsource: callFrameClassifier(sample.url)\n\t\t\t\t\t}, this._telemetryService, this._logService, sendAsErrorTelemtry);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result.kind;\n\t\t});\n\t}\n\n\tasync analyseByLocation(profile: IV8Profile, locations: [location: URI, id: string][]): Promise<[category: string, aggregated: number][]> {\n\t\treturn this._withWorker(async worker => {\n\t\t\tconst result = await worker.analyseByUrlCategory(profile, locations);\n\t\t\treturn result;\n\t\t});\n\t}\n}\n\n// ---- worker contract\n\nexport interface BottomUpAnalysis {\n\tkind: ProfilingOutput;\n\tsamples: BottomUpSample[];\n}\n\nexport interface CategoryAnalysis {\n\tcategory: string;\n\tpercentage: number;\n\taggregated: number;\n\toverallDuration: number;\n}\n\nexport interface IProfileAnalysisWorker {\n\tanalyseBottomUp(profile: IV8Profile): BottomUpAnalysis;\n\tanalyseByUrlCategory(profile: IV8Profile, categories: [url: URI, category: string][]): [category: string, aggregated: number][];\n}\n\n// TODO@jrieken move into worker logic\ntype Proxied<T> = { [K in keyof T]: T[K] extends (...args: infer A) => infer R\n\t? (...args: A) => Promise<Awaited<R>>\n\t: never\n};\n\n\nregisterSingleton(IProfileAnalysisWorkerService, ProfileAnalysisWorkerService, InstantiationType.Delayed);\n"]}