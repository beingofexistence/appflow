{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/profiling/electron-main/windowProfiling.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAEhB,YACkB,CAAsB,EACtB,CAAkB,EACL,CAAgB;YAF7B,MAAC,GAAD,CAAC,CAAqB;YACtB,MAAC,GAAD,CAAC,CAAiB;YACL,MAAC,GAAD,CAAC,CAAe;QAC3C,CAAC;QAEL,KAAK,CAAC,OAAO,CAAC,QAAgB;YAE7B,MAAM,IAAI,CAAC,CAAC,EAAS,CAAC;YAEtB,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAO,WAAW,CAAC,QAAQ,CAAC;YACpD,MAAM,SAAS,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;YAC9C,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC,CAAU,CAAC;YACnE,MAAM,IAAA,WAAG,EAAK,QAAQ,CAAC,CAAC;YACxB,MAAM,IAAI,GAAkB,MAAM,SAAS,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;YACzE,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC,CAAU,CAAC;YAEhE,MAAM,IAAI,CAAC,CAAC,EAAY,CAAC;YACzB,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAEO,KAAK,CAAC,CAAC;YACd,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAO,WAAW,CAAC,QAAQ,CAAC;YACpD,SAAS,CAAC,MAAM,EAAE,CAAC;YACnB,MAAM,SAAS,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChD,CAAC;QAEO,KAAK,CAAC,CAAC;YACd,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAO,WAAW,CAAC,QAAQ,CAAC;YACpD,MAAM,SAAS,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;YAChD,SAAS,CAAC,MAAM,EAAE,CAAC;QACpB,CAAC;KACD,CAAA;IAlCY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,SAAG,CAAA;OALO,IAAI,CAkChB","file":"windowProfiling.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ProfileResult } from 'v8-inspect-profiler';\nimport { BrowserWindow } from 'electron';\nimport { timeout } from 'vs/base/common/async';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IV8Profile } from 'vs/platform/profiling/common/profiling';\n\nexport class WindowProfiler {\n\n\tconstructor(\n\t\tprivate readonly _window: BrowserWindow,\n\t\tprivate readonly _sessionId: string,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tasync inspect(duration: number): Promise<IV8Profile> {\n\n\t\tawait this._connect();\n\n\t\tconst inspector = this._window.webContents.debugger;\n\t\tawait inspector.sendCommand('Profiler.start');\n\t\tthis._logService.warn('[perf] profiling STARTED', this._sessionId);\n\t\tawait timeout(duration);\n\t\tconst data: ProfileResult = await inspector.sendCommand('Profiler.stop');\n\t\tthis._logService.warn('[perf] profiling DONE', this._sessionId);\n\n\t\tawait this._disconnect();\n\t\treturn data.profile;\n\t}\n\n\tprivate async _connect() {\n\t\tconst inspector = this._window.webContents.debugger;\n\t\tinspector.attach();\n\t\tawait inspector.sendCommand('Profiler.enable');\n\t}\n\n\tprivate async _disconnect() {\n\t\tconst inspector = this._window.webContents.debugger;\n\t\tawait inspector.sendCommand('Profiler.disable');\n\t\tinspector.detach();\n\t}\n}\n"]}