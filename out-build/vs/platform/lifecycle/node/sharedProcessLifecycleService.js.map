{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/lifecycle/node/sharedProcessLifecycleService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOnF,QAAA,IAAI,GAA6B,IAAA,mBAAG,EAA6C,+BAA+B,CAAC,CAAC;IAYxH,IAAM,IAAI,GAAV,MAAM,IAA8B,SAAQ,eAAG;QAOrD,YACc,CAAgC;YAE7C,KAAK,EAAE,CAAC;YAFsB,MAAC,GAAD,CAAC,CAAc;YAJ7B,MAAC,GAAiB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAC9D,mBAAc,GAAG,IAAI,CAAC,CAAC,CAAe,KAAK,CAAC;QAMrD,CAAC;QAED,kBAAkB;YACjB,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,iCAAiC,CAAC,CAAC;YAEzD,IAAI,CAAC,CAAC,CAAe,IAAI,EAAE,CAAC;QAC7B,CAAC;KACD,CAAA;IAlBY,oBAAI;mBAAJ,IAAI;QAQd,WAAA,SAAG,CAAA;OARO,IAAI,CAkBhB","file":"sharedProcessLifecycleService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport const ISharedProcessLifecycleService = createDecorator<ISharedProcessLifecycleService>('sharedProcessLifecycleService');\n\nexport interface ISharedProcessLifecycleService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event for when the application will shutdown\n\t */\n\treadonly onWillShutdown: Event<void>;\n}\n\nexport class SharedProcessLifecycleService extends Disposable implements ISharedProcessLifecycleService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onWillShutdown = this._register(new Emitter<void>());\n\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tfireOnWillShutdown(): void {\n\t\tthis.logService.trace('Lifecycle#onWillShutdown.fire()');\n\n\t\tthis._onWillShutdown.fire();\n\t}\n}\n"]}