{"version":3,"sources":["vs/platform/keyboardLayout/common/keyboardConfig.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,IAAkB,cAGjB;IAHD,WAAkB,cAAc;QAC/B,mDAAI,CAAA;QACJ,yDAAO,CAAA;IACR,CAAC,EAHiB,cAAc,8BAAd,cAAc,QAG/B;IAOD,SAAgB,IAAI,CAAe,oBAAyB;QAC3D,MAAM,QAAQ,GAAG,oBAAoB,CAAC,QAAQ,CAAwD,UAAU,CAAC,CAAC;QAClH,MAAM,QAAQ,GAAG,CAAC,QAAQ,EAAE,QAAQ,KAAK,SAAS,CAAC,CAAC,gCAAwB,CAAC,4BAAoB,CAAC,CAAC;QACnG,MAAM,iBAAiB,GAAG,OAAO,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAC/D,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,CAAC;IACxC,CAAC;IALD,oBAKC;IAED,MAAM,qBAAqB,GAAG,cAAG,CAAM,EAAE,CAAyB,2BAAgB,CAAC,aAAa,CAAC,CAAC;IAClG,MAAM,qBAAqB,GAAuB;QACjD,IAAI,EAAE,UAAU;QAChB,OAAO,EAAE,EAAE;QACX,MAAM,EAAE,QAAQ;QAChB,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA4B,EAAE,IAAU,CAAC;QAC/D,YAAY,EAAE;YACb,mBAAmB,EAAE;gBACpB,KAAK,wCAAgC;gBACrC,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC;gBACzB,OAAO,EAAE,MAAM;gBACf,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAU,EAAE,IAAiG,CAAC;gBAChJ,QAAQ,EAAE,aAAE,sCAA8B,IAAI,aAAE,kCAA0B;aAC1E;YACD,4BAA4B,EAAE;gBAC7B,KAAK,wCAAgC;gBACrC,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,KAAK;gBACd,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAmB,EAAE,IAAoE,CAAC;gBAC5H,QAAQ,EAAE,aAAE,oCAA4B;aACxC;SACD;KACD,CAAC;IAEF,qBAAqB,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC","file":"keyboardConfig.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { OS, OperatingSystem } from 'vs/base/common/platform';\nimport { ConfigurationScope, Extensions as ConfigExtensions, IConfigurationNode, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport const enum DispatchConfig {\n\tCode,\n\tKeyCode\n}\n\nexport interface IKeyboardConfig {\n\tdispatch: DispatchConfig;\n\tmapAltGrToCtrlAlt: boolean;\n}\n\nexport function readKeyboardConfig(configurationService: IConfigurationService): IKeyboardConfig {\n\tconst keyboard = configurationService.getValue<{ dispatch: any; mapAltGrToCtrlAlt: any } | undefined>('keyboard');\n\tconst dispatch = (keyboard?.dispatch === 'keyCode' ? DispatchConfig.KeyCode : DispatchConfig.Code);\n\tconst mapAltGrToCtrlAlt = Boolean(keyboard?.mapAltGrToCtrlAlt);\n\treturn { dispatch, mapAltGrToCtrlAlt };\n}\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigExtensions.Configuration);\nconst keyboardConfiguration: IConfigurationNode = {\n\t'id': 'keyboard',\n\t'order': 15,\n\t'type': 'object',\n\t'title': nls.localize('keyboardConfigurationTitle', \"Keyboard\"),\n\t'properties': {\n\t\t'keyboard.dispatch': {\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\ttype: 'string',\n\t\t\tenum: ['code', 'keyCode'],\n\t\t\tdefault: 'code',\n\t\t\tmarkdownDescription: nls.localize('dispatch', \"Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.\"),\n\t\t\tincluded: OS === OperatingSystem.Macintosh || OS === OperatingSystem.Linux\n\t\t},\n\t\t'keyboard.mapAltGrToCtrlAlt': {\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tmarkdownDescription: nls.localize('mapAltGrToCtrlAlt', \"Controls if the AltGraph+ modifier should be treated as Ctrl+Alt+.\"),\n\t\t\tincluded: OS === OperatingSystem.Windows\n\t\t}\n\t}\n};\n\nconfigurationRegistry.registerConfiguration(keyboardConfiguration);\n"]}