{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/keyboardLayout/electron-main/keyboardLayoutMainService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUnF,QAAA,IAAI,GAAyB,IAAA,mBAAG,EAAyC,2BAA2B,CAAC,CAAC;IAI5G,IAAM,IAAI,GAAV,MAAM,IAA0B,SAAQ,eAAG;QAUjD,YACwB,oBAA0B;YAEjD,KAAK,EAAE,CAAC;YATQ,MAAC,GAA4B,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAA2B,CAAC,CAAC;YACxF,8BAAyB,GAAG,IAAI,CAAC,CAAC,CAA0B,KAAK,CAAC;YAS1E,IAAI,CAAC,CAAC,GAAc,IAAI,CAAC;YACzB,IAAI,CAAC,CAAC,GAAqB,IAAI,CAAC;YAEhC,uDAAuD;YACvD,sDAAsD;YACtD,sBAAsB;YACtB,oBAAoB,CAAC,IAAI,4CAAoC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAY,CAAC,CAAC;QAC9F,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,IAAI,CAAC,CAAC,EAAa;gBACvB,IAAI,CAAC,CAAC,GAAc,IAAI,CAAC,CAAC,EAAc,CAAC;aACzC;YACD,OAAO,IAAI,CAAC,CAAC,CAAY;QAC1B,CAAC;QAEO,KAAK,CAAC,CAAC;YACd,MAAM,eAAe,GAAG,sDAAa,eAAe,2BAAC,CAAC;YAEtD,IAAI,CAAC,CAAC,GAAqB,sBAAsB,CAAC,eAAe,CAAC,CAAC;YACnE,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAI;gBACnB,wDAAwD;gBACxD,oFAAoF;gBACpF,kEAAkE;gBAClE,eAAe,CAAC,yBAAyB,CAAC,GAAG,EAAE;oBAC9C,IAAI,CAAC,CAAC,GAAqB,sBAAsB,CAAC,eAAe,CAAC,CAAC;oBACnE,IAAI,CAAC,CAAC,CAA0B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAmB,CAAC;gBAChE,CAAC,CAAC,CAAC;aACH;QACF,CAAC;QAEM,KAAK,CAAC,qBAAqB;YACjC,MAAM,IAAI,CAAC,CAAC,EAAY,CAAC;YACzB,OAAO,IAAI,CAAC,CAAoB,CAAC;QAClC,CAAC;KACD,CAAA;IAjDY,oBAAI;mBAAJ,IAAI;QAWd,WAAA,2BAAI,CAAA;OAXM,IAAI,CAiDhB;IAED,SAAS,sBAAsB,CAAC,eAAoC;QACnE,MAAM,eAAe,GAAG,eAAe,CAAC,SAAS,EAAE,CAAC;QACpD,MAAM,kBAAkB,GAAG,eAAe,CAAC,wBAAwB,EAAE,CAAC;QACtE,OAAO,EAAE,eAAe,EAAE,kBAAkB,EAAE,CAAC;IAChD,CAAC","file":"keyboardLayoutMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nativeKeymap from 'native-keymap';\nimport * as platform from 'vs/base/common/platform';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeyboardLayoutData, INativeKeyboardLayoutService } from 'vs/platform/keyboardLayout/common/keyboardLayoutService';\nimport { ILifecycleMainService, LifecycleMainPhase } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\n\nexport const IKeyboardLayoutMainService = createDecorator<IKeyboardLayoutMainService>('keyboardLayoutMainService');\n\nexport interface IKeyboardLayoutMainService extends INativeKeyboardLayoutService { }\n\nexport class KeyboardLayoutMainService extends Disposable implements INativeKeyboardLayoutService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = this._register(new Emitter<IKeyboardLayoutData>());\n\treadonly onDidChangeKeyboardLayout = this._onDidChangeKeyboardLayout.event;\n\n\tprivate _initPromise: Promise<void> | null;\n\tprivate _keyboardLayoutData: IKeyboardLayoutData | null;\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService\n\t) {\n\t\tsuper();\n\t\tthis._initPromise = null;\n\t\tthis._keyboardLayoutData = null;\n\n\t\t// perf: automatically trigger initialize after windows\n\t\t// have opened so that we can do this work in parallel\n\t\t// to the window load.\n\t\tlifecycleMainService.when(LifecycleMainPhase.AfterWindowOpen).then(() => this._initialize());\n\t}\n\n\tprivate _initialize(): Promise<void> {\n\t\tif (!this._initPromise) {\n\t\t\tthis._initPromise = this._doInitialize();\n\t\t}\n\t\treturn this._initPromise;\n\t}\n\n\tprivate async _doInitialize(): Promise<void> {\n\t\tconst nativeKeymapMod = await import('native-keymap');\n\n\t\tthis._keyboardLayoutData = readKeyboardLayoutData(nativeKeymapMod);\n\t\tif (!platform.isCI) {\n\t\t\t// See https://github.com/microsoft/vscode/issues/152840\n\t\t\t// Do not register the keyboard layout change listener in CI because it doesn't work\n\t\t\t// on the build machines and it just adds noise to the build logs.\n\t\t\tnativeKeymapMod.onDidChangeKeyboardLayout(() => {\n\t\t\t\tthis._keyboardLayoutData = readKeyboardLayoutData(nativeKeymapMod);\n\t\t\t\tthis._onDidChangeKeyboardLayout.fire(this._keyboardLayoutData);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async getKeyboardLayoutData(): Promise<IKeyboardLayoutData> {\n\t\tawait this._initialize();\n\t\treturn this._keyboardLayoutData!;\n\t}\n}\n\nfunction readKeyboardLayoutData(nativeKeymapMod: typeof nativeKeymap): IKeyboardLayoutData {\n\tconst keyboardMapping = nativeKeymapMod.getKeyMap();\n\tconst keyboardLayoutInfo = nativeKeymapMod.getCurrentKeyboardLayout();\n\treturn { keyboardMapping, keyboardLayoutInfo };\n}\n"]}