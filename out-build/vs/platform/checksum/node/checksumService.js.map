{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/checksum/node/checksumService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YAA2C,CAAgB;YAAhB,MAAC,GAAD,CAAC,CAAe;QAAa,CAAC;QAEzE,KAAK,CAAC,QAAQ,CAAC,QAAa;YAC3B,MAAM,MAAM,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAW,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;YACvE,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC9C,MAAM,IAAI,GAAG,IAAA,mBAAU,EAAC,KAAK,CAAC,CAAC;gBAE/B,IAAA,YAAG,EAAU,MAAM,EAAE;oBACpB,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBACxC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;oBAC/B,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;iBAC9D,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IAlBY,oBAAI;mBAAJ,IAAI;QAIH,WAAA,WAAG,CAAA;OAJJ,IAAI,CAkBhB","file":"checksumService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createHash } from 'crypto';\nimport { listenStream } from 'vs/base/common/stream';\nimport { URI } from 'vs/base/common/uri';\nimport { IChecksumService } from 'vs/platform/checksum/common/checksumService';\nimport { IFileService } from 'vs/platform/files/common/files';\n\nexport class ChecksumService implements IChecksumService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(@IFileService private readonly fileService: IFileService) { }\n\n\tasync checksum(resource: URI): Promise<string> {\n\t\tconst stream = (await this.fileService.readFileStream(resource)).value;\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tconst hash = createHash('md5');\n\n\t\t\tlistenStream(stream, {\n\t\t\t\tonData: data => hash.update(data.buffer),\n\t\t\t\tonError: error => reject(error),\n\t\t\t\tonEnd: () => resolve(hash.digest('base64').replace(/=+$/, ''))\n\t\t\t});\n\t\t});\n\t}\n}\n"]}