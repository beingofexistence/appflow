{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/environment/electron-main/environmentMainService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;IAUnF,QAAA,IAAI,GAAsB,IAAA,mBAAG,EAAkE,iBAAG,CAAiB,CAAC;IA6BjI,MAAa,IAAuB,SAAQ,wBAAG;QAA/C;;YAES,MAAC,GAAkC,EAAE,CAAC;QA4D/C,CAAC;QAzDA,IAAI,mBAAmB,KAAa,OAAO,IAAA,UAAG,EAAE,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAG5E,IAAI,UAAU,KAAa,OAAO,IAAA,UAAG,EAAE,IAAI,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAGvE,IAAI,aAAa,KAAa,OAAO,IAAA,aAAG,EAAmB,IAAI,CAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,CAAC,CAAC,CAAC;QAGrH,IAAI,YAAY,KAAa,OAAO,IAAA,UAAG,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;QAG3E,IAAI,cAAc,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAGxE,IAAI,mBAAmB,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAGxE,IAAI,aAAa,KAAyB,OAAO,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC;QAGtG,IAAI,YAAY,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;QAE5D,0BAA0B;YACzB,IAAI,CAAC,aAAE,EAAO;gBACb,OAAO;aACP;YACD,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE;gBAC9B,IAAI,GAAG,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAE;oBACtC,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,sCAAsC;oBAC7E,IAAI,IAAI,CAAC,CAAC,CAAQ,WAAW,CAAC,EAAE;wBAC/B,SAAS;qBACT;oBACD,iEAAiE;oBACjE,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;wBAC7B,IAAI,CAAC,CAAC,CAAQ,WAAW,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAE,CAAC;qBACvD;oBACD,0EAA0E;oBAC1E,kCAAkC;oBAClC,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;wBACrB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;qBAC5C;yBAAM;wBACN,OAAO,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;qBAChC;iBACD;aACD;QACF,CAAC;QAED,4BAA4B;YAC3B,IAAI,CAAC,aAAE,EAAO;gBACb,OAAO;aACP;YACD,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC,EAAS;gBAChC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,CAAC;gBACtC,OAAO,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,CAAC;aAC1B;QACF,CAAC;KACD;IA9DD,oBA8DC;IAzDA;QADC,gBAAG;mDACwE;IAG5E;QADC,gBAAG;0CACmE;IAGvE;QADC,gBAAG;6CACiH;IAGrH;QADC,gBAAG;4CACuE;IAG3E;QADC,gBAAG;8CACoE;IAGxE;QADC,gBAAG;mDACoE;IAGxE;QADC,gBAAG;6CACkG;IAGtG;QADC,gBAAG;4CACwD","file":"environmentMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { memoize } from 'vs/base/common/decorators';\nimport { join } from 'vs/base/common/path';\nimport { isLinux } from 'vs/base/common/platform';\nimport { createStaticIPCHandle } from 'vs/base/parts/ipc/node/ipc.net';\nimport { IEnvironmentService, INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IEnvironmentMainService = refineServiceDecorator<IEnvironmentService, IEnvironmentMainService>(IEnvironmentService);\n\n/**\n * A subclass of the `INativeEnvironmentService` to be used only in electron-main\n * environments.\n */\nexport interface IEnvironmentMainService extends INativeEnvironmentService {\n\n\t// --- NLS cache path\n\treadonly cachedLanguagesPath: string;\n\n\t// --- backup paths\n\treadonly backupHome: string;\n\n\t// --- V8 code caching\n\treadonly codeCachePath: string | undefined;\n\treadonly useCodeCache: boolean;\n\n\t// --- IPC\n\treadonly mainIPCHandle: string;\n\treadonly mainLockfile: string;\n\n\t// --- config\n\treadonly disableUpdates: boolean;\n\n\tunsetSnapExportedVariables(): void;\n\trestoreSnapExportedVariables(): void;\n}\n\nexport class EnvironmentMainService extends NativeEnvironmentService implements IEnvironmentMainService {\n\n\tprivate _snapEnv: Record<string, string> = {};\n\n\t@memoize\n\tget cachedLanguagesPath(): string { return join(this.userDataPath, 'clp'); }\n\n\t@memoize\n\tget backupHome(): string { return join(this.userDataPath, 'Backups'); }\n\n\t@memoize\n\tget mainIPCHandle(): string { return createStaticIPCHandle(this.userDataPath, 'main', this.productService.version); }\n\n\t@memoize\n\tget mainLockfile(): string { return join(this.userDataPath, 'code.lock'); }\n\n\t@memoize\n\tget disableUpdates(): boolean { return !!this.args['disable-updates']; }\n\n\t@memoize\n\tget crossOriginIsolated(): boolean { return !!this.args['enable-coi']; }\n\n\t@memoize\n\tget codeCachePath(): string | undefined { return process.env['VSCODE_CODE_CACHE_PATH'] || undefined; }\n\n\t@memoize\n\tget useCodeCache(): boolean { return !!this.codeCachePath; }\n\n\tunsetSnapExportedVariables() {\n\t\tif (!isLinux) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const key in process.env) {\n\t\t\tif (key.endsWith('_VSCODE_SNAP_ORIG')) {\n\t\t\t\tconst originalKey = key.slice(0, -17); // Remove the _VSCODE_SNAP_ORIG suffix\n\t\t\t\tif (this._snapEnv[originalKey]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Preserve the original value in case the snap env is re-entered\n\t\t\t\tif (process.env[originalKey]) {\n\t\t\t\t\tthis._snapEnv[originalKey] = process.env[originalKey]!;\n\t\t\t\t}\n\t\t\t\t// Copy the original value from before entering the snap env if available,\n\t\t\t\t// if not delete the env variable.\n\t\t\t\tif (process.env[key]) {\n\t\t\t\t\tprocess.env[originalKey] = process.env[key];\n\t\t\t\t} else {\n\t\t\t\t\tdelete process.env[originalKey];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\trestoreSnapExportedVariables() {\n\t\tif (!isLinux) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const key in this._snapEnv) {\n\t\t\tprocess.env[key] = this._snapEnv[key];\n\t\t\tdelete this._snapEnv[key];\n\t\t}\n\t}\n}\n"]}