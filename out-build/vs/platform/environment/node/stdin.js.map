{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/environment/node/stdin.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,SAAgB,IAAI;QACnB,IAAI;YACH,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,gEAAgE;SAC7F;QAAC,OAAO,KAAK,EAAE;YACf,qEAAqE;SACrE;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAPD,oBAOC;IAED,SAAgB,IAAI,CAAc,YAAoB;QACrD,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YAC5B,MAAM,YAAY,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEzC,yBAAyB;YACzB,UAAU,CAAC,GAAG,EAAE;gBACf,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;gBAEnD,OAAO,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,EAAE,YAAY,CAAC,CAAC;YAEjB,wCAAwC;YACxC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACJ,CAAC;IAdD,oBAcC;IAED,SAAgB,IAAI;QACnB,OAAO,IAAA,aAAG,EAAQ,IAAA,WAAM,GAAE,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC;IAFD,oBAEC;IAEM,KAAK,UAAU,IAAI,CAAU,UAAkB,EAAE,OAAgB;QAEvE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACzC,IAAA,sBAAG,EAAqB,OAAO,CAAC;4DACzB,wBAAwB;YAC/B,cAAQ,CAAC,UAAU,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,uFAAuF;SAC3H,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YACpC,OAAO,CAAC,GAAG,CAAC,kCAAkC,QAAQ,0BAA0B,CAAC,CAAC;YAClF,QAAQ,GAAG,MAAM,CAAC;SAClB;QAED,+CAA+C;QAC/C,+CAA+C;QAC/C,oDAAoD;QACpD,mBAAmB;QACnB,sDAAsD;QAEtD,MAAM,eAAe,GAAG,IAAI,WAAG,EAAI,CAAC;QAEpC,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAE3C,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;YAChC,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACtC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,cAAQ,CAAC,UAAU,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YAC5B,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;YAC1B,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBAC5B,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,cAAQ,CAAC,UAAU,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;aAClE;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAlCD,oBAkCC","file":"stdin.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { tmpdir } from 'os';\nimport { Queue } from 'vs/base/common/async';\nimport { randomPath } from 'vs/base/common/extpath';\nimport { Promises } from 'vs/base/node/pfs';\nimport { resolveTerminalEncoding } from 'vs/base/node/terminalEncoding';\n\nexport function hasStdinWithoutTty() {\n\ttry {\n\t\treturn !process.stdin.isTTY; // Via https://twitter.com/MylesBorins/status/782009479382626304\n\t} catch (error) {\n\t\t// Windows workaround for https://github.com/nodejs/node/issues/11656\n\t}\n\treturn false;\n}\n\nexport function stdinDataListener(durationinMs: number): Promise<boolean> {\n\treturn new Promise(resolve => {\n\t\tconst dataListener = () => resolve(true);\n\n\t\t// wait for 1s maximum...\n\t\tsetTimeout(() => {\n\t\t\tprocess.stdin.removeListener('data', dataListener);\n\n\t\t\tresolve(false);\n\t\t}, durationinMs);\n\n\t\t// ...but finish early if we detect data\n\t\tprocess.stdin.once('data', dataListener);\n\t});\n}\n\nexport function getStdinFilePath(): string {\n\treturn randomPath(tmpdir(), 'code-stdin', 3);\n}\n\nexport async function readFromStdin(targetPath: string, verbose: boolean): Promise<void> {\n\n\tlet [encoding, iconv] = await Promise.all([\n\t\tresolveTerminalEncoding(verbose),\t// respect terminal encoding when piping into file\n\t\timport('@vscode/iconv-lite-umd'),\t// lazy load encoding module for usage\n\t\tPromises.appendFile(targetPath, '') // make sure file exists right away (https://github.com/microsoft/vscode/issues/155341)\n\t]);\n\n\tif (!iconv.encodingExists(encoding)) {\n\t\tconsole.log(`Unsupported terminal encoding: ${encoding}, falling back to UTF-8.`);\n\t\tencoding = 'utf8';\n\t}\n\n\t// Use a `Queue` to be able to use `appendFile`\n\t// which helps file watchers to be aware of the\n\t// changes because each append closes the underlying\n\t// file descriptor.\n\t// (https://github.com/microsoft/vscode/issues/148952)\n\n\tconst appendFileQueue = new Queue();\n\n\tconst decoder = iconv.getDecoder(encoding);\n\n\tprocess.stdin.on('data', chunk => {\n\t\tconst chunkStr = decoder.write(chunk);\n\t\tappendFileQueue.queue(() => Promises.appendFile(targetPath, chunkStr));\n\t});\n\n\tprocess.stdin.on('end', () => {\n\t\tconst end = decoder.end();\n\t\tif (typeof end === 'string') {\n\t\t\tappendFileQueue.queue(() => Promises.appendFile(targetPath, end));\n\t\t}\n\t});\n}\n"]}