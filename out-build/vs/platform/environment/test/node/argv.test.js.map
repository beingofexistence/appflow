{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/environment/test/node/argv.test.ts"],"names":[],"mappings":"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","file":"argv.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { formatOptions, Option, OptionDescriptions, Subcommand, parseArgs, ErrorReporter } from 'vs/platform/environment/node/argv';\nimport { addArg } from 'vs/platform/environment/node/argvHelper';\n\nfunction o(description: string, type: 'boolean' | 'string' | 'string[]' = 'string'): Option<any> {\n\treturn {\n\t\tdescription, type\n\t};\n}\nfunction c(description: string, options: OptionDescriptions<any>): Subcommand<any> {\n\treturn {\n\t\tdescription, type: 'subcommand', options\n\t};\n}\n\nsuite('formatOptions', () => {\n\n\ttest('Text should display small columns correctly', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tformatOptions({\n\t\t\t\t'add': o('bar')\n\t\t\t}, 80),\n\t\t\t['  --add        bar']\n\t\t);\n\t\tassert.deepStrictEqual(\n\t\t\tformatOptions({\n\t\t\t\t'add': o('bar'),\n\t\t\t\t'wait': o('ba'),\n\t\t\t\t'trace': o('b')\n\t\t\t}, 80),\n\t\t\t[\n\t\t\t\t'  --add        bar',\n\t\t\t\t'  --wait       ba',\n\t\t\t\t'  --trace      b'\n\t\t\t]);\n\t});\n\n\ttest('Text should wrap', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tformatOptions({\n\t\t\t\t'add': o((<any>'bar ').repeat(9))\n\t\t\t}, 40),\n\t\t\t[\n\t\t\t\t'  --add        bar bar bar bar bar bar',\n\t\t\t\t'               bar bar bar'\n\t\t\t]);\n\t});\n\n\ttest('Text should revert to the condensed view when the terminal is too narrow', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tformatOptions({\n\t\t\t\t'add': o((<any>'bar ').repeat(9))\n\t\t\t}, 30),\n\t\t\t[\n\t\t\t\t'  --add',\n\t\t\t\t'      bar bar bar bar bar bar bar bar bar '\n\t\t\t]);\n\t});\n\n\ttest('addArg', () => {\n\t\tassert.deepStrictEqual(addArg([], 'foo'), ['foo']);\n\t\tassert.deepStrictEqual(addArg([], 'foo', 'bar'), ['foo', 'bar']);\n\t\tassert.deepStrictEqual(addArg(['foo'], 'bar'), ['foo', 'bar']);\n\t\tassert.deepStrictEqual(addArg(['--wait'], 'bar'), ['--wait', 'bar']);\n\t\tassert.deepStrictEqual(addArg(['--wait', '--', '--foo'], 'bar'), ['--wait', 'bar', '--', '--foo']);\n\t\tassert.deepStrictEqual(addArg(['--', '--foo'], 'bar'), ['bar', '--', '--foo']);\n\t});\n\n\ttest('subcommands', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tformatOptions({\n\t\t\t\t'testcmd': c('A test command', { add: o('A test command option') })\n\t\t\t}, 30),\n\t\t\t[\n\t\t\t\t'  --testcmd',\n\t\t\t\t'      A test command'\n\t\t\t]);\n\t});\n});\n\nsuite('parseArgs', () => {\n\tfunction newErrorReporter(result: string[] = [], command = ''): ErrorReporter & { result: string[] } {\n\t\tconst commandPrefix = command ? command + '-' : '';\n\t\treturn {\n\t\t\tonDeprecatedOption: (deprecatedId) => result.push(`${commandPrefix}onDeprecatedOption ${deprecatedId}`),\n\t\t\tonUnknownOption: (id) => result.push(`${commandPrefix}onUnknownOption ${id}`),\n\t\t\tonEmptyValue: (id) => result.push(`${commandPrefix}onEmptyValue ${id}`),\n\t\t\tonMultipleValues: (id, usedValue) => result.push(`${commandPrefix}onMultipleValues ${id} ${usedValue}`),\n\t\t\tgetSubcommandReporter: (c) => newErrorReporter(result, commandPrefix + c),\n\t\t\tresult\n\t\t};\n\t}\n\n\tfunction assertParse<T>(options: OptionDescriptions<T>, input: string[], expected: T, expectedErrors: string[]) {\n\t\tconst errorReporter = newErrorReporter();\n\t\tassert.deepStrictEqual(parseArgs(input, options, errorReporter), expected);\n\t\tassert.deepStrictEqual(errorReporter.result, expectedErrors);\n\t}\n\n\ttest('subcommands', () => {\n\n\t\tinterface TestArgs1 {\n\t\t\ttestcmd?: {\n\t\t\t\ttestArg?: string;\n\t\t\t\t_: string[];\n\t\t\t};\n\t\t\t_: string[];\n\t\t}\n\n\t\tconst options1: OptionDescriptions<TestArgs1> = {\n\t\t\t'testcmd': c('A test command', {\n\t\t\t\ttestArg: o('A test command option'),\n\t\t\t\t_: { type: 'string[]' }\n\t\t\t}),\n\t\t\t_: { type: 'string[]' }\n\t\t};\n\t\tassertParse(\n\t\t\toptions1,\n\t\t\t['testcmd', '--testArg=foo'],\n\t\t\t{ testcmd: { testArg: 'foo', '_': [] }, '_': [] },\n\t\t\t[]\n\t\t);\n\t\tassertParse(\n\t\t\toptions1,\n\t\t\t['testcmd', '--testArg=foo', '--testX'],\n\t\t\t{ testcmd: { testArg: 'foo', '_': [] }, '_': [] },\n\t\t\t['testcmd-onUnknownOption testX']\n\t\t);\n\n\t\tinterface TestArgs2 {\n\t\t\ttestcmd?: {\n\t\t\t\ttestArg?: string;\n\t\t\t\ttestX?: boolean;\n\t\t\t\t_: string[];\n\t\t\t};\n\t\t\ttestX?: boolean;\n\t\t\t_: string[];\n\t\t}\n\n\t\tconst options2: OptionDescriptions<TestArgs2> = {\n\t\t\t'testcmd': c('A test command', {\n\t\t\t\ttestArg: o('A test command option')\n\t\t\t}),\n\t\t\ttestX: { type: 'boolean', global: true, description: '' },\n\t\t\t_: { type: 'string[]' }\n\t\t};\n\t\tassertParse(\n\t\t\toptions2,\n\t\t\t['testcmd', '--testArg=foo', '--testX'],\n\t\t\t{ testcmd: { testArg: 'foo', testX: true, '_': [] }, '_': [] },\n\t\t\t[]\n\t\t);\n\t});\n});\n"]}