{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/environment/test/node/nativeModules.integrationTest.ts"],"names":[],"mappings":"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","file":"nativeModules.integrationTest.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { isWindows } from 'vs/base/common/platform';\nimport { flakySuite } from 'vs/base/test/common/testUtils';\n\nfunction testErrorMessage(module: string): string {\n\treturn `Unable to load \"${module}\" dependency. It was probably not compiled for the right operating system architecture or had missing build tools.`;\n}\n\nflakySuite('Native Modules (all platforms)', () => {\n\n\ttest('kerberos', async () => {\n\t\tconst kerberos = await import('kerberos');\n\t\tassert.ok(typeof kerberos.initializeClient === 'function', testErrorMessage('kerberos'));\n\t});\n\n\ttest('native-is-elevated', async () => {\n\t\tconst isElevated = await import('native-is-elevated');\n\t\tassert.ok(typeof isElevated === 'function', testErrorMessage('native-is-elevated '));\n\n\t\tconst result = isElevated();\n\t\tassert.ok(typeof result === 'boolean', testErrorMessage('native-is-elevated'));\n\t});\n\n\ttest('native-keymap', async () => {\n\t\tconst keyMap = await import('native-keymap');\n\t\tassert.ok(typeof keyMap.getCurrentKeyboardLayout === 'function', testErrorMessage('native-keymap'));\n\n\t\tconst result = keyMap.getCurrentKeyboardLayout();\n\t\tassert.ok(result, testErrorMessage('native-keymap'));\n\t});\n\n\ttest('native-watchdog', async () => {\n\t\tconst watchDog = await import('native-watchdog');\n\t\tassert.ok(typeof watchDog.start === 'function', testErrorMessage('native-watchdog'));\n\t});\n\n\t(process.type === 'renderer' ? test.skip /* TODO@electron module is not context aware yet and thus cannot load in Electron renderer used by tests */ : test)('node-pty', async () => {\n\t\tconst nodePty = await import('node-pty');\n\t\tassert.ok(typeof nodePty.spawn === 'function', testErrorMessage('node-pty'));\n\t});\n\n\t(process.type === 'renderer' ? test.skip /* TODO@electron module is not context aware yet and thus cannot load in Electron renderer used by tests */ : test)('@vscode/spdlog', async () => {\n\t\tconst spdlog = await import('@vscode/spdlog');\n\t\tassert.ok(typeof spdlog.createRotatingLogger === 'function', testErrorMessage('@vscode/spdlog'));\n\t\tassert.ok(typeof spdlog.version === 'number', testErrorMessage('@vscode/spdlog'));\n\t});\n\n\ttest('@parcel/watcher', async () => {\n\t\tconst parcelWatcher = await import('@parcel/watcher');\n\t\tassert.ok(typeof parcelWatcher.subscribe === 'function', testErrorMessage('@parcel/watcher'));\n\t});\n\n\ttest('@vscode/sqlite3', async () => {\n\t\tconst sqlite3 = await import('@vscode/sqlite3');\n\t\tassert.ok(typeof sqlite3.Database === 'function', testErrorMessage('@vscode/sqlite3'));\n\t});\n\n\ttest('vsda', async () => {\n\t\ttry {\n\t\t\tconst vsda: any = globalThis._VSCODE_NODE_MODULES['vsda'];\n\t\t\tconst signer = new vsda.signer();\n\t\t\tconst signed = await signer.sign('value');\n\t\t\tassert.ok(typeof signed === 'string', testErrorMessage('vsda'));\n\t\t} catch (error) {\n\t\t\tif (error.code !== 'MODULE_NOT_FOUND') {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t});\n});\n\n(!isWindows ? suite.skip : suite)('Native Modules (Windows)', () => {\n\n\t(process.type === 'renderer' ? test.skip /* TODO@electron module is not context aware yet and thus cannot load in Electron renderer used by tests */ : test)('@vscode/windows-mutex', async () => {\n\t\tconst mutex = await import('@vscode/windows-mutex');\n\t\tassert.ok(mutex && typeof mutex.isActive === 'function', testErrorMessage('@vscode/windows-mutex'));\n\t\tassert.ok(typeof mutex.isActive === 'function', testErrorMessage('@vscode/windows-mutex'));\n\t});\n\n\ttest('windows-foreground-love', async () => {\n\t\tconst foregroundLove = await import('windows-foreground-love');\n\t\tassert.ok(typeof foregroundLove.allowSetForegroundWindow === 'function', testErrorMessage('windows-foreground-love'));\n\n\t\tconst result = foregroundLove.allowSetForegroundWindow(process.pid);\n\t\tassert.ok(typeof result === 'boolean', testErrorMessage('windows-foreground-love'));\n\t});\n\n\ttest('@vscode/windows-process-tree', async () => {\n\t\tconst processTree = await import('@vscode/windows-process-tree');\n\t\tassert.ok(typeof processTree.getProcessTree === 'function', testErrorMessage('@vscode/windows-process-tree'));\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tprocessTree.getProcessTree(process.pid, tree => {\n\t\t\t\tif (tree) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error(testErrorMessage('@vscode/windows-process-tree')));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('@vscode/windows-registry', async () => {\n\t\tconst windowsRegistry = await import('@vscode/windows-registry');\n\t\tassert.ok(typeof windowsRegistry.GetStringRegKey === 'function', testErrorMessage('@vscode/windows-registry'));\n\n\t\tconst result = windowsRegistry.GetStringRegKey('HKEY_LOCAL_MACHINE', 'SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion', 'EditionID');\n\t\tassert.ok(typeof result === 'string' || typeof result === 'undefined', testErrorMessage('@vscode/windows-registry'));\n\t});\n\n\ttest('@vscode/windows-ca-certs', async () => {\n\t\t// @ts-ignore we do not directly depend on this module anymore\n\t\t// but indirectly from our dependency to `@vscode/proxy-agent`\n\t\t// we still want to ensure this module can work properly.\n\t\tconst windowsCerts = await import('@vscode/windows-ca-certs');\n\t\tconst store = new windowsCerts.Crypt32();\n\t\tassert.ok(windowsCerts, testErrorMessage('@vscode/windows-ca-certs'));\n\t\tlet certCount = 0;\n\t\ttry {\n\t\t\twhile (store.next()) {\n\t\t\t\tcertCount++;\n\t\t\t}\n\t\t} finally {\n\t\t\tstore.done();\n\t\t}\n\t\tassert(certCount > 0);\n\t});\n});\n"]}