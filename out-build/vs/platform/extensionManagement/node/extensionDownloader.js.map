{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionManagement/node/extensionDownloader.ts"],"names":[],"mappings":"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","file":"extensionDownloader.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises } from 'vs/base/common/async';\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { joinPath } from 'vs/base/common/resources';\nimport * as semver from 'vs/base/common/semver/semver';\nimport { isBoolean } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { Promises as FSPromises } from 'vs/base/node/pfs';\nimport { CorruptZipMessage } from 'vs/base/node/zip';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ExtensionVerificationStatus } from 'vs/platform/extensionManagement/common/abstractExtensionManagementService';\nimport { ExtensionManagementError, ExtensionManagementErrorCode, ExtensionSignaturetErrorCode, IExtensionGalleryService, IGalleryExtension, InstallOperation } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionKey, groupByExtension } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { ExtensionSignatureVerificationError, IExtensionSignatureVerificationService } from 'vs/platform/extensionManagement/node/extensionSignatureVerificationService';\nimport { IFileService, IFileStatWithMetadata } from 'vs/platform/files/common/files';\nimport { ILogService, LogLevel } from 'vs/platform/log/common/log';\n\nexport class ExtensionsDownloader extends Disposable {\n\n\tprivate static readonly SignatureArchiveExtension = '.sigzip';\n\n\treadonly extensionsDownloadDir: URI;\n\tprivate readonly cache: number;\n\tprivate readonly cleanUpPromise: Promise<void>;\n\n\tconstructor(\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionSignatureVerificationService private readonly extensionSignatureVerificationService: IExtensionSignatureVerificationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.extensionsDownloadDir = environmentService.extensionsDownloadLocation;\n\t\tthis.cache = 20; // Cache 20 downloaded VSIX files\n\t\tthis.cleanUpPromise = this.cleanUp();\n\t}\n\n\tasync download(extension: IGalleryExtension, operation: InstallOperation, verifySignature: boolean): Promise<{ readonly location: URI; readonly verificationStatus: ExtensionVerificationStatus }> {\n\t\tawait this.cleanUpPromise;\n\n\t\tconst location = joinPath(this.extensionsDownloadDir, this.getName(extension));\n\t\ttry {\n\t\t\tawait this.downloadFile(extension, location, location => this.extensionGalleryService.download(extension, location, operation));\n\t\t} catch (error) {\n\t\t\tthrow new ExtensionManagementError(error.message, ExtensionManagementErrorCode.Download);\n\t\t}\n\n\t\tlet verificationStatus: ExtensionVerificationStatus = false;\n\n\t\tif (verifySignature && this.shouldVerifySignature(extension)) {\n\t\t\tconst signatureArchiveLocation = await this.downloadSignatureArchive(extension);\n\t\t\ttry {\n\t\t\t\tverificationStatus = await this.extensionSignatureVerificationService.verify(location.fsPath, signatureArchiveLocation.fsPath, this.logService.getLevel() === LogLevel.Trace);\n\t\t\t} catch (error) {\n\t\t\t\tconst sigError = error as ExtensionSignatureVerificationError;\n\t\t\t\tverificationStatus = sigError.code;\n\t\t\t\tif (sigError.output) {\n\t\t\t\t\tthis.logService.trace(`Extension signature verification details for ${extension.identifier.id} ${extension.version}:\\n${sigError.output}`);\n\t\t\t\t}\n\t\t\t\tif (verificationStatus === ExtensionSignaturetErrorCode.PackageIsInvalidZip || verificationStatus === ExtensionSignaturetErrorCode.SignatureArchiveIsInvalidZip) {\n\t\t\t\t\tthrow new ExtensionManagementError(CorruptZipMessage, ExtensionManagementErrorCode.CorruptZip);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\t// Delete signature archive always\n\t\t\t\t\tawait this.delete(signatureArchiveLocation);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (verificationStatus === true) {\n\t\t\tthis.logService.info(`Extension signature is verified: ${extension.identifier.id}`);\n\t\t} else if (verificationStatus === false) {\n\t\t\tthis.logService.info(`Extension signature verification is not done: ${extension.identifier.id}`);\n\t\t} else {\n\t\t\tthis.logService.warn(`Extension signature verification failed with error '${verificationStatus}': ${extension.identifier.id}`);\n\t\t}\n\n\t\treturn { location, verificationStatus };\n\t}\n\n\tprivate shouldVerifySignature(extension: IGalleryExtension): boolean {\n\t\tif (!extension.isSigned) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst value = this.configurationService.getValue('extensions.verifySignature');\n\t\treturn isBoolean(value) ? value : true;\n\t}\n\n\tprivate async downloadSignatureArchive(extension: IGalleryExtension): Promise<URI> {\n\t\tawait this.cleanUpPromise;\n\n\t\tconst location = joinPath(this.extensionsDownloadDir, `${this.getName(extension)}${ExtensionsDownloader.SignatureArchiveExtension}`);\n\t\tawait this.downloadFile(extension, location, location => this.extensionGalleryService.downloadSignatureArchive(extension, location));\n\t\treturn location;\n\t}\n\n\tprivate async downloadFile(extension: IGalleryExtension, location: URI, downloadFn: (location: URI) => Promise<void>): Promise<void> {\n\t\t// Do not download if exists\n\t\tif (await this.fileService.exists(location)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Download directly if locaiton is not file scheme\n\t\tif (location.scheme !== Schemas.file) {\n\t\t\tawait downloadFn(location);\n\t\t\treturn;\n\t\t}\n\n\t\t// Download to temporary location first only if file does not exist\n\t\tconst tempLocation = joinPath(this.extensionsDownloadDir, `.${generateUuid()}`);\n\t\tif (!await this.fileService.exists(tempLocation)) {\n\t\t\tawait downloadFn(tempLocation);\n\t\t}\n\n\t\ttry {\n\t\t\t// Rename temp location to original\n\t\t\tawait FSPromises.rename(tempLocation.fsPath, location.fsPath, 2 * 60 * 1000 /* Retry for 2 minutes */);\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(tempLocation);\n\t\t\t} catch (e) { /* ignore */ }\n\t\t\tif (error.code === 'ENOTEMPTY') {\n\t\t\t\tthis.logService.info(`Rename failed because the file was downloaded by another source. So ignoring renaming.`, extension.identifier.id, location.path);\n\t\t\t} else {\n\t\t\t\tthis.logService.info(`Rename failed because of ${getErrorMessage(error)}. Deleted the file from downloaded location`, tempLocation.path);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync delete(location: URI): Promise<void> {\n\t\tawait this.cleanUpPromise;\n\t\tawait this.fileService.del(location);\n\t}\n\n\tprivate async cleanUp(): Promise<void> {\n\t\ttry {\n\t\t\tif (!(await this.fileService.exists(this.extensionsDownloadDir))) {\n\t\t\t\tthis.logService.trace('Extension VSIX downloads cache dir does not exist');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst folderStat = await this.fileService.resolve(this.extensionsDownloadDir, { resolveMetadata: true });\n\t\t\tif (folderStat.children) {\n\t\t\t\tconst toDelete: URI[] = [];\n\t\t\t\tconst vsixs: [ExtensionKey, IFileStatWithMetadata][] = [];\n\t\t\t\tconst signatureArchives: URI[] = [];\n\n\t\t\t\tfor (const stat of folderStat.children) {\n\t\t\t\t\tif (stat.name.endsWith(ExtensionsDownloader.SignatureArchiveExtension)) {\n\t\t\t\t\t\tsignatureArchives.push(stat.resource);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst extension = ExtensionKey.parse(stat.name);\n\t\t\t\t\t\tif (extension) {\n\t\t\t\t\t\t\tvsixs.push([extension, stat]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst byExtension = groupByExtension(vsixs, ([extension]) => extension);\n\t\t\t\tconst distinct: IFileStatWithMetadata[] = [];\n\t\t\t\tfor (const p of byExtension) {\n\t\t\t\t\tp.sort((a, b) => semver.rcompare(a[0].version, b[0].version));\n\t\t\t\t\ttoDelete.push(...p.slice(1).map(e => e[1].resource)); // Delete outdated extensions\n\t\t\t\t\tdistinct.push(p[0][1]);\n\t\t\t\t}\n\t\t\t\tdistinct.sort((a, b) => a.mtime - b.mtime); // sort by modified time\n\t\t\t\ttoDelete.push(...distinct.slice(0, Math.max(0, distinct.length - this.cache)).map(s => s.resource)); // Retain minimum cacheSize and delete the rest\n\t\t\t\ttoDelete.push(...signatureArchives); // Delete all signature archives\n\n\t\t\t\tawait Promises.settled(toDelete.map(resource => {\n\t\t\t\t\tthis.logService.trace('Deleting from cache', resource.path);\n\t\t\t\t\treturn this.fileService.del(resource);\n\t\t\t\t}));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t}\n\t}\n\n\tprivate getName(extension: IGalleryExtension): string {\n\t\treturn this.cache ? ExtensionKey.create(extension).toString().toLowerCase() : generateUuid();\n\t}\n\n}\n"]}