{"version":3,"sources":["vs/platform/extensionManagement/node/extensionManagementService.ts"],"names":[],"mappings":"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","file":"extensionManagementService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises, Queue } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { Emitter } from 'vs/base/common/event';\nimport { hash } from 'vs/base/common/hash';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ResourceSet } from 'vs/base/common/map';\nimport { Schemas } from 'vs/base/common/network';\nimport * as path from 'vs/base/common/path';\nimport { joinPath } from 'vs/base/common/resources';\nimport * as semver from 'vs/base/common/semver/semver';\nimport { isBoolean, isUndefined } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport * as pfs from 'vs/base/node/pfs';\nimport { extract, ExtractError, IFile, zip } from 'vs/base/node/zip';\nimport * as nls from 'vs/nls';\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { AbstractExtensionManagementService, AbstractExtensionTask, ExtensionVerificationStatus, IInstallExtensionTask, InstallExtensionTaskOptions, IUninstallExtensionTask, joinErrors, toExtensionManagementError, UninstallExtensionTaskOptions } from 'vs/platform/extensionManagement/common/abstractExtensionManagementService';\nimport {\n\tExtensionManagementError, ExtensionManagementErrorCode, IExtensionGalleryService, IExtensionIdentifier, IExtensionManagementService, IGalleryExtension, ILocalExtension, InstallOperation,\n\tMetadata, InstallVSIXOptions\n} from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { areSameExtensions, computeTargetPlatform, ExtensionKey, getGalleryExtensionId, groupByExtension } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IExtensionsProfileScannerService, IScannedProfileExtension } from 'vs/platform/extensionManagement/common/extensionsProfileScannerService';\nimport { IExtensionsScannerService, IScannedExtension, ScanOptions } from 'vs/platform/extensionManagement/common/extensionsScannerService';\nimport { ExtensionsDownloader } from 'vs/platform/extensionManagement/node/extensionDownloader';\nimport { ExtensionsLifecycle } from 'vs/platform/extensionManagement/node/extensionLifecycle';\nimport { getManifest } from 'vs/platform/extensionManagement/node/extensionManagementUtil';\nimport { ExtensionsManifestCache } from 'vs/platform/extensionManagement/node/extensionsManifestCache';\nimport { DidChangeProfileExtensionsEvent, ExtensionsWatcher } from 'vs/platform/extensionManagement/node/extensionsWatcher';\nimport { ExtensionType, IExtension, IExtensionManifest, TargetPlatform } from 'vs/platform/extensions/common/extensions';\nimport { isEngineValid } from 'vs/platform/extensions/common/extensionValidator';\nimport { FileChangesEvent, FileChangeType, FileOperationResult, IFileService, toFileOperationResult } from 'vs/platform/files/common/files';\nimport { IInstantiationService, refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\n\ninterface InstallableExtension {\n\tzipPath: string;\n\tkey: ExtensionKey;\n\tmetadata: Metadata;\n}\n\nexport const INativeServerExtensionManagementService = refineServiceDecorator<IExtensionManagementService, INativeServerExtensionManagementService>(IExtensionManagementService);\nexport interface INativeServerExtensionManagementService extends IExtensionManagementService {\n\treadonly _serviceBrand: undefined;\n\tscanAllUserInstalledExtensions(): Promise<ILocalExtension[]>;\n\tscanInstalledExtensionAtLocation(location: URI): Promise<ILocalExtension | null>;\n\tmarkAsUninstalled(...extensions: IExtension[]): Promise<void>;\n}\n\nconst DELETED_FOLDER_POSTFIX = '.vsctmp';\n\nexport class ExtensionManagementService extends AbstractExtensionManagementService implements INativeServerExtensionManagementService {\n\n\tprivate readonly extensionsScanner: ExtensionsScanner;\n\tprivate readonly manifestCache: ExtensionsManifestCache;\n\tprivate readonly extensionsDownloader: ExtensionsDownloader;\n\n\tprivate readonly installGalleryExtensionsTasks = new Map<string, InstallGalleryExtensionTask>();\n\n\tconstructor(\n\t\t@IExtensionGalleryService galleryService: IExtensionGalleryService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@IExtensionsScannerService private readonly extensionsScannerService: IExtensionsScannerService,\n\t\t@IExtensionsProfileScannerService private readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IDownloadService private downloadService: IDownloadService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService\n\t) {\n\t\tsuper(galleryService, telemetryService, uriIdentityService, logService, productService, userDataProfilesService);\n\t\tconst extensionLifecycle = this._register(instantiationService.createInstance(ExtensionsLifecycle));\n\t\tthis.extensionsScanner = this._register(instantiationService.createInstance(ExtensionsScanner, extension => extensionLifecycle.postUninstall(extension)));\n\t\tthis.manifestCache = this._register(new ExtensionsManifestCache(userDataProfilesService, fileService, uriIdentityService, this, this.logService));\n\t\tthis.extensionsDownloader = this._register(instantiationService.createInstance(ExtensionsDownloader));\n\n\t\tconst extensionsWatcher = this._register(new ExtensionsWatcher(this, this.extensionsScannerService, userDataProfilesService, extensionsProfileScannerService, uriIdentityService, fileService, logService));\n\t\tthis._register(extensionsWatcher.onDidChangeExtensionsByAnotherSource(e => this.onDidChangeExtensionsFromAnotherSource(e)));\n\t\tthis.watchForExtensionsNotInstalledBySystem();\n\t}\n\n\tprivate _targetPlatformPromise: Promise<TargetPlatform> | undefined;\n\tgetTargetPlatform(): Promise<TargetPlatform> {\n\t\tif (!this._targetPlatformPromise) {\n\t\t\tthis._targetPlatformPromise = computeTargetPlatform(this.fileService, this.logService);\n\t\t}\n\t\treturn this._targetPlatformPromise;\n\t}\n\n\tasync zip(extension: ILocalExtension): Promise<URI> {\n\t\tthis.logService.trace('ExtensionManagementService#zip', extension.identifier.id);\n\t\tconst files = await this.collectFiles(extension);\n\t\tconst location = await zip(joinPath(this.extensionsDownloader.extensionsDownloadDir, generateUuid()).fsPath, files);\n\t\treturn URI.file(location);\n\t}\n\n\tasync unzip(zipLocation: URI): Promise<IExtensionIdentifier> {\n\t\tthis.logService.trace('ExtensionManagementService#unzip', zipLocation.toString());\n\t\tconst local = await this.install(zipLocation);\n\t\treturn local.identifier;\n\t}\n\n\tasync getManifest(vsix: URI): Promise<IExtensionManifest> {\n\t\tconst { location, cleanup } = await this.downloadVsix(vsix);\n\t\tconst zipPath = path.resolve(location.fsPath);\n\t\ttry {\n\t\t\treturn await getManifest(zipPath);\n\t\t} finally {\n\t\t\tawait cleanup();\n\t\t}\n\t}\n\n\tgetInstalled(type?: ExtensionType, profileLocation: URI = this.userDataProfilesService.defaultProfile.extensionsResource): Promise<ILocalExtension[]> {\n\t\treturn this.extensionsScanner.scanExtensions(type ?? null, profileLocation);\n\t}\n\n\tscanAllUserInstalledExtensions(): Promise<ILocalExtension[]> {\n\t\treturn this.extensionsScanner.scanAllUserExtensions(false);\n\t}\n\n\tscanInstalledExtensionAtLocation(location: URI): Promise<ILocalExtension | null> {\n\t\treturn this.extensionsScanner.scanUserExtensionAtLocation(location);\n\t}\n\n\tasync install(vsix: URI, options: InstallVSIXOptions = {}): Promise<ILocalExtension> {\n\t\tthis.logService.trace('ExtensionManagementService#install', vsix.toString());\n\n\t\tconst { location, cleanup } = await this.downloadVsix(vsix);\n\n\t\ttry {\n\t\t\tconst manifest = await getManifest(path.resolve(location.fsPath));\n\t\t\tconst extensionId = getGalleryExtensionId(manifest.publisher, manifest.name);\n\t\t\tif (manifest.engines && manifest.engines.vscode && !isEngineValid(manifest.engines.vscode, this.productService.version, this.productService.date)) {\n\t\t\t\tthrow new Error(nls.localize('incompatible', \"Unable to install extension '{0}' as it is not compatible with VS Code '{1}'.\", extensionId, this.productService.version));\n\t\t\t}\n\n\t\t\tconst results = await this.installExtensions([{ manifest, extension: location, options }]);\n\t\t\tconst result = results.find(({ identifier }) => areSameExtensions(identifier, { id: extensionId }));\n\t\t\tif (result?.local) {\n\t\t\t\treturn result.local;\n\t\t\t}\n\t\t\tif (result?.error) {\n\t\t\t\tthrow result.error;\n\t\t\t}\n\t\t\tthrow toExtensionManagementError(new Error(`Unknown error while installing extension ${extensionId}`));\n\t\t} finally {\n\t\t\tawait cleanup();\n\t\t}\n\t}\n\n\tasync installFromLocation(location: URI, profileLocation: URI): Promise<ILocalExtension> {\n\t\tthis.logService.trace('ExtensionManagementService#installFromLocation', location.toString());\n\t\tconst local = await this.extensionsScanner.scanUserExtensionAtLocation(location);\n\t\tif (!local) {\n\t\t\tthrow new Error(`Cannot find a valid extension from the location ${location.toString()}`);\n\t\t}\n\t\tawait this.addExtensionsToProfile([[local, undefined]], profileLocation);\n\t\tthis.logService.info('Successfully installed extension', local.identifier.id, profileLocation.toString());\n\t\treturn local;\n\t}\n\n\tasync installExtensionsFromProfile(extensions: IExtensionIdentifier[], fromProfileLocation: URI, toProfileLocation: URI): Promise<ILocalExtension[]> {\n\t\tthis.logService.trace('ExtensionManagementService#installExtensionsFromProfile', extensions, fromProfileLocation.toString(), toProfileLocation.toString());\n\t\tconst extensionsToInstall = (await this.extensionsScanner.scanExtensions(ExtensionType.User, fromProfileLocation)).filter(e => extensions.some(id => areSameExtensions(id, e.identifier)));\n\t\tif (extensionsToInstall.length) {\n\t\t\tconst metadata = await Promise.all(extensionsToInstall.map(e => this.extensionsScanner.scanMetadata(e, fromProfileLocation)));\n\t\t\tawait this.addExtensionsToProfile(extensionsToInstall.map((e, index) => [e, metadata[index]]), toProfileLocation);\n\t\t\tthis.logService.info('Successfully installed extensions', extensionsToInstall.map(e => e.identifier.id), toProfileLocation.toString());\n\t\t}\n\t\treturn extensionsToInstall;\n\t}\n\n\tasync updateMetadata(local: ILocalExtension, metadata: Partial<Metadata>, profileLocation: URI = this.userDataProfilesService.defaultProfile.extensionsResource): Promise<ILocalExtension> {\n\t\tthis.logService.trace('ExtensionManagementService#updateMetadata', local.identifier.id);\n\t\tif (metadata.isPreReleaseVersion) {\n\t\t\tmetadata.preRelease = true;\n\t\t}\n\t\t// unset if false\n\t\tmetadata.isMachineScoped = metadata.isMachineScoped || undefined;\n\t\tmetadata.isBuiltin = metadata.isBuiltin || undefined;\n\t\tmetadata.pinned = metadata.pinned || undefined;\n\t\tlocal = await this.extensionsScanner.updateMetadata(local, metadata, profileLocation);\n\t\tthis.manifestCache.invalidate(profileLocation);\n\t\tthis._onDidUpdateExtensionMetadata.fire(local);\n\t\treturn local;\n\t}\n\n\tasync reinstallFromGallery(extension: ILocalExtension): Promise<ILocalExtension> {\n\t\tthis.logService.trace('ExtensionManagementService#reinstallFromGallery', extension.identifier.id);\n\t\tif (!this.galleryService.isEnabled()) {\n\t\t\tthrow new Error(nls.localize('MarketPlaceDisabled', \"Marketplace is not enabled\"));\n\t\t}\n\n\t\tconst targetPlatform = await this.getTargetPlatform();\n\t\tconst [galleryExtension] = await this.galleryService.getExtensions([{ ...extension.identifier, preRelease: extension.preRelease }], { targetPlatform, compatible: true }, CancellationToken.None);\n\t\tif (!galleryExtension) {\n\t\t\tthrow new Error(nls.localize('Not a Marketplace extension', \"Only Marketplace Extensions can be reinstalled\"));\n\t\t}\n\n\t\tawait this.extensionsScanner.setUninstalled(extension);\n\t\ttry {\n\t\t\tawait this.extensionsScanner.removeUninstalledExtension(extension);\n\t\t} catch (e) {\n\t\t\tthrow new Error(nls.localize('removeError', \"Error while removing the extension: {0}. Please Quit and Start VS Code before trying again.\", toErrorMessage(e)));\n\t\t}\n\t\treturn this.installFromGallery(galleryExtension);\n\t}\n\n\tprotected copyExtension(extension: ILocalExtension, fromProfileLocation: URI, toProfileLocation: URI, metadata: Partial<Metadata>): Promise<ILocalExtension> {\n\t\treturn this.extensionsScanner.copyExtension(extension, fromProfileLocation, toProfileLocation, metadata);\n\t}\n\n\tcopyExtensions(fromProfileLocation: URI, toProfileLocation: URI): Promise<void> {\n\t\treturn this.extensionsScanner.copyExtensions(fromProfileLocation, toProfileLocation);\n\t}\n\n\tmarkAsUninstalled(...extensions: IExtension[]): Promise<void> {\n\t\treturn this.extensionsScanner.setUninstalled(...extensions);\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tthis.logService.trace('ExtensionManagementService#cleanUp');\n\t\ttry {\n\t\t\tawait this.extensionsScanner.cleanUp();\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tasync download(extension: IGalleryExtension, operation: InstallOperation, donotVerifySignature: boolean): Promise<URI> {\n\t\tconst { location } = await this.extensionsDownloader.download(extension, operation, !donotVerifySignature);\n\t\treturn location;\n\t}\n\n\tprivate async downloadVsix(vsix: URI): Promise<{ location: URI; cleanup: () => Promise<void> }> {\n\t\tif (vsix.scheme === Schemas.file) {\n\t\t\treturn { location: vsix, async cleanup() { } };\n\t\t}\n\t\tthis.logService.trace('Downloading extension from', vsix.toString());\n\t\tconst location = joinPath(this.extensionsDownloader.extensionsDownloadDir, generateUuid());\n\t\tawait this.downloadService.download(vsix, location);\n\t\tthis.logService.info('Downloaded extension to', location.toString());\n\t\tconst cleanup = async () => {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(location);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t};\n\t\treturn { location, cleanup };\n\t}\n\n\tprotected getCurrentExtensionsManifestLocation(): URI {\n\t\treturn this.userDataProfilesService.defaultProfile.extensionsResource;\n\t}\n\n\tprotected createInstallExtensionTask(manifest: IExtensionManifest, extension: URI | IGalleryExtension, options: InstallExtensionTaskOptions): IInstallExtensionTask {\n\t\tif (URI.isUri(extension)) {\n\t\t\treturn new InstallVSIXTask(manifest, extension, options, this.galleryService, this.extensionsScanner, this.uriIdentityService, this.userDataProfilesService, this.extensionsScannerService, this.extensionsProfileScannerService, this.logService);\n\t\t}\n\n\t\tconst key = ExtensionKey.create(extension).toString();\n\t\tlet installExtensionTask = this.installGalleryExtensionsTasks.get(key);\n\t\tif (!installExtensionTask) {\n\t\t\tthis.installGalleryExtensionsTasks.set(key, installExtensionTask = new InstallGalleryExtensionTask(manifest, extension, options, this.extensionsDownloader, this.extensionsScanner, this.uriIdentityService, this.userDataProfilesService, this.extensionsScannerService, this.extensionsProfileScannerService, this.logService));\n\t\t\tinstallExtensionTask.waitUntilTaskIsFinished().finally(() => this.installGalleryExtensionsTasks.delete(key));\n\t\t}\n\t\treturn installExtensionTask;\n\t}\n\n\tprotected createUninstallExtensionTask(extension: ILocalExtension, options: UninstallExtensionTaskOptions): IUninstallExtensionTask {\n\t\treturn new UninstallExtensionTask(extension, options.profileLocation, this.extensionsProfileScannerService);\n\t}\n\n\tprivate async collectFiles(extension: ILocalExtension): Promise<IFile[]> {\n\n\t\tconst collectFilesFromDirectory = async (dir: string): Promise<string[]> => {\n\t\t\tlet entries = await pfs.Promises.readdir(dir);\n\t\t\tentries = entries.map(e => path.join(dir, e));\n\t\t\tconst stats = await Promise.all(entries.map(e => pfs.Promises.stat(e)));\n\t\t\tlet promise: Promise<string[]> = Promise.resolve([]);\n\t\t\tstats.forEach((stat, index) => {\n\t\t\t\tconst entry = entries[index];\n\t\t\t\tif (stat.isFile()) {\n\t\t\t\t\tpromise = promise.then(result => ([...result, entry]));\n\t\t\t\t}\n\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\tpromise = promise\n\t\t\t\t\t\t.then(result => collectFilesFromDirectory(entry)\n\t\t\t\t\t\t\t.then(files => ([...result, ...files])));\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn promise;\n\t\t};\n\n\t\tconst files = await collectFilesFromDirectory(extension.location.fsPath);\n\t\treturn files.map(f => (<IFile>{ path: `extension/${path.relative(extension.location.fsPath, f)}`, localPath: f }));\n\t}\n\n\tprivate async onDidChangeExtensionsFromAnotherSource({ added, removed }: DidChangeProfileExtensionsEvent): Promise<void> {\n\t\tif (removed) {\n\t\t\tfor (const identifier of removed.extensions) {\n\t\t\t\tthis.logService.info('Extensions removed from another source', identifier.id, removed.profileLocation.toString());\n\t\t\t\tthis._onDidUninstallExtension.fire({ identifier, profileLocation: removed.profileLocation });\n\t\t\t}\n\t\t}\n\t\tif (added) {\n\t\t\tconst extensions = await this.extensionsScanner.scanExtensions(ExtensionType.User, added.profileLocation);\n\t\t\tconst addedExtensions = extensions.filter(e => added.extensions.some(identifier => areSameExtensions(identifier, e.identifier)));\n\t\t\tthis._onDidInstallExtensions.fire(addedExtensions.map(local => {\n\t\t\t\tthis.logService.info('Extensions added from another source', local.identifier.id, added.profileLocation.toString());\n\t\t\t\treturn { identifier: local.identifier, local, profileLocation: added.profileLocation, operation: InstallOperation.None };\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate readonly knownDirectories = new ResourceSet();\n\tprivate async watchForExtensionsNotInstalledBySystem(): Promise<void> {\n\t\tthis._register(this.extensionsScanner.onExtract(resource => this.knownDirectories.add(resource)));\n\t\tconst stat = await this.fileService.resolve(this.extensionsScannerService.userExtensionsLocation);\n\t\tfor (const childStat of stat.children ?? []) {\n\t\t\tif (childStat.isDirectory) {\n\t\t\t\tthis.knownDirectories.add(childStat.resource);\n\t\t\t}\n\t\t}\n\t\tthis._register(this.fileService.watch(this.extensionsScannerService.userExtensionsLocation));\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\t}\n\n\tprivate async onDidFilesChange(e: FileChangesEvent): Promise<void> {\n\t\tif (!e.affects(this.extensionsScannerService.userExtensionsLocation, FileChangeType.ADDED)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst added: ILocalExtension[] = [];\n\t\tfor (const resource of e.rawAdded) {\n\t\t\t// Check if this is a known directory\n\t\t\tif (this.knownDirectories.has(resource)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Is not immediate child of extensions resource\n\t\t\tif (!this.uriIdentityService.extUri.isEqual(this.uriIdentityService.extUri.dirname(resource), this.extensionsScannerService.userExtensionsLocation)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// .obsolete file changed\n\t\t\tif (this.uriIdentityService.extUri.isEqual(resource, this.uriIdentityService.extUri.joinPath(this.extensionsScannerService.userExtensionsLocation, '.obsolete'))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Ignore changes to files starting with `.`\n\t\t\tif (this.uriIdentityService.extUri.basename(resource).startsWith('.')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if this is a directory\n\t\t\tif (!(await this.fileService.stat(resource)).isDirectory) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if this is an extension added by another source\n\t\t\t// Extension added by another source will not have installed timestamp\n\t\t\tconst extension = await this.extensionsScanner.scanUserExtensionAtLocation(resource);\n\t\t\tif (extension && extension.installedTimestamp === undefined) {\n\t\t\t\tthis.knownDirectories.add(resource);\n\t\t\t\tadded.push(extension);\n\t\t\t}\n\t\t}\n\n\t\tif (added.length) {\n\t\t\tawait this.addExtensionsToProfile(added.map(e => [e, undefined]), this.userDataProfilesService.defaultProfile.extensionsResource);\n\t\t\tthis.logService.info('Added extensions to default profile from external source', added.map(e => e.identifier.id));\n\t\t}\n\t}\n\n\tprivate async addExtensionsToProfile(extensions: [ILocalExtension, Metadata | undefined][], profileLocation: URI): Promise<void> {\n\t\tconst localExtensions = extensions.map(e => e[0]);\n\t\tawait this.setInstalled(localExtensions);\n\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile(extensions, profileLocation);\n\t\tthis._onDidInstallExtensions.fire(localExtensions.map(local => ({ local, identifier: local.identifier, operation: InstallOperation.None, profileLocation })));\n\t}\n\n\tprivate async setInstalled(extensions: ILocalExtension[]): Promise<void> {\n\t\tconst uninstalled = await this.extensionsScanner.getUninstalledExtensions();\n\t\tfor (const extension of extensions) {\n\t\t\tconst extensionKey = ExtensionKey.create(extension);\n\t\t\tif (!uninstalled[extensionKey.toString()]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.logService.trace('Removing the extension from uninstalled list:', extensionKey.id);\n\t\t\tawait this.extensionsScanner.setInstalled(extensionKey);\n\t\t\tthis.logService.info('Removed the extension from uninstalled list:', extensionKey.id);\n\t\t}\n\t}\n}\n\nexport class ExtensionsScanner extends Disposable {\n\n\tprivate readonly uninstalledResource: URI;\n\tprivate readonly uninstalledFileLimiter: Queue<any>;\n\n\tprivate readonly _onExtract = this._register(new Emitter<URI>());\n\treadonly onExtract = this._onExtract.event;\n\n\tconstructor(\n\t\tprivate readonly beforeRemovingExtension: (e: ILocalExtension) => Promise<void>,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExtensionsScannerService private readonly extensionsScannerService: IExtensionsScannerService,\n\t\t@IExtensionsProfileScannerService private readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.uninstalledResource = joinPath(this.extensionsScannerService.userExtensionsLocation, '.obsolete');\n\t\tthis.uninstalledFileLimiter = new Queue();\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tawait this.removeTemporarilyDeletedFolders();\n\t\tawait this.removeUninstalledExtensions();\n\t}\n\n\tasync scanExtensions(type: ExtensionType | null, profileLocation: URI): Promise<ILocalExtension[]> {\n\t\tconst userScanOptions: ScanOptions = { includeInvalid: true, profileLocation };\n\t\tlet scannedExtensions: IScannedExtension[] = [];\n\t\tif (type === null || type === ExtensionType.System) {\n\t\t\tscannedExtensions.push(...await this.extensionsScannerService.scanAllExtensions({ includeInvalid: true }, userScanOptions, false));\n\t\t} else if (type === ExtensionType.User) {\n\t\t\tscannedExtensions.push(...await this.extensionsScannerService.scanUserExtensions(userScanOptions));\n\t\t}\n\t\tscannedExtensions = type !== null ? scannedExtensions.filter(r => r.type === type) : scannedExtensions;\n\t\treturn Promise.all(scannedExtensions.map(extension => this.toLocalExtension(extension)));\n\t}\n\n\tasync scanAllUserExtensions(excludeOutdated: boolean): Promise<ILocalExtension[]> {\n\t\tconst scannedExtensions = await this.extensionsScannerService.scanUserExtensions({ includeAllVersions: !excludeOutdated, includeInvalid: true });\n\t\treturn Promise.all(scannedExtensions.map(extension => this.toLocalExtension(extension)));\n\t}\n\n\tasync scanUserExtensionAtLocation(location: URI): Promise<ILocalExtension | null> {\n\t\ttry {\n\t\t\tconst scannedExtension = await this.extensionsScannerService.scanExistingExtension(location, ExtensionType.User, { includeInvalid: true });\n\t\t\tif (scannedExtension) {\n\t\t\t\treturn await this.toLocalExtension(scannedExtension);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync extractUserExtension(extensionKey: ExtensionKey, zipPath: string, metadata: Metadata, removeIfExists: boolean, token: CancellationToken): Promise<ILocalExtension> {\n\t\tconst folderName = extensionKey.toString();\n\t\tconst tempLocation = URI.file(path.join(this.extensionsScannerService.userExtensionsLocation.fsPath, `.${generateUuid()}`));\n\t\tconst extensionLocation = URI.file(path.join(this.extensionsScannerService.userExtensionsLocation.fsPath, folderName));\n\n\t\tlet exists = await this.fileService.exists(extensionLocation);\n\n\t\tif (exists && removeIfExists) {\n\t\t\ttry {\n\t\t\t\tawait this.deleteExtensionFromLocation(extensionKey.id, extensionLocation, 'removeExisting');\n\t\t\t} catch (error) {\n\t\t\t\tthrow new ExtensionManagementError(nls.localize('errorDeleting', \"Unable to delete the existing folder '{0}' while installing the extension '{1}'. Please delete the folder manually and try again\", extensionLocation.fsPath, extensionKey.id), ExtensionManagementErrorCode.Delete);\n\t\t\t}\n\t\t\texists = false;\n\t\t}\n\n\t\tif (!exists) {\n\t\t\ttry {\n\t\t\t\t// Extract\n\t\t\t\ttry {\n\t\t\t\t\tthis.logService.trace(`Started extracting the extension from ${zipPath} to ${extensionLocation.fsPath}`);\n\t\t\t\t\tawait extract(zipPath, tempLocation.fsPath, { sourcePath: 'extension', overwrite: true }, token);\n\t\t\t\t\tthis.logService.info(`Extracted extension to ${extensionLocation}:`, extensionKey.id);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlet errorCode = ExtensionManagementErrorCode.Extract;\n\t\t\t\t\tif (e instanceof ExtractError) {\n\t\t\t\t\t\tif (e.type === 'CorruptZip') {\n\t\t\t\t\t\t\terrorCode = ExtensionManagementErrorCode.CorruptZip;\n\t\t\t\t\t\t} else if (e.type === 'Incomplete') {\n\t\t\t\t\t\t\terrorCode = ExtensionManagementErrorCode.IncompleteZip;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthrow new ExtensionManagementError(e.message, errorCode);\n\t\t\t\t}\n\n\t\t\t\tawait this.extensionsScannerService.updateMetadata(tempLocation, metadata);\n\n\t\t\t\t// Rename\n\t\t\t\ttry {\n\t\t\t\t\tthis.logService.trace(`Started renaming the extension from ${tempLocation.fsPath} to ${extensionLocation.fsPath}`);\n\t\t\t\t\tawait this.rename(tempLocation.fsPath, extensionLocation.fsPath);\n\t\t\t\t\tthis.logService.info('Renamed to', extensionLocation.fsPath);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error.code === 'ENOTEMPTY') {\n\t\t\t\t\t\tthis.logService.info(`Rename failed because extension was installed by another source. So ignoring renaming.`, extensionKey.id);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logService.info(`Rename failed because of ${getErrorMessage(error)}. Deleted from extracted location`, tempLocation);\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._onExtract.fire(extensionLocation);\n\n\t\t\t} catch (error) {\n\t\t\t\ttry { await this.fileService.del(tempLocation, { recursive: true }); } catch (e) { /* ignore */ }\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn this.scanLocalExtension(extensionLocation, ExtensionType.User);\n\t}\n\n\tasync scanMetadata(local: ILocalExtension, profileLocation?: URI): Promise<Metadata | undefined> {\n\t\tif (profileLocation) {\n\t\t\tconst extension = await this.getScannedExtension(local, profileLocation);\n\t\t\treturn extension?.metadata;\n\t\t} else {\n\t\t\treturn this.extensionsScannerService.scanMetadata(local.location);\n\t\t}\n\t}\n\n\tprivate async getScannedExtension(local: ILocalExtension, profileLocation: URI): Promise<IScannedProfileExtension | undefined> {\n\t\tconst extensions = await this.extensionsProfileScannerService.scanProfileExtensions(profileLocation);\n\t\treturn extensions.find(e => areSameExtensions(e.identifier, local.identifier));\n\t}\n\n\tasync updateMetadata(local: ILocalExtension, metadata: Partial<Metadata>, profileLocation?: URI): Promise<ILocalExtension> {\n\t\tif (profileLocation) {\n\t\t\tawait this.extensionsProfileScannerService.updateMetadata([[local, metadata]], profileLocation);\n\t\t} else {\n\t\t\tawait this.extensionsScannerService.updateMetadata(local.location, metadata);\n\t\t}\n\t\treturn this.scanLocalExtension(local.location, local.type, profileLocation);\n\t}\n\n\tgetUninstalledExtensions(): Promise<IStringDictionary<boolean>> {\n\t\treturn this.withUninstalledExtensions();\n\t}\n\n\tasync setUninstalled(...extensions: IExtension[]): Promise<void> {\n\t\tconst extensionKeys: ExtensionKey[] = extensions.map(e => ExtensionKey.create(e));\n\t\tawait this.withUninstalledExtensions(uninstalled =>\n\t\t\textensionKeys.forEach(extensionKey => {\n\t\t\t\tuninstalled[extensionKey.toString()] = true;\n\t\t\t\tthis.logService.info('Marked extension as uninstalled', extensionKey.toString());\n\t\t\t}));\n\t}\n\n\tasync setInstalled(extensionKey: ExtensionKey): Promise<void> {\n\t\tawait this.withUninstalledExtensions(uninstalled => delete uninstalled[extensionKey.toString()]);\n\t}\n\n\tasync removeExtension(extension: ILocalExtension | IScannedExtension, type: string): Promise<void> {\n\t\tif (this.uriIdentityService.extUri.isEqualOrParent(extension.location, this.extensionsScannerService.userExtensionsLocation)) {\n\t\t\treturn this.deleteExtensionFromLocation(extension.identifier.id, extension.location, type);\n\t\t}\n\t}\n\n\tasync removeUninstalledExtension(extension: ILocalExtension | IScannedExtension): Promise<void> {\n\t\tawait this.removeExtension(extension, 'uninstalled');\n\t\tawait this.withUninstalledExtensions(uninstalled => delete uninstalled[ExtensionKey.create(extension).toString()]);\n\t}\n\n\tasync copyExtension(extension: ILocalExtension, fromProfileLocation: URI, toProfileLocation: URI, metadata: Partial<Metadata>): Promise<ILocalExtension> {\n\t\tconst source = await this.getScannedExtension(extension, fromProfileLocation);\n\t\tconst target = await this.getScannedExtension(extension, toProfileLocation);\n\t\tmetadata = { ...source?.metadata, ...metadata };\n\n\t\tif (target) {\n\t\t\tawait this.extensionsProfileScannerService.updateMetadata([[extension, { ...target.metadata, ...metadata }]], toProfileLocation);\n\t\t} else {\n\t\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile([[extension, metadata]], toProfileLocation);\n\t\t}\n\n\t\treturn this.scanLocalExtension(extension.location, extension.type, toProfileLocation);\n\t}\n\n\tasync copyExtensions(fromProfileLocation: URI, toProfileLocation: URI): Promise<void> {\n\t\tconst fromExtensions = await this.scanExtensions(ExtensionType.User, fromProfileLocation);\n\t\tconst extensions: [ILocalExtension, Metadata | undefined][] = await Promise.all(fromExtensions\n\t\t\t.filter(e => !e.isApplicationScoped) /* remove application scoped extensions */\n\t\t\t.map(async e => ([e, await this.scanMetadata(e, fromProfileLocation)])));\n\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile(extensions, toProfileLocation);\n\t}\n\n\tprivate async deleteExtensionFromLocation(id: string, location: URI, type: string): Promise<void> {\n\t\tthis.logService.trace(`Deleting ${type} extension from disk`, id, location.fsPath);\n\t\tconst renamedLocation = this.uriIdentityService.extUri.joinPath(this.uriIdentityService.extUri.dirname(location), `${this.uriIdentityService.extUri.basename(location)}.${hash(generateUuid()).toString(16)}${DELETED_FOLDER_POSTFIX}`);\n\t\tawait this.rename(location.fsPath, renamedLocation.fsPath);\n\t\tawait this.fileService.del(renamedLocation, { recursive: true });\n\t\tthis.logService.info(`Deleted ${type} extension from disk`, id, location.fsPath);\n\t}\n\n\tprivate async withUninstalledExtensions(updateFn?: (uninstalled: IStringDictionary<boolean>) => void): Promise<IStringDictionary<boolean>> {\n\t\treturn this.uninstalledFileLimiter.queue(async () => {\n\t\t\tlet raw: string | undefined;\n\t\t\ttry {\n\t\t\t\tconst content = await this.fileService.readFile(this.uninstalledResource, 'utf8');\n\t\t\t\traw = content.value.toString();\n\t\t\t} catch (error) {\n\t\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet uninstalled = {};\n\t\t\tif (raw) {\n\t\t\t\ttry {\n\t\t\t\t\tuninstalled = JSON.parse(raw);\n\t\t\t\t} catch (e) { /* ignore */ }\n\t\t\t}\n\n\t\t\tif (updateFn) {\n\t\t\t\tupdateFn(uninstalled);\n\t\t\t\tif (Object.keys(uninstalled).length) {\n\t\t\t\t\tawait this.fileService.writeFile(this.uninstalledResource, VSBuffer.fromString(JSON.stringify(uninstalled)));\n\t\t\t\t} else {\n\t\t\t\t\tawait this.fileService.del(this.uninstalledResource);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uninstalled;\n\t\t});\n\t}\n\n\tprivate async rename(extractPath: string, renamePath: string): Promise<void> {\n\t\ttry {\n\t\t\tawait pfs.Promises.rename(extractPath, renamePath, 2 * 60 * 1000 /* Retry for 2 minutes */);\n\t\t} catch (error) {\n\t\t\tthrow new ExtensionManagementError(error.message || nls.localize('renameError', \"Unknown error while renaming {0} to {1}\", extractPath, renamePath), error.code || ExtensionManagementErrorCode.Rename);\n\t\t}\n\t}\n\n\tprivate async scanLocalExtension(location: URI, type: ExtensionType, profileLocation?: URI): Promise<ILocalExtension> {\n\t\tif (profileLocation) {\n\t\t\tconst scannedExtensions = await this.extensionsScannerService.scanUserExtensions({ profileLocation });\n\t\t\tconst scannedExtension = scannedExtensions.find(e => this.uriIdentityService.extUri.isEqual(e.location, location));\n\t\t\tif (scannedExtension) {\n\t\t\t\treturn this.toLocalExtension(scannedExtension);\n\t\t\t}\n\t\t} else {\n\t\t\tconst scannedExtension = await this.extensionsScannerService.scanExistingExtension(location, type, { includeInvalid: true });\n\t\t\tif (scannedExtension) {\n\t\t\t\treturn this.toLocalExtension(scannedExtension);\n\t\t\t}\n\t\t}\n\t\tthrow new Error(nls.localize('cannot read', \"Cannot read the extension from {0}\", location.path));\n\t}\n\n\tprivate async toLocalExtension(extension: IScannedExtension): Promise<ILocalExtension> {\n\t\tconst stat = await this.fileService.resolve(extension.location);\n\t\tlet readmeUrl: URI | undefined;\n\t\tlet changelogUrl: URI | undefined;\n\t\tif (stat.children) {\n\t\t\treadmeUrl = stat.children.find(({ name }) => /^readme(\\.txt|\\.md|)$/i.test(name))?.resource;\n\t\t\tchangelogUrl = stat.children.find(({ name }) => /^changelog(\\.txt|\\.md|)$/i.test(name))?.resource;\n\t\t}\n\t\treturn {\n\t\t\tidentifier: extension.identifier,\n\t\t\ttype: extension.type,\n\t\t\tisBuiltin: extension.isBuiltin || !!extension.metadata?.isBuiltin,\n\t\t\tlocation: extension.location,\n\t\t\tmanifest: extension.manifest,\n\t\t\ttargetPlatform: extension.targetPlatform,\n\t\t\tvalidations: extension.validations,\n\t\t\tisValid: extension.isValid,\n\t\t\treadmeUrl,\n\t\t\tchangelogUrl,\n\t\t\tpublisherDisplayName: extension.metadata?.publisherDisplayName || null,\n\t\t\tpublisherId: extension.metadata?.publisherId || null,\n\t\t\tisApplicationScoped: !!extension.metadata?.isApplicationScoped,\n\t\t\tisMachineScoped: !!extension.metadata?.isMachineScoped,\n\t\t\tisPreReleaseVersion: !!extension.metadata?.isPreReleaseVersion,\n\t\t\tpreRelease: !!extension.metadata?.preRelease,\n\t\t\tinstalledTimestamp: extension.metadata?.installedTimestamp,\n\t\t\tupdated: !!extension.metadata?.updated,\n\t\t\tpinned: !!extension.metadata?.pinned,\n\t\t};\n\t}\n\n\tprivate async removeUninstalledExtensions(): Promise<void> {\n\t\tconst uninstalled = await this.getUninstalledExtensions();\n\t\tif (Object.keys(uninstalled).length === 0) {\n\t\t\tthis.logService.debug(`No uninstalled extensions found.`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.debug(`Removing uninstalled extensions:`, Object.keys(uninstalled));\n\n\t\tconst extensions = await this.extensionsScannerService.scanUserExtensions({ includeAllVersions: true, includeUninstalled: true, includeInvalid: true }); // All user extensions\n\t\tconst installed: Set<string> = new Set<string>();\n\t\tfor (const e of extensions) {\n\t\t\tif (!uninstalled[ExtensionKey.create(e).toString()]) {\n\t\t\t\tinstalled.add(e.identifier.id.toLowerCase());\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\t// running post uninstall tasks for extensions that are not installed anymore\n\t\t\tconst byExtension = groupByExtension(extensions, e => e.identifier);\n\t\t\tawait Promises.settled(byExtension.map(async e => {\n\t\t\t\tconst latest = e.sort((a, b) => semver.rcompare(a.manifest.version, b.manifest.version))[0];\n\t\t\t\tif (!installed.has(latest.identifier.id.toLowerCase())) {\n\t\t\t\t\tawait this.beforeRemovingExtension(await this.toLocalExtension(latest));\n\t\t\t\t}\n\t\t\t}));\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\tconst toRemove = extensions.filter(e => e.metadata /* Installed by System */ && uninstalled[ExtensionKey.create(e).toString()]);\n\t\tawait Promise.allSettled(toRemove.map(e => this.removeUninstalledExtension(e)));\n\t}\n\n\tprivate async removeTemporarilyDeletedFolders(): Promise<void> {\n\t\tthis.logService.trace('ExtensionManagementService#removeTempDeleteFolders');\n\n\t\tlet stat;\n\t\ttry {\n\t\t\tstat = await this.fileService.resolve(this.extensionsScannerService.userExtensionsLocation);\n\t\t} catch (error) {\n\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!stat?.children) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait Promise.allSettled(stat.children.map(async child => {\n\t\t\t\tif (!child.isDirectory || !child.name.endsWith(DELETED_FOLDER_POSTFIX)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.logService.trace('Deleting the temporarily deleted folder', child.resource.toString());\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(child.resource, { recursive: true });\n\t\t\t\t\tthis.logService.trace('Deleted the temporarily deleted folder', child.resource.toString());\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t} catch (error) { /* ignore */ }\n\t}\n\n}\n\nabstract class InstallExtensionTask extends AbstractExtensionTask<ILocalExtension> implements IInstallExtensionTask {\n\n\tprivate _profileLocation = this.options.profileLocation;\n\tget profileLocation() { return this._profileLocation; }\n\n\tprotected _verificationStatus: ExtensionVerificationStatus = false;\n\tget verificationStatus() { return this._verificationStatus; }\n\n\tprotected _operation = InstallOperation.Install;\n\tget operation() { return isUndefined(this.options.operation) ? this._operation : this.options.operation; }\n\n\tconstructor(\n\t\treadonly identifier: IExtensionIdentifier,\n\t\treadonly source: URI | IGalleryExtension,\n\t\treadonly options: InstallExtensionTaskOptions,\n\t\tprotected readonly extensionsScanner: ExtensionsScanner,\n\t\tprotected readonly uriIdentityService: IUriIdentityService,\n\t\tprotected readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprotected readonly extensionsScannerService: IExtensionsScannerService,\n\t\tprotected readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\tprotected readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected override async doRun(token: CancellationToken): Promise<ILocalExtension> {\n\t\tconst [local, metadata] = await this.install(token);\n\t\tthis._profileLocation = local.isBuiltin || local.isApplicationScoped ? this.userDataProfilesService.defaultProfile.extensionsResource : this.options.profileLocation;\n\t\tif (this.uriIdentityService.extUri.isEqual(this.userDataProfilesService.defaultProfile.extensionsResource, this._profileLocation)) {\n\t\t\tawait this.extensionsScannerService.initializeDefaultProfileExtensions();\n\t\t}\n\t\tawait this.extensionsProfileScannerService.addExtensionsToProfile([[local, metadata]], this._profileLocation);\n\t\treturn local;\n\t}\n\n\tprotected async extractExtension({ zipPath, key, metadata }: InstallableExtension, removeIfExists: boolean, token: CancellationToken): Promise<ILocalExtension> {\n\t\tlet local = await this.unsetIfUninstalled(key);\n\t\tif (!local) {\n\t\t\tthis.logService.trace('Extracting extension...', key.id);\n\t\t\tlocal = await this.extensionsScanner.extractUserExtension(key, zipPath, metadata, removeIfExists, token);\n\t\t\tthis.logService.info('Extracting extension completed.', key.id);\n\t\t}\n\t\treturn local;\n\t}\n\n\tprotected async unsetIfUninstalled(extensionKey: ExtensionKey): Promise<ILocalExtension | undefined> {\n\t\tconst isUninstalled = await this.isUninstalled(extensionKey);\n\t\tif (!isUninstalled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.logService.trace('Removing the extension from uninstalled list:', extensionKey.id);\n\t\t// If the same version of extension is marked as uninstalled, remove it from there and return the local.\n\t\tawait this.extensionsScanner.setInstalled(extensionKey);\n\t\tthis.logService.info('Removed the extension from uninstalled list:', extensionKey.id);\n\n\t\tconst userExtensions = await this.extensionsScanner.scanAllUserExtensions(true);\n\t\treturn userExtensions.find(i => ExtensionKey.create(i).equals(extensionKey));\n\t}\n\n\tprivate async isUninstalled(extensionId: ExtensionKey): Promise<boolean> {\n\t\tconst uninstalled = await this.extensionsScanner.getUninstalledExtensions();\n\t\treturn !!uninstalled[extensionId.toString()];\n\t}\n\n\tprotected abstract install(token: CancellationToken): Promise<[ILocalExtension, Metadata]>;\n\n}\n\nexport class InstallGalleryExtensionTask extends InstallExtensionTask {\n\n\tconstructor(\n\t\tmanifest: IExtensionManifest,\n\t\tprivate readonly gallery: IGalleryExtension,\n\t\toptions: InstallExtensionTaskOptions,\n\t\tprivate readonly extensionsDownloader: ExtensionsDownloader,\n\t\textensionsScanner: ExtensionsScanner,\n\t\turiIdentityService: IUriIdentityService,\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\textensionsScannerService: IExtensionsScannerService,\n\t\textensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper(gallery.identifier, gallery, options, extensionsScanner, uriIdentityService, userDataProfilesService, extensionsScannerService, extensionsProfileScannerService, logService);\n\t}\n\n\tprotected async install(token: CancellationToken): Promise<[ILocalExtension, Metadata]> {\n\t\tconst installed = await this.extensionsScanner.scanExtensions(null, this.options.profileLocation);\n\t\tconst existingExtension = installed.find(i => areSameExtensions(i.identifier, this.gallery.identifier));\n\n\t\tif (existingExtension) {\n\t\t\tthis._operation = InstallOperation.Update;\n\t\t}\n\n\t\tconst metadata: Metadata = {\n\t\t\tid: this.gallery.identifier.uuid,\n\t\t\tpublisherId: this.gallery.publisherId,\n\t\t\tpublisherDisplayName: this.gallery.publisherDisplayName,\n\t\t\ttargetPlatform: this.gallery.properties.targetPlatform,\n\t\t\tisApplicationScoped: this.options.isApplicationScoped || existingExtension?.isApplicationScoped,\n\t\t\tisMachineScoped: this.options.isMachineScoped || existingExtension?.isMachineScoped,\n\t\t\tisBuiltin: this.options.isBuiltin || existingExtension?.isBuiltin,\n\t\t\tisSystem: existingExtension?.type === ExtensionType.System ? true : undefined,\n\t\t\tupdated: !!existingExtension,\n\t\t\tisPreReleaseVersion: this.gallery.properties.isPreReleaseVersion,\n\t\t\tinstalledTimestamp: Date.now(),\n\t\t\tpinned: this.options.installGivenVersion ? true : undefined,\n\t\t\tpreRelease: this.gallery.properties.isPreReleaseVersion ||\n\t\t\t\t(isBoolean(this.options.installPreReleaseVersion)\n\t\t\t\t\t? this.options.installPreReleaseVersion /* Respect the passed flag */\n\t\t\t\t\t: existingExtension?.preRelease /* Respect the existing pre-release flag if it was set */)\n\t\t};\n\n\t\tif (existingExtension?.manifest.version === this.gallery.version) {\n\t\t\tconst local = await this.extensionsScanner.updateMetadata(existingExtension, metadata);\n\t\t\treturn [local, metadata];\n\t\t}\n\n\t\tconst { location, verificationStatus } = await this.extensionsDownloader.download(this.gallery, this._operation, !this.options.donotVerifySignature);\n\t\ttry {\n\t\t\tthis._verificationStatus = verificationStatus;\n\t\t\tthis.validateManifest(location.fsPath);\n\t\t\tconst local = await this.extractExtension({ zipPath: location.fsPath, key: ExtensionKey.create(this.gallery), metadata }, false, token);\n\t\t\treturn [local, metadata];\n\t\t} catch (error) {\n\t\t\ttry {\n\t\t\t\tawait this.extensionsDownloader.delete(location);\n\t\t\t} catch (error) {\n\t\t\t\t/* Ignore */\n\t\t\t\tthis.logService.warn(`Error while deleting the downloaded file`, location.toString(), getErrorMessage(error));\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprotected async validateManifest(zipPath: string): Promise<void> {\n\t\ttry {\n\t\t\tawait getManifest(zipPath);\n\t\t} catch (error) {\n\t\t\tthrow new ExtensionManagementError(joinErrors(error).message, ExtensionManagementErrorCode.Invalid);\n\t\t}\n\t}\n\n}\n\nclass InstallVSIXTask extends InstallExtensionTask {\n\n\tconstructor(\n\t\tprivate readonly manifest: IExtensionManifest,\n\t\tprivate readonly location: URI,\n\t\toptions: InstallExtensionTaskOptions,\n\t\tprivate readonly galleryService: IExtensionGalleryService,\n\t\textensionsScanner: ExtensionsScanner,\n\t\turiIdentityService: IUriIdentityService,\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\textensionsScannerService: IExtensionsScannerService,\n\t\textensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper({ id: getGalleryExtensionId(manifest.publisher, manifest.name) }, location, options, extensionsScanner, uriIdentityService, userDataProfilesService, extensionsScannerService, extensionsProfileScannerService, logService);\n\t}\n\n\tprotected override async doRun(token: CancellationToken): Promise<ILocalExtension> {\n\t\tconst local = await super.doRun(token);\n\t\tthis.updateMetadata(local, token);\n\t\treturn local;\n\t}\n\n\tprotected async install(token: CancellationToken): Promise<[ILocalExtension, Metadata]> {\n\t\tconst extensionKey = new ExtensionKey(this.identifier, this.manifest.version);\n\t\tconst installedExtensions = await this.extensionsScanner.scanExtensions(ExtensionType.User, this.options.profileLocation);\n\t\tconst existing = installedExtensions.find(i => areSameExtensions(this.identifier, i.identifier));\n\t\tconst metadata: Metadata = {\n\t\t\tisApplicationScoped: this.options.isApplicationScoped || existing?.isApplicationScoped,\n\t\t\tisMachineScoped: this.options.isMachineScoped || existing?.isMachineScoped,\n\t\t\tisBuiltin: this.options.isBuiltin || existing?.isBuiltin,\n\t\t\tinstalledTimestamp: Date.now(),\n\t\t\tpinned: this.options.installGivenVersion ? true : undefined,\n\t\t};\n\n\t\tif (existing) {\n\t\t\tthis._operation = InstallOperation.Update;\n\t\t\tif (extensionKey.equals(new ExtensionKey(existing.identifier, existing.manifest.version))) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.extensionsScanner.removeExtension(existing, 'existing');\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(nls.localize('restartCode', \"Please restart VS Code before reinstalling {0}.\", this.manifest.displayName || this.manifest.name));\n\t\t\t\t}\n\t\t\t} else if (!this.options.profileLocation && semver.gt(existing.manifest.version, this.manifest.version)) {\n\t\t\t\tawait this.extensionsScanner.setUninstalled(existing);\n\t\t\t}\n\t\t} else {\n\t\t\t// Remove the extension with same version if it is already uninstalled.\n\t\t\t// Installing a VSIX extension shall replace the existing extension always.\n\t\t\tconst existing = await this.unsetIfUninstalled(extensionKey);\n\t\t\tif (existing) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.extensionsScanner.removeExtension(existing, 'existing');\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(nls.localize('restartCode', \"Please restart VS Code before reinstalling {0}.\", this.manifest.displayName || this.manifest.name));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst local = await this.extractExtension({ zipPath: path.resolve(this.location.fsPath), key: extensionKey, metadata }, true, token);\n\t\treturn [local, metadata];\n\t}\n\n\tprivate async updateMetadata(extension: ILocalExtension, token: CancellationToken): Promise<void> {\n\t\ttry {\n\t\t\tlet [galleryExtension] = await this.galleryService.getExtensions([{ id: extension.identifier.id, version: extension.manifest.version }], token);\n\t\t\tif (!galleryExtension) {\n\t\t\t\t[galleryExtension] = await this.galleryService.getExtensions([{ id: extension.identifier.id }], token);\n\t\t\t}\n\t\t\tif (galleryExtension) {\n\t\t\t\tconst metadata = {\n\t\t\t\t\tid: galleryExtension.identifier.uuid,\n\t\t\t\t\tpublisherDisplayName: galleryExtension.publisherDisplayName,\n\t\t\t\t\tpublisherId: galleryExtension.publisherId,\n\t\t\t\t\tisPreReleaseVersion: galleryExtension.properties.isPreReleaseVersion,\n\t\t\t\t\tpreRelease: galleryExtension.properties.isPreReleaseVersion || this.options.installPreReleaseVersion\n\t\t\t\t};\n\t\t\t\tawait this.extensionsScanner.updateMetadata(extension, metadata, this.options.profileLocation);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* Ignore Error */\n\t\t}\n\t}\n}\n\nclass UninstallExtensionTask extends AbstractExtensionTask<void> implements IUninstallExtensionTask {\n\n\tconstructor(\n\t\treadonly extension: ILocalExtension,\n\t\tprivate readonly profileLocation: URI,\n\t\tprivate readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doRun(token: CancellationToken): Promise<void> {\n\t\tawait this.extensionsProfileScannerService.removeExtensionFromProfile(this.extension, this.profileLocation);\n\t}\n\n}\n\n"]}