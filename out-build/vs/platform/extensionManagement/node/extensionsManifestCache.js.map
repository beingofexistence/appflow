{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionManagement/node/extensionsManifestCache.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAa,GAAwB,SAAQ,eAAG;QAE/C,YACkB,CAA4B,EAC5B,CAAgB,EAChB,CAAuB,EACxC,2BAAgC,EACf,CAAe;YAEhC,KAAK,EAAE,CAAC;YANS,MAAC,GAAD,CAAC,CAA2B;YAC5B,MAAC,GAAD,CAAC,CAAe;YAChB,MAAC,GAAD,CAAC,CAAsB;YAEvB,MAAC,GAAD,CAAC,CAAc;YAGhC,IAAI,CAAC,CAAC,CAAS,2BAA2B,CAAC,sBAAsB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;YACxG,IAAI,CAAC,CAAC,CAAS,2BAA2B,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3G,CAAC;QAEO,CAAC,CAAsB,OAA0C;YACxE,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;gBACxB,IAAI,CAAC,CAAC,KAAK,EAAE;oBACZ,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;iBACnC;aACD;QACF,CAAC;QAEO,CAAC,CAAuB,CAA6B;YAC5D,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE;gBACb,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;aACnC;QACF,CAAC;QAED,KAAK,CAAC,UAAU,CAAC,0BAA2C;YAC3D,IAAI,0BAA0B,EAAE;gBAC/B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,CAAC,CAAuB,QAAQ,EAAE;oBAC5D,IAAI,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,EAAE,0BAA0B,CAAC,EAAE;wBACnG,MAAM,IAAI,CAAC,CAAC,CAAmB,OAAO,CAAC,CAAC;qBACxC;iBACD;aACD;iBAAM;gBACN,MAAM,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,CAAC,CAAuB,cAAc,CAAC,CAAC;aAC5E;QACF,CAAC;QAEO,KAAK,CAAC,CAAC,CAAmB,OAAyB;YAC1D,IAAI;gBACH,MAAM,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,gBAAG,CAAsB,CAAC,CAAC;aACjH;YAAC,OAAO,KAAK,EAAE;gBACf,IAAI,IAAA,WAAG,EAAmB,KAAK,CAAC,+CAAuC,EAAE;oBACxE,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,KAAK,CAAC,CAAC;iBAC7B;aACD;QACF,CAAC;KACD;IAjDD,kBAiDC","file":"extensionsManifestCache.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { DidUninstallExtensionEvent, IExtensionManagementService, InstallExtensionResult } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { USER_MANIFEST_CACHE_FILE } from 'vs/platform/extensions/common/extensions';\nimport { FileOperationResult, IFileService, toFileOperationResult } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IUserDataProfile, IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\n\nexport class ExtensionsManifestCache extends Disposable {\n\n\tconstructor(\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\textensionsManagementService: IExtensionManagementService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._register(extensionsManagementService.onDidInstallExtensions(e => this.onDidInstallExtensions(e)));\n\t\tthis._register(extensionsManagementService.onDidUninstallExtension(e => this.onDidUnInstallExtension(e)));\n\t}\n\n\tprivate onDidInstallExtensions(results: readonly InstallExtensionResult[]): void {\n\t\tfor (const r of results) {\n\t\t\tif (r.local) {\n\t\t\t\tthis.invalidate(r.profileLocation);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidUnInstallExtension(e: DidUninstallExtensionEvent): void {\n\t\tif (!e.error) {\n\t\t\tthis.invalidate(e.profileLocation);\n\t\t}\n\t}\n\n\tasync invalidate(extensionsManifestLocation: URI | undefined): Promise<void> {\n\t\tif (extensionsManifestLocation) {\n\t\t\tfor (const profile of this.userDataProfilesService.profiles) {\n\t\t\t\tif (this.uriIdentityService.extUri.isEqual(profile.extensionsResource, extensionsManifestLocation)) {\n\t\t\t\t\tawait this.deleteUserCacheFile(profile);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tawait this.deleteUserCacheFile(this.userDataProfilesService.defaultProfile);\n\t\t}\n\t}\n\n\tprivate async deleteUserCacheFile(profile: IUserDataProfile): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.del(this.uriIdentityService.extUri.joinPath(profile.cacheHome, USER_MANIFEST_CACHE_FILE));\n\t\t} catch (error) {\n\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}