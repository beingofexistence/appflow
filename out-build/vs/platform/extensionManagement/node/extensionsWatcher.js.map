{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionManagement/node/extensionsWatcher.ts"],"names":[],"mappings":"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","file":"extensionsWatcher.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { combinedDisposable, Disposable, DisposableMap } from 'vs/base/common/lifecycle';\nimport { ResourceSet } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\nimport { getIdAndVersion } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { DidAddProfileExtensionsEvent, DidRemoveProfileExtensionsEvent, IExtensionsProfileScannerService, ProfileExtensionsEvent } from 'vs/platform/extensionManagement/common/extensionsProfileScannerService';\nimport { IExtensionsScannerService } from 'vs/platform/extensionManagement/common/extensionsScannerService';\nimport { INativeServerExtensionManagementService } from 'vs/platform/extensionManagement/node/extensionManagementService';\nimport { ExtensionIdentifier, IExtension, IExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { FileChangesEvent, FileChangeType, IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IUserDataProfile, IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\n\nexport interface DidChangeProfileExtensionsEvent {\n\treadonly added?: { readonly extensions: readonly IExtensionIdentifier[]; readonly profileLocation: URI };\n\treadonly removed?: { readonly extensions: readonly IExtensionIdentifier[]; readonly profileLocation: URI };\n}\n\nexport class ExtensionsWatcher extends Disposable {\n\n\tprivate readonly _onDidChangeExtensionsByAnotherSource = this._register(new Emitter<DidChangeProfileExtensionsEvent>());\n\treadonly onDidChangeExtensionsByAnotherSource = this._onDidChangeExtensionsByAnotherSource.event;\n\n\tprivate readonly allExtensions = new Map<string, ResourceSet>;\n\tprivate readonly extensionsProfileWatchDisposables = this._register(new DisposableMap<string>());\n\n\tconstructor(\n\t\tprivate readonly extensionManagementService: INativeServerExtensionManagementService,\n\t\tprivate readonly extensionsScannerService: IExtensionsScannerService,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.initialize().then(null, error => logService.error(error));\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\tawait this.extensionsScannerService.initializeDefaultProfileExtensions();\n\t\tawait this.onDidChangeProfiles(this.userDataProfilesService.profiles);\n\t\tthis.registerListeners();\n\t\tawait this.uninstallExtensionsNotInProfiles();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.userDataProfilesService.onDidChangeProfiles(e => this.onDidChangeProfiles(e.added)));\n\t\tthis._register(this.extensionsProfileScannerService.onAddExtensions(e => this.onAddExtensions(e)));\n\t\tthis._register(this.extensionsProfileScannerService.onDidAddExtensions(e => this.onDidAddExtensions(e)));\n\t\tthis._register(this.extensionsProfileScannerService.onRemoveExtensions(e => this.onRemoveExtensions(e)));\n\t\tthis._register(this.extensionsProfileScannerService.onDidRemoveExtensions(e => this.onDidRemoveExtensions(e)));\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\t}\n\n\tprivate async onDidChangeProfiles(added: readonly IUserDataProfile[]): Promise<void> {\n\t\ttry {\n\t\t\tif (added.length) {\n\t\t\t\tawait Promise.all(added.map(profile => {\n\t\t\t\t\tthis.extensionsProfileWatchDisposables.set(profile.id, combinedDisposable(\n\t\t\t\t\t\tthis.fileService.watch(this.uriIdentityService.extUri.dirname(profile.extensionsResource)),\n\t\t\t\t\t\t// Also listen to the resource incase the resource is a symlink - https://github.com/microsoft/vscode/issues/118134\n\t\t\t\t\t\tthis.fileService.watch(profile.extensionsResource)\n\t\t\t\t\t));\n\t\t\t\t\treturn this.populateExtensionsFromProfile(profile.extensionsResource);\n\t\t\t\t}));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async onAddExtensions(e: ProfileExtensionsEvent): Promise<void> {\n\t\tfor (const extension of e.extensions) {\n\t\t\tthis.addExtensionWithKey(this.getKey(extension.identifier, extension.version), e.profileLocation);\n\t\t}\n\t}\n\n\tprivate async onDidAddExtensions(e: DidAddProfileExtensionsEvent): Promise<void> {\n\t\tfor (const extension of e.extensions) {\n\t\t\tconst key = this.getKey(extension.identifier, extension.version);\n\t\t\tif (e.error) {\n\t\t\t\tthis.removeExtensionWithKey(key, e.profileLocation);\n\t\t\t} else {\n\t\t\t\tthis.addExtensionWithKey(key, e.profileLocation);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async onRemoveExtensions(e: ProfileExtensionsEvent): Promise<void> {\n\t\tfor (const extension of e.extensions) {\n\t\t\tthis.removeExtensionWithKey(this.getKey(extension.identifier, extension.version), e.profileLocation);\n\t\t}\n\t}\n\n\tprivate async onDidRemoveExtensions(e: DidRemoveProfileExtensionsEvent): Promise<void> {\n\t\tconst extensionsToUninstall: IExtension[] = [];\n\t\tconst promises: Promise<void>[] = [];\n\t\tfor (const extension of e.extensions) {\n\t\t\tconst key = this.getKey(extension.identifier, extension.version);\n\t\t\tif (e.error) {\n\t\t\t\tthis.addExtensionWithKey(key, e.profileLocation);\n\t\t\t} else {\n\t\t\t\tthis.removeExtensionWithKey(key, e.profileLocation);\n\t\t\t\tif (!this.allExtensions.has(key)) {\n\t\t\t\t\tthis.logService.debug('Extension is removed from all profiles', extension.identifier.id, extension.version);\n\t\t\t\t\tpromises.push(this.extensionManagementService.scanInstalledExtensionAtLocation(extension.location)\n\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\t\textensionsToUninstall.push(result);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.logService.info('Extension not found at the location', extension.location.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, error => this.logService.error(error)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tawait Promise.all(promises);\n\t\t\tif (extensionsToUninstall.length) {\n\t\t\t\tawait this.uninstallExtensionsNotInProfiles(extensionsToUninstall);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tprivate onDidFilesChange(e: FileChangesEvent): void {\n\t\tfor (const profile of this.userDataProfilesService.profiles) {\n\t\t\tif (e.contains(profile.extensionsResource, FileChangeType.UPDATED, FileChangeType.ADDED)) {\n\t\t\t\tthis.onDidExtensionsProfileChange(profile.extensionsResource);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async onDidExtensionsProfileChange(profileLocation: URI): Promise<void> {\n\t\tconst added: IExtensionIdentifier[] = [], removed: IExtensionIdentifier[] = [];\n\t\tconst extensions = await this.extensionsProfileScannerService.scanProfileExtensions(profileLocation);\n\t\tconst extensionKeys = new Set<string>();\n\t\tconst cached = new Set<string>();\n\t\tfor (const [key, profiles] of this.allExtensions) {\n\t\t\tif (profiles.has(profileLocation)) {\n\t\t\t\tcached.add(key);\n\t\t\t}\n\t\t}\n\t\tfor (const extension of extensions) {\n\t\t\tconst key = this.getKey(extension.identifier, extension.version);\n\t\t\textensionKeys.add(key);\n\t\t\tif (!cached.has(key)) {\n\t\t\t\tadded.push(extension.identifier);\n\t\t\t\tthis.addExtensionWithKey(key, profileLocation);\n\t\t\t}\n\t\t}\n\t\tfor (const key of cached) {\n\t\t\tif (!extensionKeys.has(key)) {\n\t\t\t\tconst extension = this.fromKey(key);\n\t\t\t\tif (extension) {\n\t\t\t\t\tremoved.push(extension.identifier);\n\t\t\t\t\tthis.removeExtensionWithKey(key, profileLocation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (added.length || removed.length) {\n\t\t\tthis._onDidChangeExtensionsByAnotherSource.fire({ added: added.length ? { extensions: added, profileLocation } : undefined, removed: removed.length ? { extensions: removed, profileLocation } : undefined });\n\t\t}\n\t}\n\n\tprivate async populateExtensionsFromProfile(extensionsProfileLocation: URI): Promise<void> {\n\t\tconst extensions = await this.extensionsProfileScannerService.scanProfileExtensions(extensionsProfileLocation);\n\t\tfor (const extension of extensions) {\n\t\t\tthis.addExtensionWithKey(this.getKey(extension.identifier, extension.version), extensionsProfileLocation);\n\t\t}\n\t}\n\n\tprivate async uninstallExtensionsNotInProfiles(toUninstall?: IExtension[]): Promise<void> {\n\t\tif (!toUninstall) {\n\t\t\tconst installed = await this.extensionManagementService.scanAllUserInstalledExtensions();\n\t\t\ttoUninstall = installed.filter(installedExtension => !this.allExtensions.has(this.getKey(installedExtension.identifier, installedExtension.manifest.version)));\n\t\t}\n\t\tif (toUninstall.length) {\n\t\t\tawait this.extensionManagementService.markAsUninstalled(...toUninstall);\n\t\t}\n\t}\n\n\tprivate addExtensionWithKey(key: string, extensionsProfileLocation: URI): void {\n\t\tlet profiles = this.allExtensions.get(key);\n\t\tif (!profiles) {\n\t\t\tthis.allExtensions.set(key, profiles = new ResourceSet((uri) => this.uriIdentityService.extUri.getComparisonKey(uri)));\n\t\t}\n\t\tprofiles.add(extensionsProfileLocation);\n\t}\n\n\tprivate removeExtensionWithKey(key: string, profileLocation: URI): void {\n\t\tconst profiles = this.allExtensions.get(key);\n\t\tif (profiles) {\n\t\t\tprofiles.delete(profileLocation);\n\t\t}\n\t\tif (!profiles?.size) {\n\t\t\tthis.allExtensions.delete(key);\n\t\t}\n\t}\n\n\tprivate getKey(identifier: IExtensionIdentifier, version: string): string {\n\t\treturn `${ExtensionIdentifier.toKey(identifier.id)}@${version}`;\n\t}\n\n\tprivate fromKey(key: string): { identifier: IExtensionIdentifier; version: string } | undefined {\n\t\tconst [id, version] = getIdAndVersion(key);\n\t\treturn version ? { identifier: { id }, version } : undefined;\n\t}\n\n}\n"]}