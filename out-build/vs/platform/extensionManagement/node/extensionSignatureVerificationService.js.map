{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionManagement/node/extensionSignatureVerificationService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAInF,QAAA,GAAG,GAAsC,IAAA,mBAAG,EAAqD,wCAAwC,CAAC,CAAC;IAkCxJ,MAAa,GAAG;QAKP,CAAC;YACR,IAAI,CAAC,IAAI,CAAC,CAAC,EAAqB;gBAC/B,IAAI,CAAC,CAAC,GAAsB,IAAI,OAAO,CACtC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAC3B,CAAC,gBAAgB,CAAC,EAClB,KAAK,EAAE,GAAG,EAAE,EAAE;oBACb,MAAM,QAAQ,GAAoB,GAAG,CAAC;oBAEtC,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC1B,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;aACd;YAED,OAAO,IAAI,CAAC,CAAC,CAAoB;QAClC,CAAC;QAEM,KAAK,CAAC,MAAM,CAAC,YAAoB,EAAE,wBAAgC,EAAE,OAAgB;YAC3F,IAAI,MAAuB,CAAC;YAE5B,IAAI;gBACH,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC,EAAS,CAAC;aAC/B;YAAC,OAAO,KAAK,EAAE;gBACf,OAAO,KAAK,CAAC;aACb;YAED,OAAO,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,wBAAwB,EAAE,OAAO,CAAC,CAAC;QACvE,CAAC;KACD;IA/BD,kBA+BC","file":"extensionSignatureVerificationService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IExtensionSignatureVerificationService = createDecorator<IExtensionSignatureVerificationService>('IExtensionSignatureVerificationService');\n\n/**\n * A service for verifying signed extensions.\n */\nexport interface IExtensionSignatureVerificationService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Verifies an extension file (.vsix) against a signature archive file.\n\t * @param { string } vsixFilePath The extension file path.\n\t * @param { string } signatureArchiveFilePath The signature archive file path.\n\t * @param { boolean } verbose A flag indicating whether or not to capture verbose detail in the event of an error.\n\t * @returns { Promise<boolean> } A promise with `true` if the extension is validly signed and trusted;\n\t * otherwise, `false` because verification is not enabled (e.g.:  in the OSS version of VS Code).\n\t * @throws { ExtensionSignatureVerificationError } An error with a code indicating the validity, integrity, or trust issue\n\t * found during verification or a more fundamental issue (e.g.:  a required dependency was not found).\n\t */\n\tverify(vsixFilePath: string, signatureArchiveFilePath: string, verbose: boolean): Promise<boolean>;\n}\n\ndeclare module vsceSign {\n\texport function verify(vsixFilePath: string, signatureArchiveFilePath: string, verbose: boolean): Promise<boolean>;\n}\n\n/**\n * An error raised during extension signature verification.\n */\nexport interface ExtensionSignatureVerificationError extends Error {\n\treadonly code: string;\n\treadonly didExecute: boolean;\n\treadonly output?: string;\n}\n\nexport class ExtensionSignatureVerificationService implements IExtensionSignatureVerificationService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate moduleLoadingPromise: Promise<typeof vsceSign> | undefined;\n\n\tprivate vsceSign(): Promise<typeof vsceSign> {\n\t\tif (!this.moduleLoadingPromise) {\n\t\t\tthis.moduleLoadingPromise = new Promise(\n\t\t\t\t(resolve, reject) => require(\n\t\t\t\t\t['node-vsce-sign'],\n\t\t\t\t\tasync (obj) => {\n\t\t\t\t\t\tconst instance = <typeof vsceSign>obj;\n\n\t\t\t\t\t\treturn resolve(instance);\n\t\t\t\t\t}, reject));\n\t\t}\n\n\t\treturn this.moduleLoadingPromise;\n\t}\n\n\tpublic async verify(vsixFilePath: string, signatureArchiveFilePath: string, verbose: boolean): Promise<boolean> {\n\t\tlet module: typeof vsceSign;\n\n\t\ttry {\n\t\t\tmodule = await this.vsceSign();\n\t\t} catch (error) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn module.verify(vsixFilePath, signatureArchiveFilePath, verbose);\n\t}\n}\n"]}