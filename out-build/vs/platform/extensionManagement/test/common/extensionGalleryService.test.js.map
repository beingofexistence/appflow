{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionManagement/test/common/extensionGalleryService.test.ts"],"names":[],"mappings":"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","file":"extensionGalleryService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { isUUID } from 'vs/base/common/uuid';\nimport { mock } from 'vs/base/test/common/mock';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IRawGalleryExtensionVersion, sortExtensionVersions } from 'vs/platform/extensionManagement/common/extensionGalleryService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { resolveMarketplaceHeaders } from 'vs/platform/externalServices/common/marketplace';\nimport { InMemoryStorageService, IStorageService } from 'vs/platform/storage/common/storage';\nimport { TelemetryConfiguration, TELEMETRY_SETTING_ID } from 'vs/platform/telemetry/common/telemetry';\nimport { TargetPlatform } from 'vs/platform/extensions/common/extensions';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nclass EnvironmentServiceMock extends mock<IEnvironmentService>() {\n\toverride readonly serviceMachineIdResource: URI;\n\tconstructor(serviceMachineIdResource: URI) {\n\t\tsuper();\n\t\tthis.serviceMachineIdResource = serviceMachineIdResource;\n\t\tthis.isBuilt = true;\n\t}\n}\n\nsuite('Extension Gallery Service', () => {\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet fileService: IFileService, environmentService: IEnvironmentService, storageService: IStorageService, productService: IProductService, configurationService: IConfigurationService;\n\n\tsetup(() => {\n\t\tconst serviceMachineIdResource = joinPath(URI.file('tests').with({ scheme: 'vscode-tests' }), 'machineid');\n\t\tenvironmentService = new EnvironmentServiceMock(serviceMachineIdResource);\n\t\tfileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(serviceMachineIdResource.scheme, fileSystemProvider));\n\t\tstorageService = disposables.add(new InMemoryStorageService());\n\t\tconfigurationService = new TestConfigurationService({ [TELEMETRY_SETTING_ID]: TelemetryConfiguration.ON });\n\t\tconfigurationService.updateValue(TELEMETRY_SETTING_ID, TelemetryConfiguration.ON);\n\t\tproductService = { _serviceBrand: undefined, ...product, enableTelemetry: true };\n\t});\n\n\ttest('marketplace machine id', async () => {\n\t\tconst headers = await resolveMarketplaceHeaders(product.version, productService, environmentService, configurationService, fileService, storageService, NullTelemetryService);\n\t\tassert.ok(isUUID(headers['X-Market-User-Id']));\n\t\tconst headers2 = await resolveMarketplaceHeaders(product.version, productService, environmentService, configurationService, fileService, storageService, NullTelemetryService);\n\t\tassert.strictEqual(headers['X-Market-User-Id'], headers2['X-Market-User-Id']);\n\t});\n\n\ttest('sorting single extension version without target platform', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2')];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.DARWIN_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting single extension version with preferred target platform', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2', TargetPlatform.DARWIN_X64)];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.DARWIN_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting single extension version with fallback target platform', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2', TargetPlatform.WIN32_IA32)];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting single extension version with not compatible target platform', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2', TargetPlatform.DARWIN_ARM64)];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting single extension version with multiple target platforms and preferred at first', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2', TargetPlatform.WIN32_X64), aExtensionVersion('1.1.2', TargetPlatform.WIN32_IA32), aExtensionVersion('1.1.2')];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting single extension version with multiple target platforms and preferred at first with no fallbacks', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2', TargetPlatform.DARWIN_X64), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.2', TargetPlatform.WIN32_IA32)];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.DARWIN_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting single extension version with multiple target platforms and preferred at first and fallback at last', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2', TargetPlatform.WIN32_X64), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.2', TargetPlatform.WIN32_IA32)];\n\t\tconst expected = [actual[0], actual[2], actual[1]];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting single extension version with multiple target platforms and preferred is not first', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2', TargetPlatform.WIN32_IA32), aExtensionVersion('1.1.2', TargetPlatform.WIN32_X64), aExtensionVersion('1.1.2')];\n\t\tconst expected = [actual[1], actual[0], actual[2]];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting single extension version with multiple target platforms and preferred is at the end', async () => {\n\t\tconst actual = [aExtensionVersion('1.1.2', TargetPlatform.WIN32_IA32), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.2', TargetPlatform.WIN32_X64)];\n\t\tconst expected = [actual[2], actual[0], actual[1]];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_X64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting multiple extension versions without target platforms', async () => {\n\t\tconst actual = [aExtensionVersion('1.2.4'), aExtensionVersion('1.1.3'), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.1')];\n\t\tconst expected = [...actual];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_ARM64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting multiple extension versions with target platforms - 1', async () => {\n\t\tconst actual = [aExtensionVersion('1.2.4', TargetPlatform.DARWIN_ARM64), aExtensionVersion('1.2.4', TargetPlatform.WIN32_ARM64), aExtensionVersion('1.2.4', TargetPlatform.LINUX_ARM64), aExtensionVersion('1.1.3'), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.1')];\n\t\tconst expected = [actual[1], actual[0], actual[2], actual[3], actual[4], actual[5]];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_ARM64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting multiple extension versions with target platforms - 2', async () => {\n\t\tconst actual = [aExtensionVersion('1.2.4'), aExtensionVersion('1.2.3', TargetPlatform.DARWIN_ARM64), aExtensionVersion('1.2.3', TargetPlatform.WIN32_ARM64), aExtensionVersion('1.2.3', TargetPlatform.LINUX_ARM64), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.1')];\n\t\tconst expected = [actual[0], actual[3], actual[1], actual[2], actual[4], actual[5]];\n\t\tsortExtensionVersions(actual, TargetPlatform.LINUX_ARM64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\ttest('sorting multiple extension versions with target platforms - 3', async () => {\n\t\tconst actual = [aExtensionVersion('1.2.4'), aExtensionVersion('1.1.2'), aExtensionVersion('1.1.1'), aExtensionVersion('1.0.0', TargetPlatform.DARWIN_ARM64), aExtensionVersion('1.0.0', TargetPlatform.WIN32_IA32), aExtensionVersion('1.0.0', TargetPlatform.WIN32_ARM64)];\n\t\tconst expected = [actual[0], actual[1], actual[2], actual[5], actual[4], actual[3]];\n\t\tsortExtensionVersions(actual, TargetPlatform.WIN32_ARM64);\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n\n\tfunction aExtensionVersion(version: string, targetPlatform?: TargetPlatform): IRawGalleryExtensionVersion {\n\t\treturn { version, targetPlatform } as IRawGalleryExtensionVersion;\n\t}\n});\n"]}