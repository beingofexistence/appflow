{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionManagement/common/extensionTipsService.ts"],"names":[],"mappings":"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","file":"extensionTipsService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IConfigBasedExtensionTip as IRawConfigBasedExtensionTip } from 'vs/base/common/product';\nimport { joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigBasedExtensionTip, IExecutableBasedExtensionTip, IExtensionManagementService, IExtensionTipsService, ILocalExtension } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { disposableTimeout } from 'vs/base/common/async';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Event } from 'vs/base/common/event';\nimport { join } from 'vs/base/common/path';\nimport { isWindows } from 'vs/base/common/platform';\nimport { env } from 'vs/base/common/process';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IExtensionRecommendationNotificationService, RecommendationsNotificationResult, RecommendationSource } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\n//#region Base Extension Tips Service\n\nexport class ExtensionTipsService extends Disposable implements IExtensionTipsService {\n\n\t_serviceBrand: any;\n\n\tprivate readonly allConfigBasedTips: Map<string, IRawConfigBasedExtensionTip> = new Map<string, IRawConfigBasedExtensionTip>();\n\n\tconstructor(\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tsuper();\n\t\tif (this.productService.configBasedExtensionTips) {\n\t\t\tObject.entries(this.productService.configBasedExtensionTips).forEach(([, value]) => this.allConfigBasedTips.set(value.configPath, value));\n\t\t}\n\t}\n\n\tgetConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]> {\n\t\treturn this.getValidConfigBasedTips(folder);\n\t}\n\n\tasync getImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn [];\n\t}\n\n\tasync getOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn [];\n\t}\n\n\tprivate async getValidConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]> {\n\t\tconst result: IConfigBasedExtensionTip[] = [];\n\t\tfor (const [configPath, tip] of this.allConfigBasedTips) {\n\t\t\tif (tip.configScheme && tip.configScheme !== folder.scheme) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst content = (await this.fileService.readFile(joinPath(folder, configPath))).value.toString();\n\t\t\t\tfor (const [key, value] of Object.entries(tip.recommendations)) {\n\t\t\t\t\tif (!value.contentPattern || new RegExp(value.contentPattern, 'mig').test(content)) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\textensionId: key,\n\t\t\t\t\t\t\textensionName: value.name,\n\t\t\t\t\t\t\tconfigName: tip.configName,\n\t\t\t\t\t\t\timportant: !!value.important,\n\t\t\t\t\t\t\tisExtensionPack: !!value.isExtensionPack,\n\t\t\t\t\t\t\twhenNotInstalled: value.whenNotInstalled\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) { /* Ignore */ }\n\t\t}\n\t\treturn result;\n\t}\n}\n\n//#endregion\n\n//#region Native Extension Tips Service (enables unit testing having it here in \"common\")\n\ntype ExeExtensionRecommendationsClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about executable based extension recommendation';\n\textensionId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'id of the recommended extension' };\n\texeName: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'name of the executable for which extension is being recommended' };\n};\n\ntype IExeBasedExtensionTips = {\n\treadonly exeFriendlyName: string;\n\treadonly windowsPath?: string;\n\treadonly recommendations: { extensionId: string; extensionName: string; isExtensionPack: boolean; whenNotInstalled?: string[] }[];\n};\n\nconst promptedExecutableTipsStorageKey = 'extensionTips/promptedExecutableTips';\nconst lastPromptedMediumImpExeTimeStorageKey = 'extensionTips/lastPromptedMediumImpExeTime';\n\nexport abstract class AbstractNativeExtensionTipsService extends ExtensionTipsService {\n\n\tprivate readonly highImportanceExecutableTips: Map<string, IExeBasedExtensionTips> = new Map<string, IExeBasedExtensionTips>();\n\tprivate readonly mediumImportanceExecutableTips: Map<string, IExeBasedExtensionTips> = new Map<string, IExeBasedExtensionTips>();\n\tprivate readonly allOtherExecutableTips: Map<string, IExeBasedExtensionTips> = new Map<string, IExeBasedExtensionTips>();\n\n\tprivate highImportanceTipsByExe = new Map<string, IExecutableBasedExtensionTip[]>();\n\tprivate mediumImportanceTipsByExe = new Map<string, IExecutableBasedExtensionTip[]>();\n\n\tconstructor(\n\t\tprivate readonly userHome: URI,\n\t\tprivate readonly windowEvents: {\n\t\t\treadonly onDidOpenWindow: Event<unknown>;\n\t\t\treadonly onDidFocusWindow: Event<unknown>;\n\t\t},\n\t\tprivate readonly telemetryService: ITelemetryService,\n\t\tprivate readonly extensionManagementService: IExtensionManagementService,\n\t\tprivate readonly storageService: IStorageService,\n\t\tprivate readonly extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t\tfileService: IFileService,\n\t\tproductService: IProductService\n\t) {\n\t\tsuper(fileService, productService);\n\t\tif (productService.exeBasedExtensionTips) {\n\t\t\tObject.entries(productService.exeBasedExtensionTips).forEach(([key, exeBasedExtensionTip]) => {\n\t\t\t\tconst highImportanceRecommendations: { extensionId: string; extensionName: string; isExtensionPack: boolean }[] = [];\n\t\t\t\tconst mediumImportanceRecommendations: { extensionId: string; extensionName: string; isExtensionPack: boolean }[] = [];\n\t\t\t\tconst otherRecommendations: { extensionId: string; extensionName: string; isExtensionPack: boolean }[] = [];\n\t\t\t\tObject.entries(exeBasedExtensionTip.recommendations).forEach(([extensionId, value]) => {\n\t\t\t\t\tif (value.important) {\n\t\t\t\t\t\tif (exeBasedExtensionTip.important) {\n\t\t\t\t\t\t\thighImportanceRecommendations.push({ extensionId, extensionName: value.name, isExtensionPack: !!value.isExtensionPack });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmediumImportanceRecommendations.push({ extensionId, extensionName: value.name, isExtensionPack: !!value.isExtensionPack });\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\totherRecommendations.push({ extensionId, extensionName: value.name, isExtensionPack: !!value.isExtensionPack });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (highImportanceRecommendations.length) {\n\t\t\t\t\tthis.highImportanceExecutableTips.set(key, { exeFriendlyName: exeBasedExtensionTip.friendlyName, windowsPath: exeBasedExtensionTip.windowsPath, recommendations: highImportanceRecommendations });\n\t\t\t\t}\n\t\t\t\tif (mediumImportanceRecommendations.length) {\n\t\t\t\t\tthis.mediumImportanceExecutableTips.set(key, { exeFriendlyName: exeBasedExtensionTip.friendlyName, windowsPath: exeBasedExtensionTip.windowsPath, recommendations: mediumImportanceRecommendations });\n\t\t\t\t}\n\t\t\t\tif (otherRecommendations.length) {\n\t\t\t\t\tthis.allOtherExecutableTips.set(key, { exeFriendlyName: exeBasedExtensionTip.friendlyName, windowsPath: exeBasedExtensionTip.windowsPath, recommendations: otherRecommendations });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/*\n\t\t\t3s has come out to be the good number to fetch and prompt important exe based recommendations\n\t\t\tAlso fetch important exe based recommendations for reporting telemetry\n\t\t*/\n\t\tthis._register(disposableTimeout(async () => {\n\t\t\tawait this.collectTips();\n\t\t\tthis.promptHighImportanceExeBasedTip();\n\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t}, 3000));\n\t}\n\n\toverride async getImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\tconst highImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.highImportanceExecutableTips);\n\t\tconst mediumImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.mediumImportanceExecutableTips);\n\t\treturn [...highImportanceExeTips, ...mediumImportanceExeTips];\n\t}\n\n\toverride getOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn this.getValidExecutableBasedExtensionTips(this.allOtherExecutableTips);\n\t}\n\n\tprivate async collectTips(): Promise<void> {\n\t\tconst highImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.highImportanceExecutableTips);\n\t\tconst mediumImportanceExeTips = await this.getValidExecutableBasedExtensionTips(this.mediumImportanceExecutableTips);\n\t\tconst local = await this.extensionManagementService.getInstalled();\n\n\t\tthis.highImportanceTipsByExe = this.groupImportantTipsByExe(highImportanceExeTips, local);\n\t\tthis.mediumImportanceTipsByExe = this.groupImportantTipsByExe(mediumImportanceExeTips, local);\n\t}\n\n\tprivate groupImportantTipsByExe(importantExeBasedTips: IExecutableBasedExtensionTip[], local: ILocalExtension[]): Map<string, IExecutableBasedExtensionTip[]> {\n\t\tconst importantExeBasedRecommendations = new Map<string, IExecutableBasedExtensionTip>();\n\t\timportantExeBasedTips.forEach(tip => importantExeBasedRecommendations.set(tip.extensionId.toLowerCase(), tip));\n\n\t\tconst { installed, uninstalled: recommendations } = this.groupByInstalled([...importantExeBasedRecommendations.keys()], local);\n\n\t\t/* Log installed and uninstalled exe based recommendations */\n\t\tfor (const extensionId of installed) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip) {\n\t\t\t\tthis.telemetryService.publicLog2<{ exeName: string; extensionId: string }, ExeExtensionRecommendationsClassification>('exeExtensionRecommendations:alreadyInstalled', { extensionId, exeName: tip.exeName });\n\t\t\t}\n\t\t}\n\t\tfor (const extensionId of recommendations) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip) {\n\t\t\t\tthis.telemetryService.publicLog2<{ exeName: string; extensionId: string }, ExeExtensionRecommendationsClassification>('exeExtensionRecommendations:notInstalled', { extensionId, exeName: tip.exeName });\n\t\t\t}\n\t\t}\n\n\t\tconst promptedExecutableTips = this.getPromptedExecutableTips();\n\t\tconst tipsByExe = new Map<string, IExecutableBasedExtensionTip[]>();\n\t\tfor (const extensionId of recommendations) {\n\t\t\tconst tip = importantExeBasedRecommendations.get(extensionId);\n\t\t\tif (tip && (!promptedExecutableTips[tip.exeName] || !promptedExecutableTips[tip.exeName].includes(tip.extensionId))) {\n\t\t\t\tlet tips = tipsByExe.get(tip.exeName);\n\t\t\t\tif (!tips) {\n\t\t\t\t\ttips = [];\n\t\t\t\t\ttipsByExe.set(tip.exeName, tips);\n\t\t\t\t}\n\t\t\t\ttips.push(tip);\n\t\t\t}\n\t\t}\n\n\t\treturn tipsByExe;\n\t}\n\n\t/**\n\t * High importance tips are prompted once per restart session\n\t */\n\tprivate promptHighImportanceExeBasedTip(): void {\n\t\tif (this.highImportanceTipsByExe.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [exeName, tips] = [...this.highImportanceTipsByExe.entries()][0];\n\t\tthis.promptExeRecommendations(tips)\n\t\t\t.then(result => {\n\t\t\t\tswitch (result) {\n\t\t\t\t\tcase RecommendationsNotificationResult.Accepted:\n\t\t\t\t\t\tthis.addToRecommendedExecutables(tips[0].exeName, tips);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RecommendationsNotificationResult.Ignored:\n\t\t\t\t\t\tthis.highImportanceTipsByExe.delete(exeName);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase RecommendationsNotificationResult.IncompatibleWindow: {\n\t\t\t\t\t\t// Recommended in incompatible window. Schedule the prompt after active window change\n\t\t\t\t\t\tconst onActiveWindowChange = Event.once(Event.latch(Event.any(this.windowEvents.onDidOpenWindow, this.windowEvents.onDidFocusWindow)));\n\t\t\t\t\t\tthis._register(onActiveWindowChange(() => this.promptHighImportanceExeBasedTip()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RecommendationsNotificationResult.TooMany: {\n\t\t\t\t\t\t// Too many notifications. Schedule the prompt after one hour\n\t\t\t\t\t\tconst disposable = this._register(disposableTimeout(() => { disposable.dispose(); this.promptHighImportanceExeBasedTip(); }, 60 * 60 * 1000 /* 1 hour */));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Medium importance tips are prompted once per 7 days\n\t */\n\tprivate promptMediumImportanceExeBasedTip(): void {\n\t\tif (this.mediumImportanceTipsByExe.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lastPromptedMediumExeTime = this.getLastPromptedMediumExeTime();\n\t\tconst timeSinceLastPrompt = Date.now() - lastPromptedMediumExeTime;\n\t\tconst promptInterval = 7 * 24 * 60 * 60 * 1000; // 7 Days\n\t\tif (timeSinceLastPrompt < promptInterval) {\n\t\t\t// Wait until interval and prompt\n\t\t\tconst disposable = this._register(disposableTimeout(() => { disposable.dispose(); this.promptMediumImportanceExeBasedTip(); }, promptInterval - timeSinceLastPrompt));\n\t\t\treturn;\n\t\t}\n\n\t\tconst [exeName, tips] = [...this.mediumImportanceTipsByExe.entries()][0];\n\t\tthis.promptExeRecommendations(tips)\n\t\t\t.then(result => {\n\t\t\t\tswitch (result) {\n\t\t\t\t\tcase RecommendationsNotificationResult.Accepted: {\n\t\t\t\t\t\t// Accepted: Update the last prompted time and caches.\n\t\t\t\t\t\tthis.updateLastPromptedMediumExeTime(Date.now());\n\t\t\t\t\t\tthis.mediumImportanceTipsByExe.delete(exeName);\n\t\t\t\t\t\tthis.addToRecommendedExecutables(tips[0].exeName, tips);\n\n\t\t\t\t\t\t// Schedule the next recommendation for next internval\n\t\t\t\t\t\tconst disposable1 = this._register(disposableTimeout(() => { disposable1.dispose(); this.promptMediumImportanceExeBasedTip(); }, promptInterval));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RecommendationsNotificationResult.Ignored:\n\t\t\t\t\t\t// Ignored: Remove from the cache and prompt next recommendation\n\t\t\t\t\t\tthis.mediumImportanceTipsByExe.delete(exeName);\n\t\t\t\t\t\tthis.promptMediumImportanceExeBasedTip();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase RecommendationsNotificationResult.IncompatibleWindow: {\n\t\t\t\t\t\t// Recommended in incompatible window. Schedule the prompt after active window change\n\t\t\t\t\t\tconst onActiveWindowChange = Event.once(Event.latch(Event.any(this.windowEvents.onDidOpenWindow, this.windowEvents.onDidFocusWindow)));\n\t\t\t\t\t\tthis._register(onActiveWindowChange(() => this.promptMediumImportanceExeBasedTip()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RecommendationsNotificationResult.TooMany: {\n\t\t\t\t\t\t// Too many notifications. Schedule the prompt after one hour\n\t\t\t\t\t\tconst disposable2 = this._register(disposableTimeout(() => { disposable2.dispose(); this.promptMediumImportanceExeBasedTip(); }, 60 * 60 * 1000 /* 1 hour */));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate async promptExeRecommendations(tips: IExecutableBasedExtensionTip[]): Promise<RecommendationsNotificationResult> {\n\t\tconst installed = await this.extensionManagementService.getInstalled(ExtensionType.User);\n\t\tconst extensions = tips\n\t\t\t.filter(tip => !tip.whenNotInstalled || tip.whenNotInstalled.every(id => installed.every(local => !areSameExtensions(local.identifier, { id }))))\n\t\t\t.map(({ extensionId }) => extensionId.toLowerCase());\n\t\treturn this.extensionRecommendationNotificationService.promptImportantExtensionsInstallNotification({ extensions, source: RecommendationSource.EXE, name: tips[0].exeFriendlyName, searchValue: `@exe:\"${tips[0].exeName}\"` });\n\t}\n\n\tprivate getLastPromptedMediumExeTime(): number {\n\t\tlet value = this.storageService.getNumber(lastPromptedMediumImpExeTimeStorageKey, StorageScope.APPLICATION);\n\t\tif (!value) {\n\t\t\tvalue = Date.now();\n\t\t\tthis.updateLastPromptedMediumExeTime(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate updateLastPromptedMediumExeTime(value: number): void {\n\t\tthis.storageService.store(lastPromptedMediumImpExeTimeStorageKey, value, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tprivate getPromptedExecutableTips(): IStringDictionary<string[]> {\n\t\treturn JSON.parse(this.storageService.get(promptedExecutableTipsStorageKey, StorageScope.APPLICATION, '{}'));\n\t}\n\n\tprivate addToRecommendedExecutables(exeName: string, tips: IExecutableBasedExtensionTip[]) {\n\t\tconst promptedExecutableTips = this.getPromptedExecutableTips();\n\t\tpromptedExecutableTips[exeName] = tips.map(({ extensionId }) => extensionId.toLowerCase());\n\t\tthis.storageService.store(promptedExecutableTipsStorageKey, JSON.stringify(promptedExecutableTips), StorageScope.APPLICATION, StorageTarget.USER);\n\t}\n\n\tprivate groupByInstalled(recommendationsToSuggest: string[], local: ILocalExtension[]): { installed: string[]; uninstalled: string[] } {\n\t\tconst installed: string[] = [], uninstalled: string[] = [];\n\t\tconst installedExtensionsIds = local.reduce((result, i) => { result.add(i.identifier.id.toLowerCase()); return result; }, new Set<string>());\n\t\trecommendationsToSuggest.forEach(id => {\n\t\t\tif (installedExtensionsIds.has(id.toLowerCase())) {\n\t\t\t\tinstalled.push(id);\n\t\t\t} else {\n\t\t\t\tuninstalled.push(id);\n\t\t\t}\n\t\t});\n\t\treturn { installed, uninstalled };\n\t}\n\n\tprivate async getValidExecutableBasedExtensionTips(executableTips: Map<string, IExeBasedExtensionTips>): Promise<IExecutableBasedExtensionTip[]> {\n\t\tconst result: IExecutableBasedExtensionTip[] = [];\n\n\t\tconst checkedExecutables: Map<string, boolean> = new Map<string, boolean>();\n\t\tfor (const exeName of executableTips.keys()) {\n\t\t\tconst extensionTip = executableTips.get(exeName);\n\t\t\tif (!extensionTip || !isNonEmptyArray(extensionTip.recommendations)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst exePaths: string[] = [];\n\t\t\tif (isWindows) {\n\t\t\t\tif (extensionTip.windowsPath) {\n\t\t\t\t\texePaths.push(extensionTip.windowsPath.replace('%USERPROFILE%', () => env['USERPROFILE']!)\n\t\t\t\t\t\t.replace('%ProgramFiles(x86)%', () => env['ProgramFiles(x86)']!)\n\t\t\t\t\t\t.replace('%ProgramFiles%', () => env['ProgramFiles']!)\n\t\t\t\t\t\t.replace('%APPDATA%', () => env['APPDATA']!)\n\t\t\t\t\t\t.replace('%WINDIR%', () => env['WINDIR']!));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texePaths.push(join('/usr/local/bin', exeName));\n\t\t\t\texePaths.push(join('/usr/bin', exeName));\n\t\t\t\texePaths.push(join(this.userHome.fsPath, exeName));\n\t\t\t}\n\n\t\t\tfor (const exePath of exePaths) {\n\t\t\t\tlet exists = checkedExecutables.get(exePath);\n\t\t\t\tif (exists === undefined) {\n\t\t\t\t\texists = await this.fileService.exists(URI.file(exePath));\n\t\t\t\t\tcheckedExecutables.set(exePath, exists);\n\t\t\t\t}\n\t\t\t\tif (exists) {\n\t\t\t\t\tfor (const { extensionId, extensionName, isExtensionPack, whenNotInstalled } of extensionTip.recommendations) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\textensionName,\n\t\t\t\t\t\t\tisExtensionPack,\n\t\t\t\t\t\t\texeName,\n\t\t\t\t\t\t\texeFriendlyName: extensionTip.exeFriendlyName,\n\t\t\t\t\t\t\twindowsPath: extensionTip.windowsPath,\n\t\t\t\t\t\t\twhenNotInstalled: whenNotInstalled\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n//#endregion\n"]}