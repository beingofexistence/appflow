{"version":3,"sources":["vs/platform/extensionManagement/common/extensionNls.ts"],"names":[],"mappings":"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","file":"extensionNls.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isObject, isString } from 'vs/base/common/types';\nimport { ILocalizedString } from 'vs/platform/action/common/action';\nimport { IExtensionManifest } from 'vs/platform/extensions/common/extensions';\nimport { localize } from 'vs/nls';\nimport { ILogger } from 'vs/platform/log/common/log';\n\nexport interface ITranslations {\n\t[key: string]: string | { message: string; comment: string[] } | undefined;\n}\n\nexport function localizeManifest(logger: ILogger, extensionManifest: IExtensionManifest, translations: ITranslations, fallbackTranslations?: ITranslations): IExtensionManifest {\n\ttry {\n\t\treplaceNLStrings(logger, extensionManifest, translations, fallbackTranslations);\n\t} catch (error) {\n\t\tlogger.error(error?.message ?? error);\n\t\t/*Ignore Error*/\n\t}\n\treturn extensionManifest;\n}\n\n/**\n * This routine makes the following assumptions:\n * The root element is an object literal\n */\nfunction replaceNLStrings(logger: ILogger, extensionManifest: IExtensionManifest, messages: ITranslations, originalMessages?: ITranslations): void {\n\tconst processEntry = (obj: any, key: string | number, command?: boolean) => {\n\t\tconst value = obj[key];\n\t\tif (isString(value)) {\n\t\t\tconst str = <string>value;\n\t\t\tconst length = str.length;\n\t\t\tif (length > 1 && str[0] === '%' && str[length - 1] === '%') {\n\t\t\t\tconst messageKey = str.substr(1, length - 2);\n\t\t\t\tlet translated = messages[messageKey];\n\t\t\t\t// If the messages come from a language pack they might miss some keys\n\t\t\t\t// Fill them from the original messages.\n\t\t\t\tif (translated === undefined && originalMessages) {\n\t\t\t\t\ttranslated = originalMessages[messageKey];\n\t\t\t\t}\n\t\t\t\tconst message: string | undefined = typeof translated === 'string' ? translated : translated?.message;\n\n\t\t\t\t// This branch returns ILocalizedString's instead of Strings so that the Command Palette can contain both the localized and the original value.\n\t\t\t\tconst original = originalMessages?.[messageKey];\n\t\t\t\tconst originalMessage: string | undefined = typeof original === 'string' ? original : original?.message;\n\n\t\t\t\tif (!message) {\n\t\t\t\t\tif (!originalMessage) {\n\t\t\t\t\t\tlogger.warn(`[${extensionManifest.name}]: ${localize('missingNLSKey', \"Couldn't find message for key {0}.\", messageKey)}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t// if we are translating the title or category of a command\n\t\t\t\t\tcommand && (key === 'title' || key === 'category') &&\n\t\t\t\t\t// and the original value is not the same as the translated value\n\t\t\t\t\toriginalMessage && originalMessage !== message\n\t\t\t\t) {\n\t\t\t\t\tconst localizedString: ILocalizedString = {\n\t\t\t\t\t\tvalue: message,\n\t\t\t\t\t\toriginal: originalMessage\n\t\t\t\t\t};\n\t\t\t\t\tobj[key] = localizedString;\n\t\t\t\t} else {\n\t\t\t\t\tobj[key] = message;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(value)) {\n\t\t\tfor (const k in value) {\n\t\t\t\tif (value.hasOwnProperty(k)) {\n\t\t\t\t\tk === 'commands' ? processEntry(value, k, true) : processEntry(value, k, command);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Array.isArray(value)) {\n\t\t\tfor (let i = 0; i < value.length; i++) {\n\t\t\t\tprocessEntry(value, i, command);\n\t\t\t}\n\t\t}\n\t};\n\n\tfor (const key in extensionManifest) {\n\t\tif (extensionManifest.hasOwnProperty(key)) {\n\t\t\tprocessEntry(extensionManifest, key);\n\t\t}\n\t}\n}\n"]}