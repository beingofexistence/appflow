{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionManagement/common/implicitActivationEvents.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,GAAG;QAAhB;YAEkB,MAAC,GAAa,IAAI,GAAG,EAA2C,CAAC;YACjE,MAAC,GAAQ,IAAI,OAAO,EAAmC,CAAC;QA4D1E,CAAC;QA1DO,QAAQ,CAAI,kBAA0B,EAAE,SAAwC;YACtF,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;QACrD,CAAC;QAED;;;WAGG;QACI,oBAAoB,CAAC,oBAA2C;YACtE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,oBAAoB,CAAC,EAAE;gBAC3C,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC,CAAqB,oBAAoB,CAAC,CAAC,CAAC;aACxF;YACD,OAAO,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,oBAAoB,CAAE,CAAC;QAC/C,CAAC;QAED;;;WAGG;QACI,yBAAyB,CAAC,qBAA8C;YAC9E,MAAM,MAAM,GAAwC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACxE,KAAK,MAAM,oBAAoB,IAAI,qBAAqB,EAAE;gBACzD,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC;gBACzE,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;oBAChC,MAAM,CAAC,gBAAG,CAAiB,KAAK,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,GAAG,gBAAgB,CAAC;iBACtF;aACD;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAEO,CAAC,CAAqB,IAA2B;YACxD,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,WAAW,EAAE;gBAC5E,OAAO,EAAE,CAAC;aACV;YAED,MAAM,gBAAgB,GAAa,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAChH,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACtB,gCAAgC;gBAChC,OAAO,gBAAgB,CAAC;aACxB;YAED,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE;gBAC5C,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,YAAY,CAAC,CAAC;gBACrD,IAAI,CAAC,SAAS,EAAE;oBACf,gDAAgD;oBAChD,SAAS;iBACT;gBACD,MAAM,OAAO,GAAI,IAAI,CAAC,WAAmB,CAAC,YAAY,CAAC,CAAC;gBACxD,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBAChE,IAAI;oBACH,SAAS,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;iBACxC;gBAAC,OAAO,GAAG,EAAE;oBACb,IAAA,WAAE,EAAgB,GAAG,CAAC,CAAC;iBACvB;aACD;YAED,OAAO,gBAAgB,CAAC;QACzB,CAAC;KACD;IA/DD,kBA+DC;IAEY,QAAA,GAAG,GAAsD,IAAI,GAAG,EAA2B,CAAC","file":"implicitActivationEvents.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\n\nexport interface IActivationEventsGenerator<T> {\n\t(contributions: T[], result: { push(item: string): void }): void;\n}\n\nexport class ImplicitActivationEventsImpl {\n\n\tprivate readonly _generators = new Map<string, IActivationEventsGenerator<any>>();\n\tprivate readonly _cache = new WeakMap<IExtensionDescription, string[]>();\n\n\tpublic register<T>(extensionPointName: string, generator: IActivationEventsGenerator<T>): void {\n\t\tthis._generators.set(extensionPointName, generator);\n\t}\n\n\t/**\n\t * This can run correctly only on the renderer process because that is the only place\n\t * where all extension points and all implicit activation events generators are known.\n\t */\n\tpublic readActivationEvents(extensionDescription: IExtensionDescription): string[] {\n\t\tif (!this._cache.has(extensionDescription)) {\n\t\t\tthis._cache.set(extensionDescription, this._readActivationEvents(extensionDescription));\n\t\t}\n\t\treturn this._cache.get(extensionDescription)!;\n\t}\n\n\t/**\n\t * This can run correctly only on the renderer process because that is the only place\n\t * where all extension points and all implicit activation events generators are known.\n\t */\n\tpublic createActivationEventsMap(extensionDescriptions: IExtensionDescription[]): { [extensionId: string]: string[] } {\n\t\tconst result: { [extensionId: string]: string[] } = Object.create(null);\n\t\tfor (const extensionDescription of extensionDescriptions) {\n\t\t\tconst activationEvents = this.readActivationEvents(extensionDescription);\n\t\t\tif (activationEvents.length > 0) {\n\t\t\t\tresult[ExtensionIdentifier.toKey(extensionDescription.identifier)] = activationEvents;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _readActivationEvents(desc: IExtensionDescription): string[] {\n\t\tif (typeof desc.main === 'undefined' && typeof desc.browser === 'undefined') {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst activationEvents: string[] = (Array.isArray(desc.activationEvents) ? desc.activationEvents.slice(0) : []);\n\t\tif (!desc.contributes) {\n\t\t\t// no implicit activation events\n\t\t\treturn activationEvents;\n\t\t}\n\n\t\tfor (const extPointName in desc.contributes) {\n\t\t\tconst generator = this._generators.get(extPointName);\n\t\t\tif (!generator) {\n\t\t\t\t// There's no generator for this extension point\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst contrib = (desc.contributes as any)[extPointName];\n\t\t\tconst contribArr = Array.isArray(contrib) ? contrib : [contrib];\n\t\t\ttry {\n\t\t\t\tgenerator(contribArr, activationEvents);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t}\n\n\t\treturn activationEvents;\n\t}\n}\n\nexport const ImplicitActivationEvents: ImplicitActivationEventsImpl = new ImplicitActivationEventsImpl();\n"]}