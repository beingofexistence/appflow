{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionManagement/common/extensionsProfileScannerService.ts"],"names":[],"mappings":"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","file":"extensionsProfileScannerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Queue } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Metadata, isIExtensionIdentifier } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IExtension, IExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { FileOperationResult, IFileService, toFileOperationResult } from 'vs/platform/files/common/files';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { Mutable, isObject, isString, isUndefined } from 'vs/base/common/types';\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\ninterface IStoredProfileExtension {\n\tidentifier: IExtensionIdentifier;\n\tlocation: UriComponents | string;\n\trelativeLocation: string | undefined;\n\tversion: string;\n\tmetadata?: Metadata;\n}\n\nexport const enum ExtensionsProfileScanningErrorCode {\n\n\t/**\n\t * Error when trying to scan extensions from a profile that does not exist.\n\t */\n\tERROR_PROFILE_NOT_FOUND = 'ERROR_PROFILE_NOT_FOUND',\n\n\t/**\n\t * Error when profile file is invalid.\n\t */\n\tERROR_INVALID_CONTENT = 'ERROR_INVALID_CONTENT',\n\n}\n\nexport class ExtensionsProfileScanningError extends Error {\n\tconstructor(message: string, public code: ExtensionsProfileScanningErrorCode) {\n\t\tsuper(message);\n\t}\n}\n\nexport interface IScannedProfileExtension {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly version: string;\n\treadonly location: URI;\n\treadonly metadata?: Metadata;\n}\n\nexport interface ProfileExtensionsEvent {\n\treadonly extensions: readonly IScannedProfileExtension[];\n\treadonly profileLocation: URI;\n}\n\nexport interface DidAddProfileExtensionsEvent extends ProfileExtensionsEvent {\n\treadonly error?: Error;\n}\n\nexport interface DidRemoveProfileExtensionsEvent extends ProfileExtensionsEvent {\n\treadonly error?: Error;\n}\n\nexport interface IProfileExtensionsScanOptions {\n\treadonly bailOutWhenFileNotFound?: boolean;\n}\n\nexport const IExtensionsProfileScannerService = createDecorator<IExtensionsProfileScannerService>('IExtensionsProfileScannerService');\nexport interface IExtensionsProfileScannerService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onAddExtensions: Event<ProfileExtensionsEvent>;\n\treadonly onDidAddExtensions: Event<DidAddProfileExtensionsEvent>;\n\treadonly onRemoveExtensions: Event<ProfileExtensionsEvent>;\n\treadonly onDidRemoveExtensions: Event<DidRemoveProfileExtensionsEvent>;\n\n\tscanProfileExtensions(profileLocation: URI, options?: IProfileExtensionsScanOptions): Promise<IScannedProfileExtension[]>;\n\taddExtensionsToProfile(extensions: [IExtension, Metadata | undefined][], profileLocation: URI): Promise<IScannedProfileExtension[]>;\n\tupdateMetadata(extensions: [IExtension, Metadata | undefined][], profileLocation: URI): Promise<IScannedProfileExtension[]>;\n\tremoveExtensionFromProfile(extension: IExtension, profileLocation: URI): Promise<void>;\n}\n\nexport abstract class AbstractExtensionsProfileScannerService extends Disposable implements IExtensionsProfileScannerService {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _onAddExtensions = this._register(new Emitter<ProfileExtensionsEvent>());\n\treadonly onAddExtensions = this._onAddExtensions.event;\n\n\tprivate readonly _onDidAddExtensions = this._register(new Emitter<DidAddProfileExtensionsEvent>());\n\treadonly onDidAddExtensions = this._onDidAddExtensions.event;\n\n\tprivate readonly _onRemoveExtensions = this._register(new Emitter<ProfileExtensionsEvent>());\n\treadonly onRemoveExtensions = this._onRemoveExtensions.event;\n\n\tprivate readonly _onDidRemoveExtensions = this._register(new Emitter<DidRemoveProfileExtensionsEvent>());\n\treadonly onDidRemoveExtensions = this._onDidRemoveExtensions.event;\n\n\tprivate readonly resourcesAccessQueueMap = new ResourceMap<Queue<IScannedProfileExtension[]>>();\n\n\tconstructor(\n\t\tprivate readonly extensionsLocation: URI,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\tscanProfileExtensions(profileLocation: URI, options?: IProfileExtensionsScanOptions): Promise<IScannedProfileExtension[]> {\n\t\treturn this.withProfileExtensions(profileLocation, undefined, options);\n\t}\n\n\tasync addExtensionsToProfile(extensions: [IExtension, Metadata | undefined][], profileLocation: URI): Promise<IScannedProfileExtension[]> {\n\t\tconst extensionsToRemove: IScannedProfileExtension[] = [];\n\t\tconst extensionsToAdd: IScannedProfileExtension[] = [];\n\t\ttry {\n\t\t\tawait this.withProfileExtensions(profileLocation, existingExtensions => {\n\t\t\t\tconst result: IScannedProfileExtension[] = [];\n\t\t\t\tfor (const existing of existingExtensions) {\n\t\t\t\t\tif (extensions.some(([e]) => areSameExtensions(e.identifier, existing.identifier) && e.manifest.version !== existing.version)) {\n\t\t\t\t\t\t// Remove the existing extension with different version\n\t\t\t\t\t\textensionsToRemove.push(existing);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.push(existing);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const [extension, metadata] of extensions) {\n\t\t\t\t\tconst index = result.findIndex(e => areSameExtensions(e.identifier, extension.identifier) && e.version === extension.manifest.version);\n\t\t\t\t\tconst extensionToAdd = { identifier: extension.identifier, version: extension.manifest.version, location: extension.location, metadata };\n\t\t\t\t\tif (index === -1) {\n\t\t\t\t\t\textensionsToAdd.push(extensionToAdd);\n\t\t\t\t\t\tresult.push(extensionToAdd);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.splice(index, 1, extensionToAdd);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (extensionsToAdd.length) {\n\t\t\t\t\tthis._onAddExtensions.fire({ extensions: extensionsToAdd, profileLocation });\n\t\t\t\t}\n\t\t\t\tif (extensionsToRemove.length) {\n\t\t\t\t\tthis._onRemoveExtensions.fire({ extensions: extensionsToRemove, profileLocation });\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tif (extensionsToAdd.length) {\n\t\t\t\tthis._onDidAddExtensions.fire({ extensions: extensionsToAdd, profileLocation });\n\t\t\t}\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({ extensions: extensionsToRemove, profileLocation });\n\t\t\t}\n\t\t\treturn extensionsToAdd;\n\t\t} catch (error) {\n\t\t\tif (extensionsToAdd.length) {\n\t\t\t\tthis._onDidAddExtensions.fire({ extensions: extensionsToAdd, error, profileLocation });\n\t\t\t}\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({ extensions: extensionsToRemove, error, profileLocation });\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync updateMetadata(extensions: [IExtension, Metadata][], profileLocation: URI): Promise<IScannedProfileExtension[]> {\n\t\tconst updatedExtensions: IScannedProfileExtension[] = [];\n\t\tawait this.withProfileExtensions(profileLocation, profileExtensions => {\n\t\t\tconst result: IScannedProfileExtension[] = [];\n\t\t\tfor (const profileExtension of profileExtensions) {\n\t\t\t\tconst extension = extensions.find(([e]) => areSameExtensions(e.identifier, profileExtension.identifier) && e.manifest.version === profileExtension.version);\n\t\t\t\tif (extension) {\n\t\t\t\t\tprofileExtension.metadata = { ...profileExtension.metadata, ...extension[1] };\n\t\t\t\t\tupdatedExtensions.push(profileExtension);\n\t\t\t\t\tresult.push(profileExtension);\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(profileExtension);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t\treturn updatedExtensions;\n\t}\n\n\tasync removeExtensionFromProfile(extension: IExtension, profileLocation: URI): Promise<void> {\n\t\tconst extensionsToRemove: IScannedProfileExtension[] = [];\n\t\ttry {\n\t\t\tawait this.withProfileExtensions(profileLocation, profileExtensions => {\n\t\t\t\tconst result: IScannedProfileExtension[] = [];\n\t\t\t\tfor (const e of profileExtensions) {\n\t\t\t\t\tif (areSameExtensions(e.identifier, extension.identifier)) {\n\t\t\t\t\t\textensionsToRemove.push(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.push(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (extensionsToRemove.length) {\n\t\t\t\t\tthis._onRemoveExtensions.fire({ extensions: extensionsToRemove, profileLocation });\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({ extensions: extensionsToRemove, profileLocation });\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (extensionsToRemove.length) {\n\t\t\t\tthis._onDidRemoveExtensions.fire({ extensions: extensionsToRemove, error, profileLocation });\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async withProfileExtensions(file: URI, updateFn?: (extensions: Mutable<IScannedProfileExtension>[]) => IScannedProfileExtension[], options?: IProfileExtensionsScanOptions): Promise<IScannedProfileExtension[]> {\n\t\treturn this.getResourceAccessQueue(file).queue(async () => {\n\t\t\tlet extensions: IScannedProfileExtension[] = [];\n\n\t\t\t// Read\n\t\t\tlet storedProfileExtensions: IStoredProfileExtension[] | undefined;\n\t\t\ttry {\n\t\t\t\tconst content = await this.fileService.readFile(file);\n\t\t\t\tstoredProfileExtensions = JSON.parse(content.value.toString().trim() || '[]');\n\t\t\t} catch (error) {\n\t\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\t// migrate from old location, remove this after couple of releases\n\t\t\t\tif (this.uriIdentityService.extUri.isEqual(file, this.userDataProfilesService.defaultProfile.extensionsResource)) {\n\t\t\t\t\tstoredProfileExtensions = await this.migrateFromOldDefaultProfileExtensionsLocation();\n\t\t\t\t}\n\t\t\t\tif (!storedProfileExtensions && options?.bailOutWhenFileNotFound) {\n\t\t\t\t\tthrow new ExtensionsProfileScanningError(getErrorMessage(error), ExtensionsProfileScanningErrorCode.ERROR_PROFILE_NOT_FOUND);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (storedProfileExtensions) {\n\t\t\t\tif (!Array.isArray(storedProfileExtensions)) {\n\t\t\t\t\tthis.reportAndThrowInvalidConentError(file);\n\t\t\t\t}\n\t\t\t\t// TODO @sandy081: Remove this migration after couple of releases\n\t\t\t\tlet migrate = false;\n\t\t\t\tfor (const e of storedProfileExtensions) {\n\t\t\t\t\tif (!isStoredProfileExtension(e)) {\n\t\t\t\t\t\tthis.reportAndThrowInvalidConentError(file);\n\t\t\t\t\t}\n\t\t\t\t\tlet location: URI;\n\t\t\t\t\tif (isString(e.relativeLocation) && e.relativeLocation) {\n\t\t\t\t\t\t// Extension in new format. No migration needed.\n\t\t\t\t\t\tlocation = this.resolveExtensionLocation(e.relativeLocation);\n\t\t\t\t\t} else if (isString(e.location)) {\n\t\t\t\t\t\t// Extension in intermediate format. Migrate to new format.\n\t\t\t\t\t\tlocation = this.resolveExtensionLocation(e.location);\n\t\t\t\t\t\tmigrate = true;\n\t\t\t\t\t\te.relativeLocation = e.location;\n\t\t\t\t\t\t// retain old format so that old clients can read it\n\t\t\t\t\t\te.location = location.toJSON();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlocation = URI.revive(e.location);\n\t\t\t\t\t\tconst relativePath = this.toRelativePath(location);\n\t\t\t\t\t\tif (relativePath) {\n\t\t\t\t\t\t\t// Extension in old format. Migrate to new format.\n\t\t\t\t\t\t\tmigrate = true;\n\t\t\t\t\t\t\te.relativeLocation = relativePath;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\textensions.push({\n\t\t\t\t\t\tidentifier: e.identifier,\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tversion: e.version,\n\t\t\t\t\t\tmetadata: e.metadata,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (migrate) {\n\t\t\t\t\tawait this.fileService.writeFile(file, VSBuffer.fromString(JSON.stringify(storedProfileExtensions)));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update\n\t\t\tif (updateFn) {\n\t\t\t\textensions = updateFn(extensions);\n\t\t\t\tconst storedProfileExtensions: IStoredProfileExtension[] = extensions.map(e => ({\n\t\t\t\t\tidentifier: e.identifier,\n\t\t\t\t\tversion: e.version,\n\t\t\t\t\t// retain old format so that old clients can read it\n\t\t\t\t\tlocation: e.location.toJSON(),\n\t\t\t\t\trelativeLocation: this.toRelativePath(e.location),\n\t\t\t\t\tmetadata: e.metadata\n\t\t\t\t}));\n\t\t\t\tawait this.fileService.writeFile(file, VSBuffer.fromString(JSON.stringify(storedProfileExtensions)));\n\t\t\t}\n\n\t\t\treturn extensions;\n\t\t});\n\t}\n\n\tprivate reportAndThrowInvalidConentError(file: URI): void {\n\t\ttype ErrorClassification = {\n\t\t\towner: 'sandy081';\n\t\t\tcomment: 'Information about the error that occurred while scanning';\n\t\t\tcode: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'error code' };\n\t\t};\n\t\tconst error = new ExtensionsProfileScanningError(`Invalid extensions content in ${file.toString()}`, ExtensionsProfileScanningErrorCode.ERROR_INVALID_CONTENT);\n\t\tthis.telemetryService.publicLogError2<{ code: string }, ErrorClassification>('extensionsProfileScanningError', { code: error.code });\n\t\tthrow error;\n\t}\n\n\tprivate toRelativePath(extensionLocation: URI): string | undefined {\n\t\treturn this.uriIdentityService.extUri.isEqual(this.uriIdentityService.extUri.dirname(extensionLocation), this.extensionsLocation)\n\t\t\t? this.uriIdentityService.extUri.basename(extensionLocation)\n\t\t\t: undefined;\n\t}\n\n\tprivate resolveExtensionLocation(path: string): URI {\n\t\treturn this.uriIdentityService.extUri.joinPath(this.extensionsLocation, path);\n\t}\n\n\tprivate _migrationPromise: Promise<IStoredProfileExtension[] | undefined> | undefined;\n\tprivate async migrateFromOldDefaultProfileExtensionsLocation(): Promise<IStoredProfileExtension[] | undefined> {\n\t\tif (!this._migrationPromise) {\n\t\t\tthis._migrationPromise = (async () => {\n\t\t\t\tconst oldDefaultProfileExtensionsLocation = this.uriIdentityService.extUri.joinPath(this.userDataProfilesService.defaultProfile.location, 'extensions.json');\n\t\t\t\tconst oldDefaultProfileExtensionsInitLocation = this.uriIdentityService.extUri.joinPath(this.extensionsLocation, '.init-default-profile-extensions');\n\t\t\t\tlet content: string;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = (await this.fileService.readFile(oldDefaultProfileExtensionsLocation)).value.toString();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (toFileOperationResult(error) === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tthis.logService.info('Migrating extensions from old default profile location', oldDefaultProfileExtensionsLocation.toString());\n\t\t\t\tlet storedProfileExtensions: IStoredProfileExtension[] | undefined;\n\t\t\t\ttry {\n\t\t\t\t\tconst parsedData = JSON.parse(content);\n\t\t\t\t\tif (Array.isArray(parsedData) && parsedData.every(candidate => isStoredProfileExtension(candidate))) {\n\t\t\t\t\t\tstoredProfileExtensions = parsedData;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logService.warn('Skipping migrating from old default profile locaiton: Found invalid data', parsedData);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t/* Ignore */\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\n\t\t\t\tif (storedProfileExtensions) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.fileService.createFile(this.userDataProfilesService.defaultProfile.extensionsResource, VSBuffer.fromString(JSON.stringify(storedProfileExtensions)), { overwrite: false });\n\t\t\t\t\t\tthis.logService.info('Migrated extensions from old default profile location to new location', oldDefaultProfileExtensionsLocation.toString(), this.userDataProfilesService.defaultProfile.extensionsResource.toString());\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (toFileOperationResult(error) === FileOperationResult.FILE_MODIFIED_SINCE) {\n\t\t\t\t\t\t\tthis.logService.info('Migration from old default profile location to new location is done by another window', oldDefaultProfileExtensionsLocation.toString(), this.userDataProfilesService.defaultProfile.extensionsResource.toString());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(oldDefaultProfileExtensionsLocation);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileService.del(oldDefaultProfileExtensionsInitLocation);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn storedProfileExtensions;\n\t\t\t})();\n\t\t}\n\t\treturn this._migrationPromise;\n\t}\n\n\tprivate getResourceAccessQueue(file: URI): Queue<IScannedProfileExtension[]> {\n\t\tlet resourceQueue = this.resourcesAccessQueueMap.get(file);\n\t\tif (!resourceQueue) {\n\t\t\tresourceQueue = new Queue<IScannedProfileExtension[]>();\n\t\t\tthis.resourcesAccessQueueMap.set(file, resourceQueue);\n\t\t}\n\t\treturn resourceQueue;\n\t}\n}\n\nfunction isStoredProfileExtension(candidate: any): candidate is IStoredProfileExtension {\n\treturn isObject(candidate)\n\t\t&& isIExtensionIdentifier(candidate.identifier)\n\t\t&& (isUriComponents(candidate.location) || (isString(candidate.location) && candidate.location))\n\t\t&& (isUndefined(candidate.relativeLocation) || isString(candidate.relativeLocation))\n\t\t&& candidate.version && isString(candidate.version);\n}\n\nfunction isUriComponents(thing: unknown): thing is UriComponents {\n\tif (!thing) {\n\t\treturn false;\n\t}\n\treturn isString((<any>thing).path) &&\n\t\tisString((<any>thing).scheme);\n}\n"]}