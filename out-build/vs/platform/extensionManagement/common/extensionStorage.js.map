{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionManagement/common/extensionStorage.ts"],"names":[],"mappings":"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","file":"extensionStorage.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { IProfileStorageValueChangeEvent, IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { adoptToGalleryExtensionId, areSameExtensions, getExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { distinct } from 'vs/base/common/arrays';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IExtension } from 'vs/platform/extensions/common/extensions';\nimport { isString } from 'vs/base/common/types';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { IExtensionManagementService, IGalleryExtension } from 'vs/platform/extensionManagement/common/extensionManagement';\n\nexport interface IExtensionIdWithVersion {\n\tid: string;\n\tversion: string;\n}\n\nexport const IExtensionStorageService = createDecorator<IExtensionStorageService>('IExtensionStorageService');\n\nexport interface IExtensionStorageService {\n\treadonly _serviceBrand: undefined;\n\n\tgetExtensionState(extension: IExtension | IGalleryExtension | string, global: boolean): IStringDictionary<any> | undefined;\n\tgetExtensionStateRaw(extension: IExtension | IGalleryExtension | string, global: boolean): string | undefined;\n\tsetExtensionState(extension: IExtension | IGalleryExtension | string, state: IStringDictionary<any> | undefined, global: boolean): void;\n\n\treadonly onDidChangeExtensionStorageToSync: Event<void>;\n\tsetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion, keys: string[]): void;\n\tgetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion): string[] | undefined;\n\n\taddToMigrationList(from: string, to: string): void;\n\tgetSourceExtensionToMigrate(target: string): string | undefined;\n}\n\nconst EXTENSION_KEYS_ID_VERSION_REGEX = /^extensionKeys\\/([^.]+\\..+)@(\\d+\\.\\d+\\.\\d+(-.*)?)$/;\n\nexport class ExtensionStorageService extends Disposable implements IExtensionStorageService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate static LARGE_STATE_WARNING_THRESHOLD = 512 * 1024;\n\n\tprivate static toKey(extension: IExtensionIdWithVersion): string {\n\t\treturn `extensionKeys/${adoptToGalleryExtensionId(extension.id)}@${extension.version}`;\n\t}\n\n\tprivate static fromKey(key: string): IExtensionIdWithVersion | undefined {\n\t\tconst matches = EXTENSION_KEYS_ID_VERSION_REGEX.exec(key);\n\t\tif (matches && matches[1]) {\n\t\t\treturn { id: matches[1], version: matches[2] };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/* TODO @sandy081: This has to be done across all profiles */\n\tstatic async removeOutdatedExtensionVersions(extensionManagementService: IExtensionManagementService, storageService: IStorageService): Promise<void> {\n\t\tconst extensions = await extensionManagementService.getInstalled();\n\t\tconst extensionVersionsToRemove: string[] = [];\n\t\tfor (const [id, versions] of ExtensionStorageService.readAllExtensionsWithKeysForSync(storageService)) {\n\t\t\tconst extensionVersion = extensions.find(e => areSameExtensions(e.identifier, { id }))?.manifest.version;\n\t\t\tfor (const version of versions) {\n\t\t\t\tif (extensionVersion !== version) {\n\t\t\t\t\textensionVersionsToRemove.push(ExtensionStorageService.toKey({ id, version }));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const key of extensionVersionsToRemove) {\n\t\t\tstorageService.remove(key, StorageScope.PROFILE);\n\t\t}\n\t}\n\n\tprivate static readAllExtensionsWithKeysForSync(storageService: IStorageService): Map<string, string[]> {\n\t\tconst extensionsWithKeysForSync = new Map<string, string[]>();\n\t\tconst keys = storageService.keys(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tfor (const key of keys) {\n\t\t\tconst extensionIdWithVersion = ExtensionStorageService.fromKey(key);\n\t\t\tif (extensionIdWithVersion) {\n\t\t\t\tlet versions = extensionsWithKeysForSync.get(extensionIdWithVersion.id.toLowerCase());\n\t\t\t\tif (!versions) {\n\t\t\t\t\textensionsWithKeysForSync.set(extensionIdWithVersion.id.toLowerCase(), versions = []);\n\t\t\t\t}\n\t\t\t\tversions.push(extensionIdWithVersion.version);\n\t\t\t}\n\t\t}\n\t\treturn extensionsWithKeysForSync;\n\t}\n\n\tprivate readonly _onDidChangeExtensionStorageToSync = this._register(new Emitter<void>());\n\treadonly onDidChangeExtensionStorageToSync = this._onDidChangeExtensionStorageToSync.event;\n\n\tprivate readonly extensionsWithKeysForSync: Map<string, string[]>;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.extensionsWithKeysForSync = ExtensionStorageService.readAllExtensionsWithKeysForSync(storageService);\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, undefined, this._register(new DisposableStore()))(e => this.onDidChangeStorageValue(e)));\n\t}\n\n\tprivate onDidChangeStorageValue(e: IProfileStorageValueChangeEvent): void {\n\n\t\t// State of extension with keys for sync has changed\n\t\tif (this.extensionsWithKeysForSync.has(e.key.toLowerCase())) {\n\t\t\tthis._onDidChangeExtensionStorageToSync.fire();\n\t\t\treturn;\n\t\t}\n\n\t\t// Keys for sync of an extension has changed\n\t\tconst extensionIdWithVersion = ExtensionStorageService.fromKey(e.key);\n\t\tif (extensionIdWithVersion) {\n\t\t\tif (this.storageService.get(e.key, StorageScope.PROFILE) === undefined) {\n\t\t\t\tthis.extensionsWithKeysForSync.delete(extensionIdWithVersion.id.toLowerCase());\n\t\t\t} else {\n\t\t\t\tlet versions = this.extensionsWithKeysForSync.get(extensionIdWithVersion.id.toLowerCase());\n\t\t\t\tif (!versions) {\n\t\t\t\t\tthis.extensionsWithKeysForSync.set(extensionIdWithVersion.id.toLowerCase(), versions = []);\n\t\t\t\t}\n\t\t\t\tversions.push(extensionIdWithVersion.version);\n\t\t\t\tthis._onDidChangeExtensionStorageToSync.fire();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate getExtensionId(extension: IExtension | IGalleryExtension | string): string {\n\t\tif (isString(extension)) {\n\t\t\treturn extension;\n\t\t}\n\t\tconst publisher = (extension as IExtension).manifest ? (extension as IExtension).manifest.publisher : (extension as IGalleryExtension).publisher;\n\t\tconst name = (extension as IExtension).manifest ? (extension as IExtension).manifest.name : (extension as IGalleryExtension).name;\n\t\treturn getExtensionId(publisher, name);\n\t}\n\n\tgetExtensionState(extension: IExtension | IGalleryExtension | string, global: boolean): IStringDictionary<any> | undefined {\n\t\tconst extensionId = this.getExtensionId(extension);\n\t\tconst jsonValue = this.getExtensionStateRaw(extension, global);\n\t\tif (jsonValue) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(jsonValue);\n\t\t\t} catch (error) {\n\t\t\t\t// Do not fail this call but log it for diagnostics\n\t\t\t\t// https://github.com/microsoft/vscode/issues/132777\n\t\t\t\tthis.logService.error(`[mainThreadStorage] unexpected error parsing storage contents (extensionId: ${extensionId}, global: ${global}): ${error}`);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetExtensionStateRaw(extension: IExtension | IGalleryExtension | string, global: boolean): string | undefined {\n\t\tconst extensionId = this.getExtensionId(extension);\n\t\tconst rawState = this.storageService.get(extensionId, global ? StorageScope.PROFILE : StorageScope.WORKSPACE);\n\n\t\tif (rawState && rawState?.length > ExtensionStorageService.LARGE_STATE_WARNING_THRESHOLD) {\n\t\t\tthis.logService.warn(`[mainThreadStorage] large extension state detected (extensionId: ${extensionId}, global: ${global}): ${rawState.length / 1024}kb. Consider to use 'storageUri' or 'globalStorageUri' to store this data on disk instead.`);\n\t\t}\n\n\t\treturn rawState;\n\t}\n\n\tsetExtensionState(extension: IExtension | IGalleryExtension | string, state: IStringDictionary<any> | undefined, global: boolean): void {\n\t\tconst extensionId = this.getExtensionId(extension);\n\t\tif (state === undefined) {\n\t\t\tthis.storageService.remove(extensionId, global ? StorageScope.PROFILE : StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.store(extensionId, JSON.stringify(state), global ? StorageScope.PROFILE : StorageScope.WORKSPACE, StorageTarget.MACHINE /* Extension state is synced separately through extensions */);\n\t\t}\n\t}\n\n\tsetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion, keys: string[]): void {\n\t\tthis.storageService.store(ExtensionStorageService.toKey(extensionIdWithVersion), JSON.stringify(keys), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t}\n\n\tgetKeysForSync(extensionIdWithVersion: IExtensionIdWithVersion): string[] | undefined {\n\t\tconst extensionKeysForSyncFromProduct = this.productService.extensionSyncedKeys?.[extensionIdWithVersion.id.toLowerCase()];\n\t\tconst extensionKeysForSyncFromStorageValue = this.storageService.get(ExtensionStorageService.toKey(extensionIdWithVersion), StorageScope.PROFILE);\n\t\tconst extensionKeysForSyncFromStorage = extensionKeysForSyncFromStorageValue ? JSON.parse(extensionKeysForSyncFromStorageValue) : undefined;\n\n\t\treturn extensionKeysForSyncFromStorage && extensionKeysForSyncFromProduct\n\t\t\t? distinct([...extensionKeysForSyncFromStorage, ...extensionKeysForSyncFromProduct])\n\t\t\t: (extensionKeysForSyncFromStorage || extensionKeysForSyncFromProduct);\n\t}\n\n\taddToMigrationList(from: string, to: string): void {\n\t\tif (from !== to) {\n\t\t\t// remove the duplicates\n\t\t\tconst migrationList: [string, string][] = this.migrationList.filter(entry => !entry.includes(from) && !entry.includes(to));\n\t\t\tmigrationList.push([from, to]);\n\t\t\tthis.migrationList = migrationList;\n\t\t}\n\t}\n\n\tgetSourceExtensionToMigrate(toExtensionId: string): string | undefined {\n\t\tconst entry = this.migrationList.find(([, to]) => toExtensionId === to);\n\t\treturn entry ? entry[0] : undefined;\n\t}\n\n\tprivate get migrationList(): [string, string][] {\n\t\tconst value = this.storageService.get('extensionStorage.migrationList', StorageScope.APPLICATION, '[]');\n\t\ttry {\n\t\t\tconst migrationList = JSON.parse(value);\n\t\t\tif (Array.isArray(migrationList)) {\n\t\t\t\treturn migrationList;\n\t\t\t}\n\t\t} catch (error) { /* ignore */ }\n\t\treturn [];\n\t}\n\n\tprivate set migrationList(migrationList: [string, string][]) {\n\t\tif (migrationList.length) {\n\t\t\tthis.storageService.store('extensionStorage.migrationList', JSON.stringify(migrationList), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove('extensionStorage.migrationList', StorageScope.APPLICATION);\n\t\t}\n\t}\n\n}\n"]}