{"version":3,"sources":["vs/platform/extensionManagement/common/extensionManagement.ts"],"names":[],"mappings":"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","file":"extensionManagement.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Event } from 'vs/base/common/event';\nimport { IPager } from 'vs/base/common/paging';\nimport { Platform } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { ExtensionType, IExtension, IExtensionManifest, TargetPlatform } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const EXTENSION_IDENTIFIER_PATTERN = '^([a-z0-9A-Z][a-z0-9-A-Z]*)\\\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$';\nexport const EXTENSION_IDENTIFIER_REGEX = new RegExp(EXTENSION_IDENTIFIER_PATTERN);\nexport const WEB_EXTENSION_TAG = '__web_extension';\nexport const EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT = 'skipWalkthrough';\nexport const EXTENSION_INSTALL_SYNC_CONTEXT = 'extensionsSync';\nexport const EXTENSION_INSTALL_DEP_PACK_CONTEXT = 'dependecyOrPackExtensionInstall';\n\nexport function TargetPlatformToString(targetPlatform: TargetPlatform) {\n\tswitch (targetPlatform) {\n\t\tcase TargetPlatform.WIN32_X64: return 'Windows 64 bit';\n\t\tcase TargetPlatform.WIN32_IA32: return 'Windows 32 bit';\n\t\tcase TargetPlatform.WIN32_ARM64: return 'Windows ARM';\n\n\t\tcase TargetPlatform.LINUX_X64: return 'Linux 64 bit';\n\t\tcase TargetPlatform.LINUX_ARM64: return 'Linux ARM 64';\n\t\tcase TargetPlatform.LINUX_ARMHF: return 'Linux ARM';\n\n\t\tcase TargetPlatform.ALPINE_X64: return 'Alpine Linux 64 bit';\n\t\tcase TargetPlatform.ALPINE_ARM64: return 'Alpine ARM 64';\n\n\t\tcase TargetPlatform.DARWIN_X64: return 'Mac';\n\t\tcase TargetPlatform.DARWIN_ARM64: return 'Mac Silicon';\n\n\t\tcase TargetPlatform.WEB: return 'Web';\n\n\t\tcase TargetPlatform.UNIVERSAL: return TargetPlatform.UNIVERSAL;\n\t\tcase TargetPlatform.UNKNOWN: return TargetPlatform.UNKNOWN;\n\t\tcase TargetPlatform.UNDEFINED: return TargetPlatform.UNDEFINED;\n\t}\n}\n\nexport function toTargetPlatform(targetPlatform: string): TargetPlatform {\n\tswitch (targetPlatform) {\n\t\tcase TargetPlatform.WIN32_X64: return TargetPlatform.WIN32_X64;\n\t\tcase TargetPlatform.WIN32_IA32: return TargetPlatform.WIN32_IA32;\n\t\tcase TargetPlatform.WIN32_ARM64: return TargetPlatform.WIN32_ARM64;\n\n\t\tcase TargetPlatform.LINUX_X64: return TargetPlatform.LINUX_X64;\n\t\tcase TargetPlatform.LINUX_ARM64: return TargetPlatform.LINUX_ARM64;\n\t\tcase TargetPlatform.LINUX_ARMHF: return TargetPlatform.LINUX_ARMHF;\n\n\t\tcase TargetPlatform.ALPINE_X64: return TargetPlatform.ALPINE_X64;\n\t\tcase TargetPlatform.ALPINE_ARM64: return TargetPlatform.ALPINE_ARM64;\n\n\t\tcase TargetPlatform.DARWIN_X64: return TargetPlatform.DARWIN_X64;\n\t\tcase TargetPlatform.DARWIN_ARM64: return TargetPlatform.DARWIN_ARM64;\n\n\t\tcase TargetPlatform.WEB: return TargetPlatform.WEB;\n\n\t\tcase TargetPlatform.UNIVERSAL: return TargetPlatform.UNIVERSAL;\n\t\tdefault: return TargetPlatform.UNKNOWN;\n\t}\n}\n\nexport function getTargetPlatform(platform: Platform | 'alpine', arch: string | undefined): TargetPlatform {\n\tswitch (platform) {\n\t\tcase Platform.Windows:\n\t\t\tif (arch === 'x64') {\n\t\t\t\treturn TargetPlatform.WIN32_X64;\n\t\t\t}\n\t\t\tif (arch === 'ia32') {\n\t\t\t\treturn TargetPlatform.WIN32_IA32;\n\t\t\t}\n\t\t\tif (arch === 'arm64') {\n\t\t\t\treturn TargetPlatform.WIN32_ARM64;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase Platform.Linux:\n\t\t\tif (arch === 'x64') {\n\t\t\t\treturn TargetPlatform.LINUX_X64;\n\t\t\t}\n\t\t\tif (arch === 'arm64') {\n\t\t\t\treturn TargetPlatform.LINUX_ARM64;\n\t\t\t}\n\t\t\tif (arch === 'arm') {\n\t\t\t\treturn TargetPlatform.LINUX_ARMHF;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase 'alpine':\n\t\t\tif (arch === 'x64') {\n\t\t\t\treturn TargetPlatform.ALPINE_X64;\n\t\t\t}\n\t\t\tif (arch === 'arm64') {\n\t\t\t\treturn TargetPlatform.ALPINE_ARM64;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase Platform.Mac:\n\t\t\tif (arch === 'x64') {\n\t\t\t\treturn TargetPlatform.DARWIN_X64;\n\t\t\t}\n\t\t\tif (arch === 'arm64') {\n\t\t\t\treturn TargetPlatform.DARWIN_ARM64;\n\t\t\t}\n\t\t\treturn TargetPlatform.UNKNOWN;\n\n\t\tcase Platform.Web: return TargetPlatform.WEB;\n\t}\n}\n\nexport function isNotWebExtensionInWebTargetPlatform(allTargetPlatforms: TargetPlatform[], productTargetPlatform: TargetPlatform): boolean {\n\t// Not a web extension in web target platform\n\treturn productTargetPlatform === TargetPlatform.WEB && !allTargetPlatforms.includes(TargetPlatform.WEB);\n}\n\nexport function isTargetPlatformCompatible(extensionTargetPlatform: TargetPlatform, allTargetPlatforms: TargetPlatform[], productTargetPlatform: TargetPlatform): boolean {\n\t// Not compatible when extension is not a web extension in web target platform\n\tif (isNotWebExtensionInWebTargetPlatform(allTargetPlatforms, productTargetPlatform)) {\n\t\treturn false;\n\t}\n\n\t// Compatible when extension target platform is not defined\n\tif (extensionTargetPlatform === TargetPlatform.UNDEFINED) {\n\t\treturn true;\n\t}\n\n\t// Compatible when extension target platform is universal\n\tif (extensionTargetPlatform === TargetPlatform.UNIVERSAL) {\n\t\treturn true;\n\t}\n\n\t// Not compatible when extension target platform is unknown\n\tif (extensionTargetPlatform === TargetPlatform.UNKNOWN) {\n\t\treturn false;\n\t}\n\n\t// Compatible when extension and product target platforms matches\n\tif (extensionTargetPlatform === productTargetPlatform) {\n\t\treturn true;\n\t}\n\n\t// Fallback\n\tconst fallbackTargetPlatforms = getFallbackTargetPlarforms(productTargetPlatform);\n\treturn fallbackTargetPlatforms.includes(extensionTargetPlatform);\n}\n\nexport function getFallbackTargetPlarforms(targetPlatform: TargetPlatform): TargetPlatform[] {\n\tswitch (targetPlatform) {\n\t\tcase TargetPlatform.WIN32_X64: return [TargetPlatform.WIN32_IA32];\n\t\tcase TargetPlatform.WIN32_ARM64: return [TargetPlatform.WIN32_IA32];\n\t}\n\treturn [];\n}\n\nexport interface IGalleryExtensionProperties {\n\tdependencies?: string[];\n\textensionPack?: string[];\n\tengine?: string;\n\tlocalizedLanguages?: string[];\n\ttargetPlatform: TargetPlatform;\n\tisPreReleaseVersion: boolean;\n}\n\nexport interface IGalleryExtensionAsset {\n\turi: string;\n\tfallbackUri: string;\n}\n\nexport interface IGalleryExtensionAssets {\n\tmanifest: IGalleryExtensionAsset | null;\n\treadme: IGalleryExtensionAsset | null;\n\tchangelog: IGalleryExtensionAsset | null;\n\tlicense: IGalleryExtensionAsset | null;\n\trepository: IGalleryExtensionAsset | null;\n\tdownload: IGalleryExtensionAsset;\n\ticon: IGalleryExtensionAsset | null;\n\tsignature: IGalleryExtensionAsset | null;\n\tcoreTranslations: [string, IGalleryExtensionAsset][];\n}\n\nexport function isIExtensionIdentifier(thing: any): thing is IExtensionIdentifier {\n\treturn thing\n\t\t&& typeof thing === 'object'\n\t\t&& typeof thing.id === 'string'\n\t\t&& (!thing.uuid || typeof thing.uuid === 'string');\n}\n\nexport interface IExtensionIdentifier {\n\tid: string;\n\tuuid?: string;\n}\n\nexport interface IGalleryExtensionIdentifier extends IExtensionIdentifier {\n\tuuid: string;\n}\n\nexport interface IGalleryExtensionVersion {\n\tversion: string;\n\tdate: string;\n\tisPreReleaseVersion: boolean;\n}\n\nexport interface IGalleryExtension {\n\tname: string;\n\tidentifier: IGalleryExtensionIdentifier;\n\tversion: string;\n\tdisplayName: string;\n\tpublisherId: string;\n\tpublisher: string;\n\tpublisherDisplayName: string;\n\tpublisherDomain?: { link: string; verified: boolean };\n\tpublisherSponsorLink?: string;\n\tdescription: string;\n\tinstallCount: number;\n\trating: number;\n\tratingCount: number;\n\tcategories: readonly string[];\n\ttags: readonly string[];\n\treleaseDate: number;\n\tlastUpdated: number;\n\tpreview: boolean;\n\thasPreReleaseVersion: boolean;\n\thasReleaseVersion: boolean;\n\tisSigned: boolean;\n\tallTargetPlatforms: TargetPlatform[];\n\tassets: IGalleryExtensionAssets;\n\tproperties: IGalleryExtensionProperties;\n\ttelemetryData?: any;\n\tqueryContext?: IStringDictionary<any>;\n}\n\nexport interface IGalleryMetadata {\n\tid: string;\n\tpublisherId: string;\n\tpublisherDisplayName: string;\n\tisPreReleaseVersion: boolean;\n\ttargetPlatform?: TargetPlatform;\n}\n\nexport type Metadata = Partial<IGalleryMetadata & {\n\tisApplicationScoped: boolean;\n\tisMachineScoped: boolean;\n\tisBuiltin: boolean;\n\tisSystem: boolean;\n\tupdated: boolean;\n\tpreRelease: boolean;\n\tinstalledTimestamp: number;\n\tpinned: boolean;\n}>;\n\nexport interface ILocalExtension extends IExtension {\n\tisMachineScoped: boolean;\n\tisApplicationScoped: boolean;\n\tpublisherId: string | null;\n\tpublisherDisplayName: string | null;\n\tinstalledTimestamp?: number;\n\tisPreReleaseVersion: boolean;\n\tpreRelease: boolean;\n\tupdated: boolean;\n\tpinned: boolean;\n}\n\nexport const enum SortBy {\n\tNoneOrRelevance = 0,\n\tLastUpdatedDate = 1,\n\tTitle = 2,\n\tPublisherName = 3,\n\tInstallCount = 4,\n\tPublishedDate = 10,\n\tAverageRating = 6,\n\tWeightedRating = 12\n}\n\nexport const enum SortOrder {\n\tDefault = 0,\n\tAscending = 1,\n\tDescending = 2\n}\n\nexport interface IQueryOptions {\n\ttext?: string;\n\tids?: string[];\n\tnames?: string[];\n\tpageSize?: number;\n\tsortBy?: SortBy;\n\tsortOrder?: SortOrder;\n\tsource?: string;\n\tincludePreRelease?: boolean;\n}\n\nexport const enum StatisticType {\n\tInstall = 'install',\n\tUninstall = 'uninstall'\n}\n\nexport interface IDeprecationInfo {\n\treadonly disallowInstall?: boolean;\n\treadonly extension?: {\n\t\treadonly id: string;\n\t\treadonly displayName: string;\n\t\treadonly autoMigrate?: { readonly storage: boolean };\n\t\treadonly preRelease?: boolean;\n\t};\n\treadonly settings?: readonly string[];\n\treadonly additionalInfo?: string;\n}\n\nexport interface ISearchPrefferedResults {\n\treadonly query?: string;\n\treadonly preferredResults?: string[];\n}\n\nexport interface IExtensionsControlManifest {\n\treadonly malicious: IExtensionIdentifier[];\n\treadonly deprecated: IStringDictionary<IDeprecationInfo>;\n\treadonly search: ISearchPrefferedResults[];\n}\n\nexport const enum InstallOperation {\n\tNone = 1,\n\tInstall,\n\tUpdate,\n\tMigrate,\n}\n\nexport interface ITranslation {\n\tcontents: { [key: string]: {} };\n}\n\nexport interface IExtensionInfo extends IExtensionIdentifier {\n\tversion?: string;\n\tpreRelease?: boolean;\n\thasPreRelease?: boolean;\n}\n\nexport interface IExtensionQueryOptions {\n\ttargetPlatform?: TargetPlatform;\n\tcompatible?: boolean;\n\tqueryAllVersions?: boolean;\n\tsource?: string;\n}\n\nexport const IExtensionGalleryService = createDecorator<IExtensionGalleryService>('extensionGalleryService');\n\n/**\n * Service to interact with the Visual Studio Code Marketplace to get extensions.\n * @throws Error if the Marketplace is not enabled or not reachable.\n */\nexport interface IExtensionGalleryService {\n\treadonly _serviceBrand: undefined;\n\tisEnabled(): boolean;\n\tquery(options: IQueryOptions, token: CancellationToken): Promise<IPager<IGalleryExtension>>;\n\tgetExtensions(extensionInfos: ReadonlyArray<IExtensionInfo>, token: CancellationToken): Promise<IGalleryExtension[]>;\n\tgetExtensions(extensionInfos: ReadonlyArray<IExtensionInfo>, options: IExtensionQueryOptions, token: CancellationToken): Promise<IGalleryExtension[]>;\n\tisExtensionCompatible(extension: IGalleryExtension, includePreRelease: boolean, targetPlatform: TargetPlatform): Promise<boolean>;\n\tgetCompatibleExtension(extension: IGalleryExtension, includePreRelease: boolean, targetPlatform: TargetPlatform): Promise<IGalleryExtension | null>;\n\tgetAllCompatibleVersions(extension: IGalleryExtension, includePreRelease: boolean, targetPlatform: TargetPlatform): Promise<IGalleryExtensionVersion[]>;\n\tdownload(extension: IGalleryExtension, location: URI, operation: InstallOperation): Promise<void>;\n\tdownloadSignatureArchive(extension: IGalleryExtension, location: URI): Promise<void>;\n\treportStatistic(publisher: string, name: string, version: string, type: StatisticType): Promise<void>;\n\tgetReadme(extension: IGalleryExtension, token: CancellationToken): Promise<string>;\n\tgetManifest(extension: IGalleryExtension, token: CancellationToken): Promise<IExtensionManifest | null>;\n\tgetChangelog(extension: IGalleryExtension, token: CancellationToken): Promise<string>;\n\tgetCoreTranslation(extension: IGalleryExtension, languageId: string): Promise<ITranslation | null>;\n\tgetExtensionsControlManifest(): Promise<IExtensionsControlManifest>;\n}\n\nexport interface InstallExtensionEvent {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly source: URI | IGalleryExtension;\n\treadonly profileLocation?: URI;\n\treadonly applicationScoped?: boolean;\n}\n\nexport interface InstallExtensionResult {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly operation: InstallOperation;\n\treadonly source?: URI | IGalleryExtension;\n\treadonly local?: ILocalExtension;\n\treadonly error?: Error;\n\treadonly context?: IStringDictionary<any>;\n\treadonly profileLocation?: URI;\n\treadonly applicationScoped?: boolean;\n}\n\nexport interface UninstallExtensionEvent {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly profileLocation?: URI;\n\treadonly applicationScoped?: boolean;\n}\n\nexport interface DidUninstallExtensionEvent {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly error?: string;\n\treadonly profileLocation?: URI;\n\treadonly applicationScoped?: boolean;\n}\n\nexport enum ExtensionManagementErrorCode {\n\tUnsupported = 'Unsupported',\n\tDeprecated = 'Deprecated',\n\tMalicious = 'Malicious',\n\tIncompatible = 'Incompatible',\n\tIncompatibleTargetPlatform = 'IncompatibleTargetPlatform',\n\tReleaseVersionNotFound = 'ReleaseVersionNotFound',\n\tInvalid = 'Invalid',\n\tDownload = 'Download',\n\tExtract = 'Extract',\n\tDelete = 'Delete',\n\tRename = 'Rename',\n\tCorruptZip = 'CorruptZip',\n\tIncompleteZip = 'IncompleteZip',\n\tSignature = 'Signature',\n\tInternal = 'Internal',\n}\n\nexport enum ExtensionSignaturetErrorCode {\n\tUnknownError = 'UnknownError',\n\tPackageIsInvalidZip = 'PackageIsInvalidZip',\n\tSignatureArchiveIsInvalidZip = 'SignatureArchiveIsInvalidZip',\n}\n\nexport class ExtensionManagementError extends Error {\n\tconstructor(message: string, readonly code: ExtensionManagementErrorCode) {\n\t\tsuper(message);\n\t\tthis.name = code;\n\t}\n}\n\nexport type InstallOptions = {\n\tisBuiltin?: boolean;\n\tisMachineScoped?: boolean;\n\tisApplicationScoped?: boolean;\n\tdonotIncludePackAndDependencies?: boolean;\n\tinstallGivenVersion?: boolean;\n\tinstallPreReleaseVersion?: boolean;\n\tdonotVerifySignature?: boolean;\n\toperation?: InstallOperation;\n\t/**\n\t * Context passed through to InstallExtensionResult\n\t */\n\tcontext?: IStringDictionary<any>;\n\tprofileLocation?: URI;\n};\nexport type InstallVSIXOptions = InstallOptions & { installOnlyNewlyAddedFromExtensionPack?: boolean };\nexport type UninstallOptions = { readonly donotIncludePack?: boolean; readonly donotCheckDependents?: boolean; readonly versionOnly?: boolean; readonly remove?: boolean; readonly profileLocation?: URI };\n\nexport interface IExtensionManagementParticipant {\n\tpostInstall(local: ILocalExtension, source: URI | IGalleryExtension, options: InstallOptions | InstallVSIXOptions, token: CancellationToken): Promise<void>;\n\tpostUninstall(local: ILocalExtension, options: UninstallOptions, token: CancellationToken): Promise<void>;\n}\n\nexport type InstallExtensionInfo = { readonly extension: IGalleryExtension; readonly options: InstallOptions };\n\nexport const IExtensionManagementService = createDecorator<IExtensionManagementService>('extensionManagementService');\nexport interface IExtensionManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tonInstallExtension: Event<InstallExtensionEvent>;\n\tonDidInstallExtensions: Event<readonly InstallExtensionResult[]>;\n\tonUninstallExtension: Event<UninstallExtensionEvent>;\n\tonDidUninstallExtension: Event<DidUninstallExtensionEvent>;\n\tonDidUpdateExtensionMetadata: Event<ILocalExtension>;\n\n\tzip(extension: ILocalExtension): Promise<URI>;\n\tunzip(zipLocation: URI): Promise<IExtensionIdentifier>;\n\tgetManifest(vsix: URI): Promise<IExtensionManifest>;\n\tinstall(vsix: URI, options?: InstallVSIXOptions): Promise<ILocalExtension>;\n\tcanInstall(extension: IGalleryExtension): Promise<boolean>;\n\tinstallFromGallery(extension: IGalleryExtension, options?: InstallOptions): Promise<ILocalExtension>;\n\tinstallGalleryExtensions(extensions: InstallExtensionInfo[]): Promise<InstallExtensionResult[]>;\n\tinstallFromLocation(location: URI, profileLocation: URI): Promise<ILocalExtension>;\n\tinstallExtensionsFromProfile(extensions: IExtensionIdentifier[], fromProfileLocation: URI, toProfileLocation: URI): Promise<ILocalExtension[]>;\n\tuninstall(extension: ILocalExtension, options?: UninstallOptions): Promise<void>;\n\ttoggleAppliationScope(extension: ILocalExtension, fromProfileLocation: URI): Promise<ILocalExtension>;\n\treinstallFromGallery(extension: ILocalExtension): Promise<ILocalExtension>;\n\tgetInstalled(type?: ExtensionType, profileLocation?: URI): Promise<ILocalExtension[]>;\n\tgetExtensionsControlManifest(): Promise<IExtensionsControlManifest>;\n\tcopyExtensions(fromProfileLocation: URI, toProfileLocation: URI): Promise<void>;\n\tupdateMetadata(local: ILocalExtension, metadata: Partial<Metadata>, profileLocation?: URI): Promise<ILocalExtension>;\n\n\tdownload(extension: IGalleryExtension, operation: InstallOperation, donotVerifySignature: boolean): Promise<URI>;\n\n\tregisterParticipant(pariticipant: IExtensionManagementParticipant): void;\n\tgetTargetPlatform(): Promise<TargetPlatform>;\n\n\tcleanUp(): Promise<void>;\n}\n\nexport const DISABLED_EXTENSIONS_STORAGE_PATH = 'extensionsIdentifiers/disabled';\nexport const ENABLED_EXTENSIONS_STORAGE_PATH = 'extensionsIdentifiers/enabled';\nexport const IGlobalExtensionEnablementService = createDecorator<IGlobalExtensionEnablementService>('IGlobalExtensionEnablementService');\n\nexport interface IGlobalExtensionEnablementService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidChangeEnablement: Event<{ readonly extensions: IExtensionIdentifier[]; readonly source?: string }>;\n\n\tgetDisabledExtensions(): IExtensionIdentifier[];\n\tenableExtension(extension: IExtensionIdentifier, source?: string): Promise<boolean>;\n\tdisableExtension(extension: IExtensionIdentifier, source?: string): Promise<boolean>;\n\n}\n\nexport type IConfigBasedExtensionTip = {\n\treadonly extensionId: string;\n\treadonly extensionName: string;\n\treadonly isExtensionPack: boolean;\n\treadonly configName: string;\n\treadonly important: boolean;\n\treadonly whenNotInstalled?: string[];\n};\n\nexport type IExecutableBasedExtensionTip = {\n\treadonly extensionId: string;\n\treadonly extensionName: string;\n\treadonly isExtensionPack: boolean;\n\treadonly exeName: string;\n\treadonly exeFriendlyName: string;\n\treadonly windowsPath?: string;\n\treadonly whenNotInstalled?: string[];\n};\n\nexport const IExtensionTipsService = createDecorator<IExtensionTipsService>('IExtensionTipsService');\nexport interface IExtensionTipsService {\n\treadonly _serviceBrand: undefined;\n\n\tgetConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]>;\n\tgetImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]>;\n\tgetOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]>;\n}\n\nexport const ExtensionsLabel = localize('extensions', \"Extensions\");\nexport const ExtensionsLocalizedLabel = { value: ExtensionsLabel, original: 'Extensions' };\nexport const PreferencesLocalizedLabel = { value: localize('preferences', \"Preferences\"), original: 'Preferences' };\n"]}