{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionManagement/common/unsupportedExtensionsMigration.ts"],"names":[],"mappings":"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","file":"unsupportedExtensionsMigration.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IExtensionGalleryService, IExtensionManagementService, IGlobalExtensionEnablementService, InstallOperation } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { areSameExtensions, getExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IExtensionStorageService } from 'vs/platform/extensionManagement/common/extensionStorage';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\n\n/**\n * Migrates the installed unsupported nightly extension to a supported pre-release extension. It includes following:\n * \t- Uninstall the Unsupported extension\n * \t- Install (with optional storage migration) the Pre-release extension only if\n * \t\t- the extension is not installed\n * \t\t- or it is a release version and the unsupported extension is enabled.\n */\nexport async function migrateUnsupportedExtensions(extensionManagementService: IExtensionManagementService, galleryService: IExtensionGalleryService, extensionStorageService: IExtensionStorageService, extensionEnablementService: IGlobalExtensionEnablementService, logService: ILogService): Promise<void> {\n\ttry {\n\t\tconst extensionsControlManifest = await extensionManagementService.getExtensionsControlManifest();\n\t\tif (!extensionsControlManifest.deprecated) {\n\t\t\treturn;\n\t\t}\n\t\tconst installed = await extensionManagementService.getInstalled(ExtensionType.User);\n\t\tfor (const [unsupportedExtensionId, deprecated] of Object.entries(extensionsControlManifest.deprecated)) {\n\t\t\tif (!deprecated?.extension) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { id: preReleaseExtensionId, autoMigrate, preRelease } = deprecated.extension;\n\t\t\tif (!autoMigrate) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst unsupportedExtension = installed.find(i => areSameExtensions(i.identifier, { id: unsupportedExtensionId }));\n\t\t\t// Unsupported Extension is not installed\n\t\t\tif (!unsupportedExtension) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst gallery = (await galleryService.getExtensions([{ id: preReleaseExtensionId, preRelease }], { targetPlatform: await extensionManagementService.getTargetPlatform(), compatible: true }, CancellationToken.None))[0];\n\t\t\tif (!gallery) {\n\t\t\t\tlogService.info(`Skipping migrating '${unsupportedExtension.identifier.id}' extension because, the comaptible target '${preReleaseExtensionId}' extension is not found`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tlogService.info(`Migrating '${unsupportedExtension.identifier.id}' extension to '${preReleaseExtensionId}' extension...`);\n\n\t\t\t\tconst isUnsupportedExtensionEnabled = !extensionEnablementService.getDisabledExtensions().some(e => areSameExtensions(e, unsupportedExtension.identifier));\n\t\t\t\tawait extensionManagementService.uninstall(unsupportedExtension);\n\t\t\t\tlogService.info(`Uninstalled the unsupported extension '${unsupportedExtension.identifier.id}'`);\n\n\t\t\t\tlet preReleaseExtension = installed.find(i => areSameExtensions(i.identifier, { id: preReleaseExtensionId }));\n\t\t\t\tif (!preReleaseExtension || (!preReleaseExtension.isPreReleaseVersion && isUnsupportedExtensionEnabled)) {\n\t\t\t\t\tpreReleaseExtension = await extensionManagementService.installFromGallery(gallery, { installPreReleaseVersion: true, isMachineScoped: unsupportedExtension.isMachineScoped, operation: InstallOperation.Migrate });\n\t\t\t\t\tlogService.info(`Installed the pre-release extension '${preReleaseExtension.identifier.id}'`);\n\t\t\t\t\tif (!isUnsupportedExtensionEnabled) {\n\t\t\t\t\t\tawait extensionEnablementService.disableExtension(preReleaseExtension.identifier);\n\t\t\t\t\t\tlogService.info(`Disabled the pre-release extension '${preReleaseExtension.identifier.id}' because the unsupported extension '${unsupportedExtension.identifier.id}' is disabled`);\n\t\t\t\t\t}\n\t\t\t\t\tif (autoMigrate.storage) {\n\t\t\t\t\t\textensionStorageService.addToMigrationList(getExtensionId(unsupportedExtension.manifest.publisher, unsupportedExtension.manifest.name), getExtensionId(preReleaseExtension.manifest.publisher, preReleaseExtension.manifest.name));\n\t\t\t\t\t\tlogService.info(`Added pre-release extension to the storage migration list`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlogService.info(`Migrated '${unsupportedExtension.identifier.id}' extension to '${preReleaseExtensionId}' extension.`);\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error(error);\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tlogService.error(error);\n\t}\n}\n"]}