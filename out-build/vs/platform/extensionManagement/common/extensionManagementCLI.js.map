{"version":3,"sources":["vs/platform/extensionManagement/common/extensionManagementCLI.ts"],"names":[],"mappings":"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","file":"extensionManagementCLI.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { getErrorMessage, isCancellationError } from 'vs/base/common/errors';\nimport { Schemas } from 'vs/base/common/network';\nimport { basename } from 'vs/base/common/resources';\nimport { gt } from 'vs/base/common/semver/semver';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { EXTENSION_IDENTIFIER_REGEX, IExtensionGalleryService, IExtensionInfo, IExtensionManagementService, IGalleryExtension, ILocalExtension, InstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { areSameExtensions, getGalleryExtensionId, getIdAndVersion } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { ExtensionType, EXTENSION_CATEGORIES, IExtensionManifest } from 'vs/platform/extensions/common/extensions';\nimport { ILogger } from 'vs/platform/log/common/log';\n\n\nconst notFound = (id: string) => localize('notFound', \"Extension '{0}' not found.\", id);\nconst useId = localize('useId', \"Make sure you use the full extension ID, including the publisher, e.g.: {0}\", 'ms-dotnettools.csharp');\n\n\nfunction getId(manifest: IExtensionManifest, withVersion?: boolean): string {\n\tif (withVersion) {\n\t\treturn `${manifest.publisher}.${manifest.name}@${manifest.version}`;\n\t} else {\n\t\treturn `${manifest.publisher}.${manifest.name}`;\n\t}\n}\n\ntype InstallVSIXInfo = { vsix: URI; installOptions: InstallOptions };\ntype InstallExtensionInfo = { id: string; version?: string; installOptions: InstallOptions };\n\nexport class ExtensionManagementCLI {\n\n\tconstructor(\n\t\tprotected readonly logger: ILogger,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t) { }\n\n\tprotected get location(): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic async listExtensions(showVersions: boolean, category?: string, profileLocation?: URI): Promise<void> {\n\t\tlet extensions = await this.extensionManagementService.getInstalled(ExtensionType.User, profileLocation);\n\t\tconst categories = EXTENSION_CATEGORIES.map(c => c.toLowerCase());\n\t\tif (category && category !== '') {\n\t\t\tif (categories.indexOf(category.toLowerCase()) < 0) {\n\t\t\t\tthis.logger.info('Invalid category please enter a valid category. To list valid categories run --category without a category specified');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\textensions = extensions.filter(e => {\n\t\t\t\tif (e.manifest.categories) {\n\t\t\t\t\tconst lowerCaseCategories: string[] = e.manifest.categories.map(c => c.toLowerCase());\n\t\t\t\t\treturn lowerCaseCategories.indexOf(category.toLowerCase()) > -1;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t} else if (category === '') {\n\t\t\tthis.logger.info('Possible Categories: ');\n\t\t\tcategories.forEach(category => {\n\t\t\t\tthis.logger.info(category);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (this.location) {\n\t\t\tthis.logger.info(localize('listFromLocation', \"Extensions installed on {0}:\", this.location));\n\t\t}\n\n\t\textensions = extensions.sort((e1, e2) => e1.identifier.id.localeCompare(e2.identifier.id));\n\t\tlet lastId: string | undefined = undefined;\n\t\tfor (const extension of extensions) {\n\t\t\tif (lastId !== extension.identifier.id) {\n\t\t\t\tlastId = extension.identifier.id;\n\t\t\t\tthis.logger.info(getId(extension.manifest, showVersions));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async installExtensions(extensions: (string | URI)[], builtinExtensions: (string | URI)[], installOptions: InstallOptions, force: boolean): Promise<void> {\n\t\tconst failed: string[] = [];\n\n\t\ttry {\n\t\t\tconst installedExtensionsManifests: IExtensionManifest[] = [];\n\t\t\tif (extensions.length) {\n\t\t\t\tthis.logger.info(this.location ? localize('installingExtensionsOnLocation', \"Installing extensions on {0}...\", this.location) : localize('installingExtensions', \"Installing extensions...\"));\n\t\t\t}\n\n\t\t\tconst installVSIXInfos: InstallVSIXInfo[] = [];\n\t\t\tlet installExtensionInfos: InstallExtensionInfo[] = [];\n\t\t\tconst addInstallExtensionInfo = (id: string, version: string | undefined, isBuiltin: boolean) => {\n\t\t\t\tinstallExtensionInfos.push({ id, version: version !== 'prerelease' ? version : undefined, installOptions: { ...installOptions, isBuiltin, installPreReleaseVersion: version === 'prerelease' || installOptions.installPreReleaseVersion } });\n\t\t\t};\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (extension instanceof URI) {\n\t\t\t\t\tinstallVSIXInfos.push({ vsix: extension, installOptions });\n\t\t\t\t} else {\n\t\t\t\t\tconst [id, version] = getIdAndVersion(extension);\n\t\t\t\t\taddInstallExtensionInfo(id, version, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of builtinExtensions) {\n\t\t\t\tif (extension instanceof URI) {\n\t\t\t\t\tinstallVSIXInfos.push({ vsix: extension, installOptions: { ...installOptions, isBuiltin: true, donotIncludePackAndDependencies: true } });\n\t\t\t\t} else {\n\t\t\t\t\tconst [id, version] = getIdAndVersion(extension);\n\t\t\t\t\taddInstallExtensionInfo(id, version, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst installed = await this.extensionManagementService.getInstalled(ExtensionType.User, installOptions.profileLocation);\n\n\t\t\tif (installVSIXInfos.length) {\n\t\t\t\tawait Promise.all(installVSIXInfos.map(async ({ vsix, installOptions }) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst manifest = await this.installVSIX(vsix, installOptions, force, installed);\n\t\t\t\t\t\tif (manifest) {\n\t\t\t\t\t\t\tinstalledExtensionsManifests.push(manifest);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis.logger.error(err);\n\t\t\t\t\t\tfailed.push(vsix.toString());\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tif (installExtensionInfos.length) {\n\t\t\t\tinstallExtensionInfos = installExtensionInfos.filter(({ id, version }) => {\n\t\t\t\t\tconst installedExtension = installed.find(i => areSameExtensions(i.identifier, { id }));\n\t\t\t\t\tif (installedExtension) {\n\t\t\t\t\t\tif (!force && (!version || (version === 'prerelease' && installedExtension.preRelease))) {\n\t\t\t\t\t\t\tthis.logger.info(localize('alreadyInstalled-checkAndUpdate', \"Extension '{0}' v{1} is already installed. Use '--force' option to update to latest version or provide '@<version>' to install a specific version, for example: '{2}@1.2.3'.\", id, installedExtension.manifest.version, id));\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (version && installedExtension.manifest.version === version) {\n\t\t\t\t\t\t\tthis.logger.info(localize('alreadyInstalled', \"Extension '{0}' is already installed.\", `${id}@${version}`));\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t\tif (installExtensionInfos.length) {\n\t\t\t\t\tconst galleryExtensions = await this.getGalleryExtensions(installExtensionInfos);\n\t\t\t\t\tawait Promise.all(installExtensionInfos.map(async extensionInfo => {\n\t\t\t\t\t\tconst gallery = galleryExtensions.get(extensionInfo.id.toLowerCase());\n\t\t\t\t\t\tif (gallery) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst manifest = await this.installFromGallery(extensionInfo, gallery, installed);\n\t\t\t\t\t\t\t\tif (manifest) {\n\t\t\t\t\t\t\t\t\tinstalledExtensionsManifests.push(manifest);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\tthis.logger.error(err.message || err.stack || err);\n\t\t\t\t\t\t\t\tfailed.push(extensionInfo.id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logger.error(`${notFound(extensionInfo.version ? `${extensionInfo.id}@${extensionInfo.version}` : extensionInfo.id)}\\n${useId}`);\n\t\t\t\t\t\t\tfailed.push(extensionInfo.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logger.error(localize('error while installing extensions', \"Error while installing extensions: {0}\", getErrorMessage(error)));\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (failed.length) {\n\t\t\tthrow new Error(localize('installation failed', \"Failed Installing Extensions: {0}\", failed.join(', ')));\n\t\t}\n\t}\n\n\tprivate async installVSIX(vsix: URI, installOptions: InstallOptions, force: boolean, installedExtensions: ILocalExtension[]): Promise<IExtensionManifest | null> {\n\n\t\tconst manifest = await this.extensionManagementService.getManifest(vsix);\n\t\tif (!manifest) {\n\t\t\tthrow new Error('Invalid vsix');\n\t\t}\n\n\t\tconst valid = await this.validateVSIX(manifest, force, installOptions.profileLocation, installedExtensions);\n\t\tif (valid) {\n\t\t\ttry {\n\t\t\t\tawait this.extensionManagementService.install(vsix, installOptions);\n\t\t\t\tthis.logger.info(localize('successVsixInstall', \"Extension '{0}' was successfully installed.\", basename(vsix)));\n\t\t\t\treturn manifest;\n\t\t\t} catch (error) {\n\t\t\t\tif (isCancellationError(error)) {\n\t\t\t\t\tthis.logger.info(localize('cancelVsixInstall', \"Cancelled installing extension '{0}'.\", basename(vsix)));\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate async getGalleryExtensions(extensions: InstallExtensionInfo[]): Promise<Map<string, IGalleryExtension>> {\n\t\tconst galleryExtensions = new Map<string, IGalleryExtension>();\n\t\tconst preRelease = extensions.some(e => e.installOptions.installPreReleaseVersion);\n\t\tconst targetPlatform = await this.extensionManagementService.getTargetPlatform();\n\t\tconst extensionInfos: IExtensionInfo[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tif (EXTENSION_IDENTIFIER_REGEX.test(extension.id)) {\n\t\t\t\textensionInfos.push({ ...extension, preRelease });\n\t\t\t}\n\t\t}\n\t\tif (extensionInfos.length) {\n\t\t\tconst result = await this.extensionGalleryService.getExtensions(extensionInfos, { targetPlatform }, CancellationToken.None);\n\t\t\tfor (const extension of result) {\n\t\t\t\tgalleryExtensions.set(extension.identifier.id.toLowerCase(), extension);\n\t\t\t}\n\t\t}\n\t\treturn galleryExtensions;\n\t}\n\n\tprivate async installFromGallery({ id, version, installOptions }: InstallExtensionInfo, galleryExtension: IGalleryExtension, installed: ILocalExtension[]): Promise<IExtensionManifest | null> {\n\t\tconst manifest = await this.extensionGalleryService.getManifest(galleryExtension, CancellationToken.None);\n\t\tif (manifest && !this.validateExtensionKind(manifest)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst installedExtension = installed.find(e => areSameExtensions(e.identifier, galleryExtension.identifier));\n\t\tif (installedExtension) {\n\t\t\tif (galleryExtension.version === installedExtension.manifest.version) {\n\t\t\t\tthis.logger.info(localize('alreadyInstalled', \"Extension '{0}' is already installed.\", version ? `${id}@${version}` : id));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tthis.logger.info(localize('updateMessage', \"Updating the extension '{0}' to the version {1}\", id, galleryExtension.version));\n\t\t}\n\n\t\ttry {\n\t\t\tif (installOptions.isBuiltin) {\n\t\t\t\tthis.logger.info(version ? localize('installing builtin with version', \"Installing builtin extension '{0}' v{1}...\", id, version) : localize('installing builtin ', \"Installing builtin extension '{0}'...\", id));\n\t\t\t} else {\n\t\t\t\tthis.logger.info(version ? localize('installing with version', \"Installing extension '{0}' v{1}...\", id, version) : localize('installing', \"Installing extension '{0}'...\", id));\n\t\t\t}\n\n\t\t\tconst local = await this.extensionManagementService.installFromGallery(galleryExtension, { ...installOptions, installGivenVersion: !!version });\n\t\t\tthis.logger.info(localize('successInstall', \"Extension '{0}' v{1} was successfully installed.\", id, local.manifest.version));\n\t\t\treturn manifest;\n\t\t} catch (error) {\n\t\t\tif (isCancellationError(error)) {\n\t\t\t\tthis.logger.info(localize('cancelInstall', \"Cancelled installing extension '{0}'.\", id));\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected validateExtensionKind(_manifest: IExtensionManifest): boolean {\n\t\treturn true;\n\t}\n\n\tprivate async validateVSIX(manifest: IExtensionManifest, force: boolean, profileLocation: URI | undefined, installedExtensions: ILocalExtension[]): Promise<boolean> {\n\t\tif (!force) {\n\t\t\tconst extensionIdentifier = { id: getGalleryExtensionId(manifest.publisher, manifest.name) };\n\t\t\tconst newer = installedExtensions.find(local => areSameExtensions(extensionIdentifier, local.identifier) && gt(local.manifest.version, manifest.version));\n\t\t\tif (newer) {\n\t\t\t\tthis.logger.info(localize('forceDowngrade', \"A newer version of extension '{0}' v{1} is already installed. Use '--force' option to downgrade to older version.\", newer.identifier.id, newer.manifest.version, manifest.version));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn this.validateExtensionKind(manifest);\n\t}\n\n\tpublic async uninstallExtensions(extensions: (string | URI)[], force: boolean, profileLocation?: URI): Promise<void> {\n\t\tconst getExtensionId = async (extensionDescription: string | URI): Promise<string> => {\n\t\t\tif (extensionDescription instanceof URI) {\n\t\t\t\tconst manifest = await this.extensionManagementService.getManifest(extensionDescription);\n\t\t\t\treturn getId(manifest);\n\t\t\t}\n\t\t\treturn extensionDescription;\n\t\t};\n\n\t\tconst uninstalledExtensions: ILocalExtension[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tconst id = await getExtensionId(extension);\n\t\t\tconst installed = await this.extensionManagementService.getInstalled(undefined, profileLocation);\n\t\t\tconst extensionsToUninstall = installed.filter(e => areSameExtensions(e.identifier, { id }));\n\t\t\tif (!extensionsToUninstall.length) {\n\t\t\t\tthrow new Error(`${this.notInstalled(id)}\\n${useId}`);\n\t\t\t}\n\t\t\tif (extensionsToUninstall.some(e => e.type === ExtensionType.System)) {\n\t\t\t\tthis.logger.info(localize('builtin', \"Extension '{0}' is a Built-in extension and cannot be uninstalled\", id));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!force && extensionsToUninstall.some(e => e.isBuiltin)) {\n\t\t\t\tthis.logger.info(localize('forceUninstall', \"Extension '{0}' is marked as a Built-in extension by user. Please use '--force' option to uninstall it.\", id));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.logger.info(localize('uninstalling', \"Uninstalling {0}...\", id));\n\t\t\tfor (const extensionToUninstall of extensionsToUninstall) {\n\t\t\t\tawait this.extensionManagementService.uninstall(extensionToUninstall, { profileLocation });\n\t\t\t\tuninstalledExtensions.push(extensionToUninstall);\n\t\t\t}\n\n\t\t\tif (this.location) {\n\t\t\t\tthis.logger.info(localize('successUninstallFromLocation', \"Extension '{0}' was successfully uninstalled from {1}!\", id, this.location));\n\t\t\t} else {\n\t\t\t\tthis.logger.info(localize('successUninstall', \"Extension '{0}' was successfully uninstalled!\", id));\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic async locateExtension(extensions: string[]): Promise<void> {\n\t\tconst installed = await this.extensionManagementService.getInstalled();\n\t\textensions.forEach(e => {\n\t\t\tinstalled.forEach(i => {\n\t\t\t\tif (i.identifier.id === e) {\n\t\t\t\t\tif (i.location.scheme === Schemas.file) {\n\t\t\t\t\t\tthis.logger.info(i.location.fsPath);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate notInstalled(id: string) {\n\t\treturn this.location ? localize('notInstalleddOnLocation', \"Extension '{0}' is not installed on {1}.\", id, this.location) : localize('notInstalled', \"Extension '{0}' is not installed.\", id);\n\t}\n\n}\n"]}