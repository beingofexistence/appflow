{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/voiceRecognition/node/voiceRecognitionService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOnF,QAAA,IAAI,GAAuB,IAAA,mBAAG,EAAuC,yBAAyB,CAAC,CAAC;IAmBtG,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YAC+B,CAAe,EACX,CAAmB;YADvB,MAAC,GAAD,CAAC,CAAc;YACX,MAAC,GAAD,CAAC,CAAkB;QAClD,CAAC;QAEL,KAAK,CAAC,UAAU,CAAC,WAAyB,EAAE,YAA+B;YAC1E,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,uBAAuB;YAChF,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAc,OAAO,KAAK,QAAQ,EAAE;gBAC5D,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,sBAAsB,WAAW,CAAC,MAAM,wCAAwC,CAAC,CAAC;gBACxG,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;aACxD;YAED,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAEvB,IAAI;gBACH,MAAM,WAAW,GAQb,OAAO,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBAEzC,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;gBAC9C,YAAY,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC;gBAEpE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,UAAU,CAAC;oBACzC,YAAY,EAAE,KAAK;oBACnB,QAAQ,EAAE,EAAE;oBACZ,YAAY,EAAE,CAAC;oBACf,WAAW;iBACX,EAAE;oBACF,QAAQ,EAAE,IAAI;oBACd,MAAM,EAAE,eAAe,CAAC,MAAM;iBAC9B,CAAC,CAAC;gBAEH,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,sBAAsB,WAAW,CAAC,MAAM,YAAY,IAAI,WAAW,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,KAAK,CAAC,CAAC;gBAE/G,OAAO,IAAI,CAAC;aACZ;YAAC,OAAO,KAAK,EAAE;gBACf,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,sBAAsB,WAAW,CAAC,MAAM,oBAAoB,KAAK,WAAW,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,KAAK,CAAC,CAAC;gBAEzH,MAAM,KAAK,CAAC;aACZ;QACF,CAAC;KACD,CAAA;IAnDY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,SAAG,CAAA;QACH,WAAA,oBAAG,CAAA;OANO,IAAI,CAmDhB","file":"voiceRecognitionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport const IVoiceRecognitionService = createDecorator<IVoiceRecognitionService>('voiceRecognitionService');\n\nexport interface IVoiceRecognitionService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Given a buffer of audio data, attempts to\n\t * transcribe the spoken words into text.\n\t *\n\t * @param channelData the raw audio data obtained\n\t * from the microphone as uncompressed PCM data:\n\t * - 1 channel (mono)\n\t * - 16khz sampling rate\n\t * - 16bit sample size\n\t */\n\ttranscribe(channelData: Float32Array, cancellation: CancellationToken): Promise<string>;\n}\n\nexport class VoiceRecognitionService implements IVoiceRecognitionService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tasync transcribe(channelData: Float32Array, cancellation: CancellationToken): Promise<string> {\n\t\tconst modulePath = process.env.VSCODE_VOICE_MODULE_PATH; // TODO@bpasero package\n\t\tif (!modulePath || this.productService.quality === 'stable') {\n\t\t\tthis.logService.error(`[voice] transcribe(${channelData.length}): Voice recognition not yet supported`);\n\t\t\tthrow new Error('Voice recognition not yet supported!');\n\t\t}\n\n\t\tconst now = Date.now();\n\n\t\ttry {\n\t\t\tconst voiceModule: {\n\t\t\t\ttranscribe: (\n\t\t\t\t\taudioBuffer: { channelCount: 1; samplingRate: 16000; bitDepth: 16; channelData: Float32Array },\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tlanguage: string | 'auto';\n\t\t\t\t\t\tsignal: AbortSignal;\n\t\t\t\t\t}\n\t\t\t\t) => Promise<string>;\n\t\t\t} = require.__$__nodeRequire(modulePath);\n\n\t\t\tconst abortController = new AbortController();\n\t\t\tcancellation.onCancellationRequested(() => abortController.abort());\n\n\t\t\tconst text = await voiceModule.transcribe({\n\t\t\t\tsamplingRate: 16000,\n\t\t\t\tbitDepth: 16,\n\t\t\t\tchannelCount: 1,\n\t\t\t\tchannelData\n\t\t\t}, {\n\t\t\t\tlanguage: 'en',\n\t\t\t\tsignal: abortController.signal\n\t\t\t});\n\n\t\t\tthis.logService.info(`[voice] transcribe(${channelData.length}): Text \"${text}\", took ${Date.now() - now}ms)`);\n\n\t\t\treturn text;\n\t\t} catch (error) {\n\t\t\tthis.logService.error(`[voice] transcribe(${channelData.length}): Failed width \"${error}\", took ${Date.now() - now}ms)`);\n\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n"]}