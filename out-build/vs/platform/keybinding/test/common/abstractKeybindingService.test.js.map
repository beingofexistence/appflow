{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/keybinding/test/common/abstractKeybindingService.test.ts"],"names":[],"mappings":"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","file":"abstractKeybindingService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { createSimpleKeybinding, ResolvedKeybinding, KeyCodeChord, Keybinding } from 'vs/base/common/keybindings';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { OS } from 'vs/base/common/platform';\nimport Severity from 'vs/base/common/severity';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr, ContextKeyExpression, IContext, IContextKeyService, IContextKeyServiceTarget } from 'vs/platform/contextkey/common/contextkey';\nimport { AbstractKeybindingService } from 'vs/platform/keybinding/common/abstractKeybindingService';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { KeybindingResolver } from 'vs/platform/keybinding/common/keybindingResolver';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { USLayoutResolvedKeybinding } from 'vs/platform/keybinding/common/usLayoutResolvedKeybinding';\nimport { createUSLayoutResolvedKeybinding } from 'vs/platform/keybinding/test/common/keybindingsTestUtils';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { INotification, INotificationService, IPromptChoice, IPromptOptions, IStatusMessageOptions, NoOpNotification } from 'vs/platform/notification/common/notification';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\n\nfunction createContext(ctx: any) {\n\treturn {\n\t\tgetValue: (key: string) => {\n\t\t\treturn ctx[key];\n\t\t}\n\t};\n}\n\nsuite('AbstractKeybindingService', () => {\n\n\tclass TestKeybindingService extends AbstractKeybindingService {\n\t\tprivate _resolver: KeybindingResolver;\n\n\t\tconstructor(\n\t\t\tresolver: KeybindingResolver,\n\t\t\tcontextKeyService: IContextKeyService,\n\t\t\tcommandService: ICommandService,\n\t\t\tnotificationService: INotificationService\n\t\t) {\n\t\t\tsuper(contextKeyService, commandService, NullTelemetryService, notificationService, new NullLogService());\n\t\t\tthis._resolver = resolver;\n\t\t}\n\n\t\tprotected _getResolver(): KeybindingResolver {\n\t\t\treturn this._resolver;\n\t\t}\n\n\t\tprotected _documentHasFocus(): boolean {\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic resolveKeybinding(kb: Keybinding): ResolvedKeybinding[] {\n\t\t\treturn USLayoutResolvedKeybinding.resolveKeybinding(kb, OS);\n\t\t}\n\n\t\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding {\n\t\t\tconst chord = new KeyCodeChord(\n\t\t\t\tkeyboardEvent.ctrlKey,\n\t\t\t\tkeyboardEvent.shiftKey,\n\t\t\t\tkeyboardEvent.altKey,\n\t\t\t\tkeyboardEvent.metaKey,\n\t\t\t\tkeyboardEvent.keyCode\n\t\t\t).toKeybinding();\n\t\t\treturn this.resolveKeybinding(chord)[0];\n\t\t}\n\n\t\tpublic resolveUserBinding(userBinding: string): ResolvedKeybinding[] {\n\t\t\treturn [];\n\t\t}\n\n\t\tpublic testDispatch(kb: number): boolean {\n\t\t\tconst keybinding = createSimpleKeybinding(kb, OS);\n\t\t\treturn this._dispatch({\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: keybinding.ctrlKey,\n\t\t\t\tshiftKey: keybinding.shiftKey,\n\t\t\t\taltKey: keybinding.altKey,\n\t\t\t\tmetaKey: keybinding.metaKey,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: keybinding.keyCode,\n\t\t\t\tcode: null!\n\t\t\t}, null!);\n\t\t}\n\n\t\tpublic _dumpDebugInfo(): string {\n\t\t\treturn '';\n\t\t}\n\n\t\tpublic _dumpDebugInfoJSON(): string {\n\t\t\treturn '';\n\t\t}\n\n\t\tpublic registerSchemaContribution() {\n\t\t\t// noop\n\t\t}\n\t}\n\n\tlet createTestKeybindingService: (items: ResolvedKeybindingItem[], contextValue?: any) => TestKeybindingService = null!;\n\tlet currentContextValue: IContext | null = null;\n\tlet executeCommandCalls: { commandId: string; args: any[] }[] = null!;\n\tlet showMessageCalls: { sev: Severity; message: any }[] = null!;\n\tlet statusMessageCalls: string[] | null = null;\n\tlet statusMessageCallsDisposed: string[] | null = null;\n\n\tsetup(() => {\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\tcreateTestKeybindingService = (items: ResolvedKeybindingItem[]): TestKeybindingService => {\n\n\t\t\tconst contextKeyService: IContextKeyService = {\n\t\t\t\t_serviceBrand: undefined,\n\t\t\t\tonDidChangeContext: undefined!,\n\t\t\t\tbufferChangeEvents() { },\n\t\t\t\tcreateKey: undefined!,\n\t\t\t\tcontextMatchesRules: undefined!,\n\t\t\t\tgetContextKeyValue: undefined!,\n\t\t\t\tcreateScoped: undefined!,\n\t\t\t\tcreateOverlay: undefined!,\n\t\t\t\tgetContext: (target: IContextKeyServiceTarget): any => {\n\t\t\t\t\treturn currentContextValue;\n\t\t\t\t},\n\t\t\t\tupdateParent: () => { }\n\t\t\t};\n\n\t\t\tconst commandService: ICommandService = {\n\t\t\t\t_serviceBrand: undefined,\n\t\t\t\tonWillExecuteCommand: () => Disposable.None,\n\t\t\t\tonDidExecuteCommand: () => Disposable.None,\n\t\t\t\texecuteCommand: (commandId: string, ...args: any[]): Promise<any> => {\n\t\t\t\t\texecuteCommandCalls.push({\n\t\t\t\t\t\tcommandId: commandId,\n\t\t\t\t\t\targs: args\n\t\t\t\t\t});\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst notificationService: INotificationService = {\n\t\t\t\t_serviceBrand: undefined,\n\t\t\t\tdoNotDisturbMode: false,\n\t\t\t\tonDidAddNotification: undefined!,\n\t\t\t\tonDidRemoveNotification: undefined!,\n\t\t\t\tonDidChangeDoNotDisturbMode: undefined!,\n\t\t\t\tnotify: (notification: INotification) => {\n\t\t\t\t\tshowMessageCalls.push({ sev: notification.severity, message: notification.message });\n\t\t\t\t\treturn new NoOpNotification();\n\t\t\t\t},\n\t\t\t\tinfo: (message: any) => {\n\t\t\t\t\tshowMessageCalls.push({ sev: Severity.Info, message });\n\t\t\t\t\treturn new NoOpNotification();\n\t\t\t\t},\n\t\t\t\twarn: (message: any) => {\n\t\t\t\t\tshowMessageCalls.push({ sev: Severity.Warning, message });\n\t\t\t\t\treturn new NoOpNotification();\n\t\t\t\t},\n\t\t\t\terror: (message: any) => {\n\t\t\t\t\tshowMessageCalls.push({ sev: Severity.Error, message });\n\t\t\t\t\treturn new NoOpNotification();\n\t\t\t\t},\n\t\t\t\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions) {\n\t\t\t\t\tthrow new Error('not implemented');\n\t\t\t\t},\n\t\t\t\tstatus(message: string, options?: IStatusMessageOptions) {\n\t\t\t\t\tstatusMessageCalls!.push(message);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdispose: () => {\n\t\t\t\t\t\t\tstatusMessageCallsDisposed!.push(message);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst resolver = new KeybindingResolver(items, [], () => { });\n\n\t\t\treturn new TestKeybindingService(resolver, contextKeyService, commandService, notificationService);\n\t\t};\n\t});\n\n\tteardown(() => {\n\t\tcurrentContextValue = null;\n\t\texecuteCommandCalls = null!;\n\t\tshowMessageCalls = null!;\n\t\tcreateTestKeybindingService = null!;\n\t\tstatusMessageCalls = null;\n\t\tstatusMessageCallsDisposed = null;\n\t});\n\n\tfunction kbItem(keybinding: number | number[], command: string | null, when?: ContextKeyExpression): ResolvedKeybindingItem {\n\t\treturn new ResolvedKeybindingItem(\n\t\t\tcreateUSLayoutResolvedKeybinding(keybinding, OS),\n\t\t\tcommand,\n\t\t\tnull,\n\t\t\twhen,\n\t\t\ttrue,\n\t\t\tnull,\n\t\t\tfalse\n\t\t);\n\t}\n\n\tfunction toUsLabel(keybinding: number): string {\n\t\treturn createUSLayoutResolvedKeybinding(keybinding, OS)!.getLabel()!;\n\t}\n\n\tsuite('simple tests: single- and multi-chord keybindings are dispatched', () => {\n\n\t\ttest('a single-chord keybinding is dispatched correctly; this test makes sure the dispatch in general works before we test empty-string/null command ID', () => {\n\n\t\t\tconst key = KeyMod.CtrlCmd | KeyCode.KeyK;\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(key, 'myCommand'),\n\t\t\t]);\n\n\t\t\tcurrentContextValue = createContext({});\n\t\t\tconst shouldPreventDefault = kbService.testDispatch(key);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, ([{ commandId: \"myCommand\", args: [null] }]));\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tkbService.dispose();\n\t\t});\n\n\t\ttest('a multi-chord keybinding is dispatched correctly', () => {\n\n\t\t\tconst chord0 = KeyMod.CtrlCmd | KeyCode.KeyK;\n\t\t\tconst chord1 = KeyMod.CtrlCmd | KeyCode.KeyI;\n\t\t\tconst key = [chord0, chord1];\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(key, 'myCommand'),\n\t\t\t]);\n\n\t\t\tcurrentContextValue = createContext({});\n\n\t\t\tlet shouldPreventDefault = kbService.testDispatch(chord0);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tshouldPreventDefault = kbService.testDispatch(chord1);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, ([{ commandId: \"myCommand\", args: [null] }]));\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\n\t\t\tkbService.dispose();\n\t\t});\n\t});\n\n\tsuite('keybindings with empty-string/null command ID', () => {\n\n\t\ttest('a single-chord keybinding with an empty string command ID unbinds the keybinding (shouldPreventDefault = false)', () => {\n\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, 'myCommand'),\n\t\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, ''),\n\t\t\t]);\n\n\t\t\t// send Ctrl/Cmd + K\n\t\t\tcurrentContextValue = createContext({});\n\t\t\tconst shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, false);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tkbService.dispose();\n\t\t});\n\n\t\ttest('a single-chord keybinding with a null command ID unbinds the keybinding (shouldPreventDefault = false)', () => {\n\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, 'myCommand'),\n\t\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, null),\n\t\t\t]);\n\n\t\t\t// send Ctrl/Cmd + K\n\t\t\tcurrentContextValue = createContext({});\n\t\t\tconst shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, false);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tkbService.dispose();\n\t\t});\n\n\t\ttest('a multi-chord keybinding with an empty-string command ID keeps the keybinding (shouldPreventDefault = true)', () => {\n\n\t\t\tconst chord0 = KeyMod.CtrlCmd | KeyCode.KeyK;\n\t\t\tconst chord1 = KeyMod.CtrlCmd | KeyCode.KeyI;\n\t\t\tconst key = [chord0, chord1];\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(key, 'myCommand'),\n\t\t\t\tkbItem(key, ''),\n\t\t\t]);\n\n\t\t\tcurrentContextValue = createContext({});\n\n\t\t\tlet shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyI);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`, `The key combination (${toUsLabel(chord0)}, ${toUsLabel(chord1)}) is not a command.`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\n\t\t\tkbService.dispose();\n\t\t});\n\n\t\ttest('a multi-chord keybinding with a null command ID keeps the keybinding (shouldPreventDefault = true)', () => {\n\n\t\t\tconst chord0 = KeyMod.CtrlCmd | KeyCode.KeyK;\n\t\t\tconst chord1 = KeyMod.CtrlCmd | KeyCode.KeyI;\n\t\t\tconst key = [chord0, chord1];\n\t\t\tconst kbService = createTestKeybindingService([\n\t\t\t\tkbItem(key, 'myCommand'),\n\t\t\t\tkbItem(key, null),\n\t\t\t]);\n\n\t\t\tcurrentContextValue = createContext({});\n\n\t\t\tlet shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\n\t\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyI);\n\t\t\tassert.deepStrictEqual(shouldPreventDefault, true);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`, `The key combination (${toUsLabel(chord0)}, ${toUsLabel(chord1)}) is not a command.`]));\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, ([`(${toUsLabel(chord0)}) was pressed. Waiting for second key of chord...`]));\n\n\t\t\tkbService.dispose();\n\t\t});\n\n\t});\n\n\ttest('issue #16498: chord mode is quit for invalid chords', () => {\n\n\t\tconst kbService = createTestKeybindingService([\n\t\t\tkbItem(KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyX), 'chordCommand'),\n\t\t\tkbItem(KeyCode.Backspace, 'simpleCommand'),\n\t\t]);\n\n\t\t// send Ctrl/Cmd + K\n\t\tlet shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, [\n\t\t\t`(${toUsLabel(KeyMod.CtrlCmd | KeyCode.KeyK)}) was pressed. Waiting for second key of chord...`\n\t\t]);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send backspace\n\t\tshouldPreventDefault = kbService.testDispatch(KeyCode.Backspace);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, [\n\t\t\t`The key combination (${toUsLabel(KeyMod.CtrlCmd | KeyCode.KeyK)}, ${toUsLabel(KeyCode.Backspace)}) is not a command.`\n\t\t]);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, [\n\t\t\t`(${toUsLabel(KeyMod.CtrlCmd | KeyCode.KeyK)}) was pressed. Waiting for second key of chord...`\n\t\t]);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send backspace\n\t\tshouldPreventDefault = kbService.testDispatch(KeyCode.Backspace);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'simpleCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\tkbService.dispose();\n\t});\n\n\ttest('issue #16833: Keybinding service should not testDispatch on modifier keys', () => {\n\n\t\tconst kbService = createTestKeybindingService([\n\t\t\tkbItem(KeyCode.Ctrl, 'nope'),\n\t\t\tkbItem(KeyCode.Meta, 'nope'),\n\t\t\tkbItem(KeyCode.Alt, 'nope'),\n\t\t\tkbItem(KeyCode.Shift, 'nope'),\n\n\t\t\tkbItem(KeyMod.CtrlCmd, 'nope'),\n\t\t\tkbItem(KeyMod.WinCtrl, 'nope'),\n\t\t\tkbItem(KeyMod.Alt, 'nope'),\n\t\t\tkbItem(KeyMod.Shift, 'nope'),\n\t\t]);\n\n\t\tfunction assertIsIgnored(keybinding: number): void {\n\t\t\tconst shouldPreventDefault = kbService.testDispatch(keybinding);\n\t\t\tassert.strictEqual(shouldPreventDefault, false);\n\t\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\t\texecuteCommandCalls = [];\n\t\t\tshowMessageCalls = [];\n\t\t\tstatusMessageCalls = [];\n\t\t\tstatusMessageCallsDisposed = [];\n\t\t}\n\n\t\tassertIsIgnored(KeyCode.Ctrl);\n\t\tassertIsIgnored(KeyCode.Meta);\n\t\tassertIsIgnored(KeyCode.Alt);\n\t\tassertIsIgnored(KeyCode.Shift);\n\n\t\tassertIsIgnored(KeyMod.CtrlCmd);\n\t\tassertIsIgnored(KeyMod.WinCtrl);\n\t\tassertIsIgnored(KeyMod.Alt);\n\t\tassertIsIgnored(KeyMod.Shift);\n\n\t\tkbService.dispose();\n\t});\n\n\ttest('can trigger command that is sharing keybinding with chord', () => {\n\n\t\tconst kbService = createTestKeybindingService([\n\t\t\tkbItem(KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyX), 'chordCommand'),\n\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, 'simpleCommand', ContextKeyExpr.has('key1')),\n\t\t]);\n\n\n\t\t// send Ctrl/Cmd + K\n\t\tcurrentContextValue = createContext({\n\t\t\tkey1: true\n\t\t});\n\t\tlet shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'simpleCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send Ctrl/Cmd + K\n\t\tcurrentContextValue = createContext({});\n\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, [\n\t\t\t`(${toUsLabel(KeyMod.CtrlCmd | KeyCode.KeyK)}) was pressed. Waiting for second key of chord...`\n\t\t]);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send Ctrl/Cmd + X\n\t\tcurrentContextValue = createContext({});\n\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyX);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'chordCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, [\n\t\t\t`(${toUsLabel(KeyMod.CtrlCmd | KeyCode.KeyK)}) was pressed. Waiting for second key of chord...`\n\t\t]);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\tkbService.dispose();\n\t});\n\n\ttest('cannot trigger chord if command is overwriting', () => {\n\n\t\tconst kbService = createTestKeybindingService([\n\t\t\tkbItem(KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyX), 'chordCommand', ContextKeyExpr.has('key1')),\n\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, 'simpleCommand'),\n\t\t]);\n\n\n\t\t// send Ctrl/Cmd + K\n\t\tcurrentContextValue = createContext({});\n\t\tlet shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'simpleCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send Ctrl/Cmd + K\n\t\tcurrentContextValue = createContext({\n\t\t\tkey1: true\n\t\t});\n\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, true);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'simpleCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\t// send Ctrl/Cmd + X\n\t\tcurrentContextValue = createContext({\n\t\t\tkey1: true\n\t\t});\n\t\tshouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyX);\n\t\tassert.strictEqual(shouldPreventDefault, false);\n\t\tassert.deepStrictEqual(executeCommandCalls, []);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\tkbService.dispose();\n\t});\n\n\ttest('can have spying command', () => {\n\n\t\tconst kbService = createTestKeybindingService([\n\t\t\tkbItem(KeyMod.CtrlCmd | KeyCode.KeyK, '^simpleCommand'),\n\t\t]);\n\n\t\t// send Ctrl/Cmd + K\n\t\tcurrentContextValue = createContext({});\n\t\tconst shouldPreventDefault = kbService.testDispatch(KeyMod.CtrlCmd | KeyCode.KeyK);\n\t\tassert.strictEqual(shouldPreventDefault, false);\n\t\tassert.deepStrictEqual(executeCommandCalls, [{\n\t\t\tcommandId: 'simpleCommand',\n\t\t\targs: [null]\n\t\t}]);\n\t\tassert.deepStrictEqual(showMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCalls, []);\n\t\tassert.deepStrictEqual(statusMessageCallsDisposed, []);\n\t\texecuteCommandCalls = [];\n\t\tshowMessageCalls = [];\n\t\tstatusMessageCalls = [];\n\t\tstatusMessageCallsDisposed = [];\n\n\t\tkbService.dispose();\n\t});\n});\n"]}