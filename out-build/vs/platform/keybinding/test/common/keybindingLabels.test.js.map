{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/keybinding/test/common/keybindingLabels.test.ts"],"names":[],"mappings":"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","file":"keybindingLabels.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { createUSLayoutResolvedKeybinding } from 'vs/platform/keybinding/test/common/keybindingsTestUtils';\n\nsuite('KeybindingLabels', () => {\n\n\tfunction assertUSLabel(OS: OperatingSystem, keybinding: number, expected: string): void {\n\t\tconst usResolvedKeybinding = createUSLayoutResolvedKeybinding(keybinding, OS)!;\n\t\tassert.strictEqual(usResolvedKeybinding.getLabel(), expected);\n\t}\n\n\ttest('Windows US label', () => {\n\t\t// no modifier\n\t\tassertUSLabel(OperatingSystem.Windows, KeyCode.KeyA, 'A');\n\n\t\t// one modifier\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyCode.KeyA, 'Ctrl+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyCode.KeyA, 'Shift+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Alt | KeyCode.KeyA, 'Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.WinCtrl | KeyCode.KeyA, 'Windows+A');\n\n\t\t// two modifiers\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA, 'Ctrl+Shift+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyA, 'Ctrl+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, 'Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, 'Shift+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Alt+Windows+A');\n\n\t\t// three modifiers\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, 'Ctrl+Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Alt+Windows+A');\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Shift+Alt+Windows+A');\n\n\t\t// four modifiers\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Alt+Windows+A');\n\n\t\t// chord\n\t\tassertUSLabel(OperatingSystem.Windows, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), 'Ctrl+A Ctrl+B');\n\t});\n\n\ttest('Linux US label', () => {\n\t\t// no modifier\n\t\tassertUSLabel(OperatingSystem.Linux, KeyCode.KeyA, 'A');\n\n\t\t// one modifier\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyCode.KeyA, 'Ctrl+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyCode.KeyA, 'Shift+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Alt | KeyCode.KeyA, 'Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.WinCtrl | KeyCode.KeyA, 'Super+A');\n\n\t\t// two modifiers\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA, 'Ctrl+Shift+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyA, 'Ctrl+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, 'Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, 'Shift+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Alt+Super+A');\n\n\t\t// three modifiers\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, 'Ctrl+Shift+Alt+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Alt+Super+A');\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Shift+Alt+Super+A');\n\n\t\t// four modifiers\n\t\tassertUSLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Alt+Super+A');\n\n\t\t// chord\n\t\tassertUSLabel(OperatingSystem.Linux, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), 'Ctrl+A Ctrl+B');\n\t});\n\n\ttest('Mac US label', () => {\n\t\t// no modifier\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.KeyA, 'A');\n\n\t\t// one modifier\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyCode.KeyA, '⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyCode.KeyA, '⇧A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Alt | KeyCode.KeyA, '⌥A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.WinCtrl | KeyCode.KeyA, '⌃A');\n\n\t\t// two modifiers\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA, '⇧⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyA, '⌥⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyA, '⌃⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, '⇧⌥A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, '⌃⇧A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, '⌃⌥A');\n\n\t\t// three modifiers\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, '⇧⌥⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, '⌃⇧⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, '⌃⌥⌘A');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, '⌃⇧⌥A');\n\n\t\t// four modifiers\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, '⌃⇧⌥⌘A');\n\n\t\t// chord\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), '⌘A ⌘B');\n\n\t\t// special keys\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.LeftArrow, '←');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.UpArrow, '↑');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.RightArrow, '→');\n\t\tassertUSLabel(OperatingSystem.Macintosh, KeyCode.DownArrow, '↓');\n\t});\n\n\ttest('Aria label', () => {\n\t\tfunction assertAriaLabel(OS: OperatingSystem, keybinding: number, expected: string): void {\n\t\t\tconst usResolvedKeybinding = createUSLayoutResolvedKeybinding(keybinding, OS)!;\n\t\t\tassert.strictEqual(usResolvedKeybinding.getAriaLabel(), expected);\n\t\t}\n\n\t\tassertAriaLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Control+Shift+Alt+Windows+A');\n\t\tassertAriaLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Control+Shift+Alt+Super+A');\n\t\tassertAriaLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Control+Shift+Option+Command+A');\n\t});\n\n\ttest('Electron Accelerator label', () => {\n\t\tfunction assertElectronAcceleratorLabel(OS: OperatingSystem, keybinding: number, expected: string | null): void {\n\t\t\tconst usResolvedKeybinding = createUSLayoutResolvedKeybinding(keybinding, OS)!;\n\t\t\tassert.strictEqual(usResolvedKeybinding.getElectronAccelerator(), expected);\n\t\t}\n\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Alt+Super+A');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Alt+Super+A');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'Ctrl+Shift+Alt+Cmd+A');\n\n\t\t// electron cannot handle chords\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), null);\n\n\t\t// electron cannot handle numpad keys\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyCode.Numpad1, null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyCode.Numpad1, null);\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.Numpad1, null);\n\n\t\t// special\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.LeftArrow, 'Left');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.UpArrow, 'Up');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.RightArrow, 'Right');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyCode.DownArrow, 'Down');\n\t});\n\n\ttest('User Settings label', () => {\n\t\tfunction assertElectronAcceleratorLabel(OS: OperatingSystem, keybinding: number, expected: string): void {\n\t\t\tconst usResolvedKeybinding = createUSLayoutResolvedKeybinding(keybinding, OS)!;\n\t\t\tassert.strictEqual(usResolvedKeybinding.getUserSettingsLabel(), expected);\n\t\t}\n\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'ctrl+shift+alt+win+a');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'ctrl+shift+alt+meta+a');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'ctrl+shift+alt+cmd+a');\n\n\t\t// electron cannot handle chords\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Windows, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), 'ctrl+a ctrl+b');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Linux, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), 'ctrl+a ctrl+b');\n\t\tassertElectronAcceleratorLabel(OperatingSystem.Macintosh, KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyB), 'cmd+a cmd+b');\n\t});\n\n\ttest('issue #91235: Do not end with a +', () => {\n\t\tassertUSLabel(OperatingSystem.Windows, KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Alt, 'Ctrl+Alt');\n\t});\n});\n"]}