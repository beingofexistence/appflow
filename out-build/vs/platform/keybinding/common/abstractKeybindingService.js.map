{"version":3,"sources":["vs/platform/keybinding/common/abstractKeybindingService.ts"],"names":[],"mappings":"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","file":"abstractKeybindingService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WorkbenchActionExecutedClassification, WorkbenchActionExecutedEvent } from 'vs/base/common/actions';\nimport * as arrays from 'vs/base/common/arrays';\nimport { IntervalTimer, TimeoutTimer } from 'vs/base/common/async';\nimport { illegalState } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IME } from 'vs/base/common/ime';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { Keybinding, ResolvedChord, ResolvedKeybinding, SingleModifierChord } from 'vs/base/common/keybindings';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport * as nls from 'vs/nls';\n\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IContextKeyService, IContextKeyServiceTarget } from 'vs/platform/contextkey/common/contextkey';\nimport { IKeybindingService, IKeyboardEvent, KeybindingsSchemaContribution } from 'vs/platform/keybinding/common/keybinding';\nimport { ResolutionResult, KeybindingResolver, ResultKind, NoMatchingKb } from 'vs/platform/keybinding/common/keybindingResolver';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\ninterface CurrentChord {\n\tkeypress: string;\n\tlabel: string | null;\n}\n\nconst HIGH_FREQ_COMMANDS = /^(cursor|delete|undo|redo|tab|editor\\.action\\.clipboard)/;\n\nexport abstract class AbstractKeybindingService extends Disposable implements IKeybindingService {\n\n\tpublic _serviceBrand: undefined;\n\n\tprotected readonly _onDidUpdateKeybindings: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidUpdateKeybindings(): Event<void> {\n\t\treturn this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : Event.None; // Sinon stubbing walks properties on prototype\n\t}\n\n\t/** recently recorded keypresses that can trigger a keybinding;\n\t *\n\t * example: say, there's \"cmd+k cmd+i\" keybinding;\n\t * the user pressed \"cmd+k\" (before they press \"cmd+i\")\n\t * \"cmd+k\" would be stored in this array, when on pressing \"cmd+i\", the service\n\t * would invoke the command bound by the keybinding\n\t */\n\tprivate _currentChords: CurrentChord[];\n\n\tprivate _currentChordChecker: IntervalTimer;\n\tprivate _currentChordStatusMessage: IDisposable | null;\n\tprivate _ignoreSingleModifiers: KeybindingModifierSet;\n\tprivate _currentSingleModifier: SingleModifierChord | null;\n\tprivate _currentSingleModifierClearTimeout: TimeoutTimer;\n\n\tprotected _logging: boolean;\n\n\tpublic get inChordMode(): boolean {\n\t\treturn this._currentChords.length > 0;\n\t}\n\n\tconstructor(\n\t\tprivate _contextKeyService: IContextKeyService,\n\t\tprotected _commandService: ICommandService,\n\t\tprotected _telemetryService: ITelemetryService,\n\t\tprivate _notificationService: INotificationService,\n\t\tprotected _logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis._currentChords = [];\n\t\tthis._currentChordChecker = new IntervalTimer();\n\t\tthis._currentChordStatusMessage = null;\n\t\tthis._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n\t\tthis._currentSingleModifier = null;\n\t\tthis._currentSingleModifierClearTimeout = new TimeoutTimer();\n\t\tthis._logging = false;\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tprotected abstract _getResolver(): KeybindingResolver;\n\tprotected abstract _documentHasFocus(): boolean;\n\tpublic abstract resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[];\n\tpublic abstract resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding;\n\tpublic abstract resolveUserBinding(userBinding: string): ResolvedKeybinding[];\n\tpublic abstract registerSchemaContribution(contribution: KeybindingsSchemaContribution): void;\n\tpublic abstract _dumpDebugInfo(): string;\n\tpublic abstract _dumpDebugInfoJSON(): string;\n\n\tpublic getDefaultKeybindingsContent(): string {\n\t\treturn '';\n\t}\n\n\tpublic toggleLogging(): boolean {\n\t\tthis._logging = !this._logging;\n\t\treturn this._logging;\n\t}\n\n\tprotected _log(str: string): void {\n\t\tif (this._logging) {\n\t\t\tthis._logService.info(`[KeybindingService]: ${str}`);\n\t\t}\n\t}\n\n\tpublic getDefaultKeybindings(): readonly ResolvedKeybindingItem[] {\n\t\treturn this._getResolver().getDefaultKeybindings();\n\t}\n\n\tpublic getKeybindings(): readonly ResolvedKeybindingItem[] {\n\t\treturn this._getResolver().getKeybindings();\n\t}\n\n\tpublic customKeybindingsCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic lookupKeybindings(commandId: string): ResolvedKeybinding[] {\n\t\treturn arrays.coalesce(\n\t\t\tthis._getResolver().lookupKeybindings(commandId).map(item => item.resolvedKeybinding)\n\t\t);\n\t}\n\n\tpublic lookupKeybinding(commandId: string, context?: IContextKeyService): ResolvedKeybinding | undefined {\n\t\tconst result = this._getResolver().lookupPrimaryKeybinding(commandId, context || this._contextKeyService);\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn result.resolvedKeybinding;\n\t}\n\n\tpublic dispatchEvent(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\treturn this._dispatch(e, target);\n\t}\n\n\t// TODO@ulugbekna: update namings to align with `_doDispatch`\n\t// TODO@ulugbekna: this fn doesn't seem to take into account single-modifier keybindings, eg `shift shift`\n\tpublic softDispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): ResolutionResult {\n\t\tthis._log(`/ Soft dispatching keyboard event`);\n\t\tconst keybinding = this.resolveKeyboardEvent(e);\n\t\tif (keybinding.hasMultipleChords()) {\n\t\t\tconsole.warn('keyboard event should not be mapped to multiple chords');\n\t\t\treturn NoMatchingKb;\n\t\t}\n\t\tconst [firstChord,] = keybinding.getDispatchChords();\n\t\tif (firstChord === null) {\n\t\t\t// cannot be dispatched, probably only modifier keys\n\t\t\tthis._log(`\\\\ Keyboard event cannot be dispatched`);\n\t\t\treturn NoMatchingKb;\n\t\t}\n\n\t\tconst contextValue = this._contextKeyService.getContext(target);\n\t\tconst currentChords = this._currentChords.map((({ keypress }) => keypress));\n\t\treturn this._getResolver().resolve(contextValue, currentChords, firstChord);\n\t}\n\n\tprivate _scheduleLeaveChordMode(): void {\n\t\tconst chordLastInteractedTime = Date.now();\n\t\tthis._currentChordChecker.cancelAndSet(() => {\n\n\t\t\tif (!this._documentHasFocus()) {\n\t\t\t\t// Focus has been lost => leave chord mode\n\t\t\t\tthis._leaveChordMode();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Date.now() - chordLastInteractedTime > 5000) {\n\t\t\t\t// 5 seconds elapsed => leave chord mode\n\t\t\t\tthis._leaveChordMode();\n\t\t\t}\n\n\t\t}, 500);\n\t}\n\n\tprivate _expectAnotherChord(firstChord: string, keypressLabel: string | null): void {\n\n\t\tthis._currentChords.push({ keypress: firstChord, label: keypressLabel });\n\n\t\tswitch (this._currentChords.length) {\n\t\t\tcase 0:\n\t\t\t\tthrow illegalState('impossible');\n\t\t\tcase 1:\n\t\t\t\t// TODO@ulugbekna: revise this message and the one below (at least, fix terminology)\n\t\t\t\tthis._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', \"({0}) was pressed. Waiting for second key of chord...\", keypressLabel));\n\t\t\t\tbreak;\n\t\t\tdefault: {\n\t\t\t\tconst fullKeypressLabel = this._currentChords.map(({ label }) => label).join(', ');\n\t\t\t\tthis._currentChordStatusMessage = this._notificationService.status(nls.localize('next.chord', \"({0}) was pressed. Waiting for next key of chord...\", fullKeypressLabel));\n\t\t\t}\n\t\t}\n\n\t\tthis._scheduleLeaveChordMode();\n\n\t\tif (IME.enabled) {\n\t\t\tIME.disable();\n\t\t}\n\t}\n\n\tprivate _leaveChordMode(): void {\n\t\tif (this._currentChordStatusMessage) {\n\t\t\tthis._currentChordStatusMessage.dispose();\n\t\t\tthis._currentChordStatusMessage = null;\n\t\t}\n\t\tthis._currentChordChecker.cancel();\n\t\tthis._currentChords = [];\n\t\tIME.enable();\n\t}\n\n\tpublic dispatchByUserSettingsLabel(userSettingsLabel: string, target: IContextKeyServiceTarget): void {\n\t\tthis._log(`/ Dispatching keybinding triggered via menu entry accelerator - ${userSettingsLabel}`);\n\t\tconst keybindings = this.resolveUserBinding(userSettingsLabel);\n\t\tif (keybindings.length === 0) {\n\t\t\tthis._log(`\\\\ Could not resolve - ${userSettingsLabel}`);\n\t\t} else {\n\t\t\tthis._doDispatch(keybindings[0], target, /*isSingleModiferChord*/false);\n\t\t}\n\t}\n\n\tprotected _dispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\treturn this._doDispatch(this.resolveKeyboardEvent(e), target, /*isSingleModiferChord*/false);\n\t}\n\n\tprotected _singleModifierDispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean {\n\t\tconst keybinding = this.resolveKeyboardEvent(e);\n\t\tconst [singleModifier,] = keybinding.getSingleModifierDispatchChords();\n\n\t\tif (singleModifier) {\n\n\t\t\tif (this._ignoreSingleModifiers.has(singleModifier)) {\n\t\t\t\tthis._log(`+ Ignoring single modifier ${singleModifier} due to it being pressed together with other keys.`);\n\t\t\t\tthis._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n\t\t\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\t\t\tthis._currentSingleModifier = null;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis._ignoreSingleModifiers = KeybindingModifierSet.EMPTY;\n\n\t\t\tif (this._currentSingleModifier === null) {\n\t\t\t\t// we have a valid `singleModifier`, store it for the next keyup, but clear it in 300ms\n\t\t\t\tthis._log(`+ Storing single modifier for possible chord ${singleModifier}.`);\n\t\t\t\tthis._currentSingleModifier = singleModifier;\n\t\t\t\tthis._currentSingleModifierClearTimeout.cancelAndSet(() => {\n\t\t\t\t\tthis._log(`+ Clearing single modifier due to 300ms elapsed.`);\n\t\t\t\t\tthis._currentSingleModifier = null;\n\t\t\t\t}, 300);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (singleModifier === this._currentSingleModifier) {\n\t\t\t\t// bingo!\n\t\t\t\tthis._log(`/ Dispatching single modifier chord ${singleModifier} ${singleModifier}`);\n\t\t\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\t\t\tthis._currentSingleModifier = null;\n\t\t\t\treturn this._doDispatch(keybinding, target, /*isSingleModiferChord*/true);\n\t\t\t}\n\n\t\t\tthis._log(`+ Clearing single modifier due to modifier mismatch: ${this._currentSingleModifier} ${singleModifier}`);\n\t\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\t\tthis._currentSingleModifier = null;\n\t\t\treturn false;\n\t\t}\n\n\t\t// When pressing a modifier and holding it pressed with any other modifier or key combination,\n\t\t// the pressed modifiers should no longer be considered for single modifier dispatch.\n\t\tconst [firstChord,] = keybinding.getChords();\n\t\tthis._ignoreSingleModifiers = new KeybindingModifierSet(firstChord);\n\n\t\tif (this._currentSingleModifier !== null) {\n\t\t\tthis._log(`+ Clearing single modifier due to other key up.`);\n\t\t}\n\t\tthis._currentSingleModifierClearTimeout.cancel();\n\t\tthis._currentSingleModifier = null;\n\t\treturn false;\n\t}\n\n\tprivate _doDispatch(userKeypress: ResolvedKeybinding, target: IContextKeyServiceTarget, isSingleModiferChord = false): boolean {\n\t\tlet shouldPreventDefault = false;\n\n\t\tif (userKeypress.hasMultipleChords()) { // warn - because user can press a single chord at a time\n\t\t\tconsole.warn('Unexpected keyboard event mapped to multiple chords');\n\t\t\treturn false;\n\t\t}\n\n\t\tlet userPressedChord: string | null = null;\n\t\tlet currentChords: string[] | null = null;\n\n\t\tif (isSingleModiferChord) {\n\t\t\t// The keybinding is the second keypress of a single modifier chord, e.g. \"shift shift\".\n\t\t\t// A single modifier can only occur when the same modifier is pressed in short sequence,\n\t\t\t// hence we disregard `_currentChord` and use the same modifier instead.\n\t\t\tconst [dispatchKeyname,] = userKeypress.getSingleModifierDispatchChords();\n\t\t\tuserPressedChord = dispatchKeyname;\n\t\t\tcurrentChords = dispatchKeyname ? [dispatchKeyname] : []; // TODO@ulugbekna: in the `else` case we assign an empty array - make sure `resolve` can handle an empty array well\n\t\t} else {\n\t\t\t[userPressedChord,] = userKeypress.getDispatchChords();\n\t\t\tcurrentChords = this._currentChords.map(({ keypress }) => keypress);\n\t\t}\n\n\t\tif (userPressedChord === null) {\n\t\t\tthis._log(`\\\\ Keyboard event cannot be dispatched in keydown phase.`);\n\t\t\t// cannot be dispatched, probably only modifier keys\n\t\t\treturn shouldPreventDefault;\n\t\t}\n\n\t\tconst contextValue = this._contextKeyService.getContext(target);\n\t\tconst keypressLabel = userKeypress.getLabel();\n\n\t\tconst resolveResult = this._getResolver().resolve(contextValue, currentChords, userPressedChord);\n\n\t\tswitch (resolveResult.kind) {\n\n\t\t\tcase ResultKind.NoMatchingKb: {\n\n\t\t\t\tthis._logService.trace('KeybindingService#dispatch', keypressLabel, `[ No matching keybinding ]`);\n\n\t\t\t\tif (this.inChordMode) {\n\t\t\t\t\tconst currentChordsLabel = this._currentChords.map(({ label }) => label).join(', ');\n\t\t\t\t\tthis._log(`+ Leaving multi-chord mode: Nothing bound to \"${currentChordsLabel}, ${keypressLabel}\".`);\n\t\t\t\t\tthis._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", currentChordsLabel, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });\n\t\t\t\t\tthis._leaveChordMode();\n\n\t\t\t\t\tshouldPreventDefault = true;\n\t\t\t\t}\n\t\t\t\treturn shouldPreventDefault;\n\t\t\t}\n\n\t\t\tcase ResultKind.MoreChordsNeeded: {\n\n\t\t\t\tthis._logService.trace('KeybindingService#dispatch', keypressLabel, `[ Several keybindings match - more chords needed ]`);\n\n\t\t\t\tshouldPreventDefault = true;\n\t\t\t\tthis._expectAnotherChord(userPressedChord, keypressLabel);\n\t\t\t\tthis._log(this._currentChords.length === 1 ? `+ Entering multi-chord mode...` : `+ Continuing multi-chord mode...`);\n\t\t\t\treturn shouldPreventDefault;\n\t\t\t}\n\n\t\t\tcase ResultKind.KbFound: {\n\n\t\t\t\tthis._logService.trace('KeybindingService#dispatch', keypressLabel, `[ Will dispatch command ${resolveResult.commandId} ]`);\n\n\t\t\t\tif (resolveResult.commandId === null || resolveResult.commandId === '') {\n\n\t\t\t\t\tif (this.inChordMode) {\n\t\t\t\t\t\tconst currentChordsLabel = this._currentChords.map(({ label }) => label).join(', ');\n\t\t\t\t\t\tthis._log(`+ Leaving chord mode: Nothing bound to \"${currentChordsLabel}, ${keypressLabel}\".`);\n\t\t\t\t\t\tthis._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", currentChordsLabel, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });\n\t\t\t\t\t\tthis._leaveChordMode();\n\t\t\t\t\t\tshouldPreventDefault = true;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tif (this.inChordMode) {\n\t\t\t\t\t\tthis._leaveChordMode();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!resolveResult.isBubble) {\n\t\t\t\t\t\tshouldPreventDefault = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._log(`+ Invoking command ${resolveResult.commandId}.`);\n\t\t\t\t\tif (typeof resolveResult.commandArgs === 'undefined') {\n\t\t\t\t\t\tthis._commandService.executeCommand(resolveResult.commandId).then(undefined, err => this._notificationService.warn(err));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._commandService.executeCommand(resolveResult.commandId, resolveResult.commandArgs).then(undefined, err => this._notificationService.warn(err));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!HIGH_FREQ_COMMANDS.test(resolveResult.commandId)) {\n\t\t\t\t\t\tthis._telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: resolveResult.commandId, from: 'keybinding', detail: userKeypress.getUserSettingsLabel() ?? undefined });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn shouldPreventDefault;\n\t\t\t}\n\t\t}\n\t}\n\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean {\n\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t// ignore ctrl/cmd-combination but not shift/alt-combinatios\n\t\t\treturn false;\n\t\t}\n\t\t// weak check for certain ranges. this is properly implemented in a subclass\n\t\t// with access to the KeyboardMapperFactory.\n\t\tif ((event.keyCode >= KeyCode.KeyA && event.keyCode <= KeyCode.KeyZ)\n\t\t\t|| (event.keyCode >= KeyCode.Digit0 && event.keyCode <= KeyCode.Digit9)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nclass KeybindingModifierSet {\n\n\tpublic static EMPTY = new KeybindingModifierSet(null);\n\n\tprivate readonly _ctrlKey: boolean;\n\tprivate readonly _shiftKey: boolean;\n\tprivate readonly _altKey: boolean;\n\tprivate readonly _metaKey: boolean;\n\n\tconstructor(source: ResolvedChord | null) {\n\t\tthis._ctrlKey = source ? source.ctrlKey : false;\n\t\tthis._shiftKey = source ? source.shiftKey : false;\n\t\tthis._altKey = source ? source.altKey : false;\n\t\tthis._metaKey = source ? source.metaKey : false;\n\t}\n\n\thas(modifier: SingleModifierChord) {\n\t\tswitch (modifier) {\n\t\t\tcase 'ctrl': return this._ctrlKey;\n\t\t\tcase 'shift': return this._shiftKey;\n\t\t\tcase 'alt': return this._altKey;\n\t\t\tcase 'meta': return this._metaKey;\n\t\t}\n\t}\n}\n"]}