{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/keybinding/common/baseResolvedKeybinding.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAsB,IAAwC,SAAQ,iBAAG;QAKxE,YAAY,EAAmB,EAAE,MAAoB;YACpD,KAAK,EAAE,CAAC;YACR,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,MAAM,IAAA,WAAE,EAAc,QAAQ,CAAC,CAAC;aAChC;YACD,IAAI,CAAC,CAAC,GAAK,EAAE,CAAC;YACd,IAAI,CAAC,CAAC,GAAS,MAAM,CAAC;QACvB,CAAC;QAEM,QAAQ;YACd,OAAO,sBAAG,CAAa,OAAO,CAAC,IAAI,CAAC,CAAC,EAAI,IAAI,CAAC,CAAC,EAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAS,UAAU,CAAC,CAAC,CAAC;QACpG,CAAC;QAEM,YAAY;YAClB,OAAO,sBAAG,CAAe,OAAO,CAAC,IAAI,CAAC,CAAC,EAAI,IAAI,CAAC,CAAC,EAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAa,UAAU,CAAC,CAAC,CAAC;QAC1G,CAAC;QAEM,sBAAsB;YAC5B,IAAI,IAAI,CAAC,CAAC,CAAO,MAAM,GAAG,CAAC,EAAE;gBAC5B,wDAAwD;gBACxD,OAAO,IAAI,CAAC;aACZ;YACD,IAAI,IAAI,CAAC,CAAC,CAAO,CAAC,CAAC,CAAC,uBAAuB,EAAE,EAAE;gBAC9C,2EAA2E;gBAC3E,qBAAqB;gBACrB,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,sBAAG,CAA8B,OAAO,CAAC,IAAI,CAAC,CAAC,EAAI,IAAI,CAAC,CAAC,EAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAuB,UAAU,CAAC,CAAC,CAAC;QACnI,CAAC;QAEM,oBAAoB;YAC1B,OAAO,sBAAG,CAAuB,OAAO,CAAC,IAAI,CAAC,CAAC,EAAI,IAAI,CAAC,CAAC,EAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAqB,UAAU,CAAC,CAAC,CAAC;QAC1H,CAAC;QAEM,SAAS;YACf,OAAO,IAAI,CAAC,CAAC,CAAO,KAAK,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAU,UAAU,CAAC,CAAC,CAAC;QACxE,CAAC;QAEM,iBAAiB;YACvB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAO,MAAM,GAAG,CAAC,CAAC,CAAC;QAClC,CAAC;QAEM,SAAS;YACf,OAAO,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAS,UAAU,CAAC,CAAC,CAAC;QACrE,CAAC;QAEO,CAAC,CAAS,UAAa;YAC9B,OAAO,IAAI,iBAAG,CACb,UAAU,CAAC,OAAO,EAClB,UAAU,CAAC,QAAQ,EACnB,UAAU,CAAC,MAAM,EACjB,UAAU,CAAC,OAAO,EAClB,IAAI,CAAC,CAAC,CAAS,UAAU,CAAC,EAC1B,IAAI,CAAC,CAAC,CAAa,UAAU,CAAC,CAC9B,CAAC;QACH,CAAC;QAEM,iBAAiB;YACvB,OAAO,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAiB,UAAU,CAAC,CAAC,CAAC;QAC7E,CAAC;QAEM,+BAA+B;YACrC,OAAO,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAA+B,UAAU,CAAC,CAAC,CAAC;QAC3F,CAAC;KASD;IA7ED,oBA6EC","file":"baseResolvedKeybinding.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { illegalArgument } from 'vs/base/common/errors';\nimport { AriaLabelProvider, ElectronAcceleratorLabelProvider, UILabelProvider, UserSettingsLabelProvider } from 'vs/base/common/keybindingLabels';\nimport { Chord, SingleModifierChord, ResolvedKeybinding, ResolvedChord } from 'vs/base/common/keybindings';\nimport { OperatingSystem } from 'vs/base/common/platform';\n\nexport abstract class BaseResolvedKeybinding<T extends Chord> extends ResolvedKeybinding {\n\n\tprotected readonly _os: OperatingSystem;\n\tprotected readonly _chords: readonly T[];\n\n\tconstructor(os: OperatingSystem, chords: readonly T[]) {\n\t\tsuper();\n\t\tif (chords.length === 0) {\n\t\t\tthrow illegalArgument(`chords`);\n\t\t}\n\t\tthis._os = os;\n\t\tthis._chords = chords;\n\t}\n\n\tpublic getLabel(): string | null {\n\t\treturn UILabelProvider.toLabel(this._os, this._chords, (keybinding) => this._getLabel(keybinding));\n\t}\n\n\tpublic getAriaLabel(): string | null {\n\t\treturn AriaLabelProvider.toLabel(this._os, this._chords, (keybinding) => this._getAriaLabel(keybinding));\n\t}\n\n\tpublic getElectronAccelerator(): string | null {\n\t\tif (this._chords.length > 1) {\n\t\t\t// [Electron Accelerators] Electron cannot handle chords\n\t\t\treturn null;\n\t\t}\n\t\tif (this._chords[0].isDuplicateModifierCase()) {\n\t\t\t// [Electron Accelerators] Electron cannot handle modifier only keybindings\n\t\t\t// e.g. \"shift shift\"\n\t\t\treturn null;\n\t\t}\n\t\treturn ElectronAcceleratorLabelProvider.toLabel(this._os, this._chords, (keybinding) => this._getElectronAccelerator(keybinding));\n\t}\n\n\tpublic getUserSettingsLabel(): string | null {\n\t\treturn UserSettingsLabelProvider.toLabel(this._os, this._chords, (keybinding) => this._getUserSettingsLabel(keybinding));\n\t}\n\n\tpublic isWYSIWYG(): boolean {\n\t\treturn this._chords.every((keybinding) => this._isWYSIWYG(keybinding));\n\t}\n\n\tpublic hasMultipleChords(): boolean {\n\t\treturn (this._chords.length > 1);\n\t}\n\n\tpublic getChords(): ResolvedChord[] {\n\t\treturn this._chords.map((keybinding) => this._getChord(keybinding));\n\t}\n\n\tprivate _getChord(keybinding: T): ResolvedChord {\n\t\treturn new ResolvedChord(\n\t\t\tkeybinding.ctrlKey,\n\t\t\tkeybinding.shiftKey,\n\t\t\tkeybinding.altKey,\n\t\t\tkeybinding.metaKey,\n\t\t\tthis._getLabel(keybinding),\n\t\t\tthis._getAriaLabel(keybinding)\n\t\t);\n\t}\n\n\tpublic getDispatchChords(): (string | null)[] {\n\t\treturn this._chords.map((keybinding) => this._getChordDispatch(keybinding));\n\t}\n\n\tpublic getSingleModifierDispatchChords(): (SingleModifierChord | null)[] {\n\t\treturn this._chords.map((keybinding) => this._getSingleModifierChordDispatch(keybinding));\n\t}\n\n\tprotected abstract _getLabel(keybinding: T): string | null;\n\tprotected abstract _getAriaLabel(keybinding: T): string | null;\n\tprotected abstract _getElectronAccelerator(keybinding: T): string | null;\n\tprotected abstract _getUserSettingsLabel(keybinding: T): string | null;\n\tprotected abstract _isWYSIWYG(keybinding: T): boolean;\n\tprotected abstract _getChordDispatch(keybinding: T): string | null;\n\tprotected abstract _getSingleModifierChordDispatch(keybinding: T): SingleModifierChord | null;\n}\n"]}