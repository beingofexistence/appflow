{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/keybinding/common/keybindingsRegistry.ts"],"names":[],"mappings":"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","file":"keybindingsRegistry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { decodeKeybinding, Keybinding } from 'vs/base/common/keybindings';\nimport { OperatingSystem, OS } from 'vs/base/common/platform';\nimport { CommandsRegistry, ICommandHandler, ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { combinedDisposable, DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { LinkedList } from 'vs/base/common/linkedList';\n\nexport interface IKeybindingItem {\n\tkeybinding: Keybinding | null;\n\tcommand: string | null;\n\tcommandArgs?: any;\n\twhen: ContextKeyExpression | null | undefined;\n\tweight1: number;\n\tweight2: number;\n\textensionId: string | null;\n\tisBuiltinExtension: boolean;\n}\n\nexport interface IKeybindings {\n\tprimary?: number;\n\tsecondary?: number[];\n\twin?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n\tlinux?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n\tmac?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n}\n\nexport interface IKeybindingRule extends IKeybindings {\n\tid: string;\n\tweight: number;\n\targs?: any;\n\twhen?: ContextKeyExpression | null | undefined;\n}\n\nexport interface IExtensionKeybindingRule {\n\tkeybinding: Keybinding | null;\n\tid: string;\n\targs?: any;\n\tweight: number;\n\twhen: ContextKeyExpression | undefined;\n\textensionId?: string;\n\tisBuiltinExtension?: boolean;\n}\n\nexport const enum KeybindingWeight {\n\tEditorCore = 0,\n\tEditorContrib = 100,\n\tWorkbenchContrib = 200,\n\tBuiltinExtension = 300,\n\tExternalExtension = 400\n}\n\nexport interface ICommandAndKeybindingRule extends IKeybindingRule {\n\thandler: ICommandHandler;\n\tdescription?: ICommandHandlerDescription | null;\n}\n\nexport interface IKeybindingsRegistry {\n\tregisterKeybindingRule(rule: IKeybindingRule): IDisposable;\n\tsetExtensionKeybindings(rules: IExtensionKeybindingRule[]): void;\n\tregisterCommandAndKeybindingRule(desc: ICommandAndKeybindingRule): IDisposable;\n\tgetDefaultKeybindings(): IKeybindingItem[];\n}\n\n/**\n * Stores all built-in and extension-provided keybindings (but not ones that user defines themselves)\n */\nclass KeybindingsRegistryImpl implements IKeybindingsRegistry {\n\n\tprivate _coreKeybindings: LinkedList<IKeybindingItem>;\n\tprivate _extensionKeybindings: IKeybindingItem[];\n\tprivate _cachedMergedKeybindings: IKeybindingItem[] | null;\n\n\tconstructor() {\n\t\tthis._coreKeybindings = new LinkedList();\n\t\tthis._extensionKeybindings = [];\n\t\tthis._cachedMergedKeybindings = null;\n\t}\n\n\t/**\n\t * Take current platform into account and reduce to primary & secondary.\n\t */\n\tprivate static bindToCurrentPlatform(kb: IKeybindings): { primary?: number; secondary?: number[] } {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\tif (kb && kb.win) {\n\t\t\t\treturn kb.win;\n\t\t\t}\n\t\t} else if (OS === OperatingSystem.Macintosh) {\n\t\t\tif (kb && kb.mac) {\n\t\t\t\treturn kb.mac;\n\t\t\t}\n\t\t} else {\n\t\t\tif (kb && kb.linux) {\n\t\t\t\treturn kb.linux;\n\t\t\t}\n\t\t}\n\n\t\treturn kb;\n\t}\n\n\tpublic registerKeybindingRule(rule: IKeybindingRule): IDisposable {\n\t\tconst actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n\t\tconst result = new DisposableStore();\n\n\t\tif (actualKb && actualKb.primary) {\n\t\t\tconst kk = decodeKeybinding(actualKb.primary, OS);\n\t\t\tif (kk) {\n\t\t\t\tresult.add(this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when));\n\t\t\t}\n\t\t}\n\n\t\tif (actualKb && Array.isArray(actualKb.secondary)) {\n\t\t\tfor (let i = 0, len = actualKb.secondary.length; i < len; i++) {\n\t\t\t\tconst k = actualKb.secondary[i];\n\t\t\t\tconst kk = decodeKeybinding(k, OS);\n\t\t\t\tif (kk) {\n\t\t\t\t\tresult.add(this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic setExtensionKeybindings(rules: IExtensionKeybindingRule[]): void {\n\t\tconst result: IKeybindingItem[] = [];\n\t\tlet keybindingsLen = 0;\n\t\tfor (const rule of rules) {\n\t\t\tif (rule.keybinding) {\n\t\t\t\tresult[keybindingsLen++] = {\n\t\t\t\t\tkeybinding: rule.keybinding,\n\t\t\t\t\tcommand: rule.id,\n\t\t\t\t\tcommandArgs: rule.args,\n\t\t\t\t\twhen: rule.when,\n\t\t\t\t\tweight1: rule.weight,\n\t\t\t\t\tweight2: 0,\n\t\t\t\t\textensionId: rule.extensionId || null,\n\t\t\t\t\tisBuiltinExtension: rule.isBuiltinExtension || false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthis._extensionKeybindings = result;\n\t\tthis._cachedMergedKeybindings = null;\n\t}\n\n\tpublic registerCommandAndKeybindingRule(desc: ICommandAndKeybindingRule): IDisposable {\n\t\treturn combinedDisposable(\n\t\t\tthis.registerKeybindingRule(desc),\n\t\t\tCommandsRegistry.registerCommand(desc)\n\t\t);\n\t}\n\n\tprivate _registerDefaultKeybinding(keybinding: Keybinding, commandId: string, commandArgs: any, weight1: number, weight2: number, when: ContextKeyExpression | null | undefined): IDisposable {\n\t\tconst remove = this._coreKeybindings.push({\n\t\t\tkeybinding: keybinding,\n\t\t\tcommand: commandId,\n\t\t\tcommandArgs: commandArgs,\n\t\t\twhen: when,\n\t\t\tweight1: weight1,\n\t\t\tweight2: weight2,\n\t\t\textensionId: null,\n\t\t\tisBuiltinExtension: false\n\t\t});\n\t\tthis._cachedMergedKeybindings = null;\n\n\t\treturn toDisposable(() => {\n\t\t\tremove();\n\t\t\tthis._cachedMergedKeybindings = null;\n\t\t});\n\t}\n\n\tpublic getDefaultKeybindings(): IKeybindingItem[] {\n\t\tif (!this._cachedMergedKeybindings) {\n\t\t\tthis._cachedMergedKeybindings = Array.from(this._coreKeybindings).concat(this._extensionKeybindings);\n\t\t\tthis._cachedMergedKeybindings.sort(sorter);\n\t\t}\n\t\treturn this._cachedMergedKeybindings.slice(0);\n\t}\n}\nexport const KeybindingsRegistry: IKeybindingsRegistry = new KeybindingsRegistryImpl();\n\n// Define extension point ids\nexport const Extensions = {\n\tEditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\n\nfunction sorter(a: IKeybindingItem, b: IKeybindingItem): number {\n\tif (a.weight1 !== b.weight1) {\n\t\treturn a.weight1 - b.weight1;\n\t}\n\tif (a.command && b.command) {\n\t\tif (a.command < b.command) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (a.command > b.command) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn a.weight2 - b.weight2;\n}\n"]}