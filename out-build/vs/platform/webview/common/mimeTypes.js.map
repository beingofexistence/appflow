{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/webview/common/mimeTypes.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAC;QAChC,CAAC,MAAM,EAAE,eAAe,CAAC;QACzB,CAAC,MAAM,EAAE,UAAG,CAAG,IAAI,CAAC;QACpB,CAAC,MAAM,EAAE,UAAU,CAAC;QACpB,CAAC,KAAK,EAAE,wBAAwB,CAAC;QACjC,CAAC,MAAM,EAAE,wBAAwB,CAAC;QAClC,CAAC,MAAM,EAAE,wBAAwB,CAAC;QAClC,CAAC,OAAO,EAAE,kBAAkB,CAAC;QAC7B,CAAC,OAAO,EAAE,WAAW,CAAC;QACtB,CAAC,MAAM,EAAE,WAAW,CAAC;QACrB,CAAC,QAAQ,EAAE,uBAAuB,CAAC;QACnC,CAAC,MAAM,EAAE,UAAU,CAAC;QACpB,CAAC,MAAM,EAAE,iBAAiB,CAAC;QAC3B,CAAC,OAAO,EAAE,kBAAkB,CAAC;KAC7B,CAAC,CAAC;IAEH,SAAgB,IAAI,CAAsB,QAAa;QACtD,MAAM,GAAG,GAAG,IAAA,UAAG,EAAK,QAAQ,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QACnD,OAAO,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAA,UAAG,EAAU,QAAQ,CAAC,MAAM,CAAC,IAAI,UAAG,CAAG,OAAO,CAAC;IACpF,CAAC;IAHD,oBAGC","file":"mimeTypes.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getMediaMime, Mimes } from 'vs/base/common/mime';\nimport { extname } from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\n\nconst webviewMimeTypes = new Map([\n\t['.svg', 'image/svg+xml'],\n\t['.txt', Mimes.text],\n\t['.css', 'text/css'],\n\t['.js', 'application/javascript'],\n\t['.cjs', 'application/javascript'],\n\t['.mjs', 'application/javascript'],\n\t['.json', 'application/json'],\n\t['.html', 'text/html'],\n\t['.htm', 'text/html'],\n\t['.xhtml', 'application/xhtml+xml'],\n\t['.oft', 'font/otf'],\n\t['.xml', 'application/xml'],\n\t['.wasm', 'application/wasm'],\n]);\n\nexport function getWebviewContentMimeType(resource: URI): string {\n\tconst ext = extname(resource.fsPath).toLowerCase();\n\treturn webviewMimeTypes.get(ext) || getMediaMime(resource.fsPath) || Mimes.unknown;\n}\n"]}