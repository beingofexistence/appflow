{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/webview/electron-main/webviewMainService.ts"],"names":[],"mappings":"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","file":"webviewMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WebContents, webContents, WebFrameMain } from 'electron';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { FindInFrameOptions, FoundInFrameResult, IWebviewManagerService, WebviewWebContentsId, WebviewWindowId } from 'vs/platform/webview/common/webviewManagerService';\nimport { WebviewProtocolProvider } from 'vs/platform/webview/electron-main/webviewProtocolProvider';\nimport { IWindowsMainService } from 'vs/platform/windows/electron-main/windows';\n\nexport class WebviewMainService extends Disposable implements IWebviewManagerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onFoundInFrame = this._register(new Emitter<FoundInFrameResult>());\n\tpublic onFoundInFrame = this._onFoundInFrame.event;\n\n\tconstructor(\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t) {\n\t\tsuper();\n\t\tthis._register(new WebviewProtocolProvider());\n\t}\n\n\tpublic async setIgnoreMenuShortcuts(id: WebviewWebContentsId | WebviewWindowId, enabled: boolean): Promise<void> {\n\t\tlet contents: WebContents | undefined;\n\n\t\tif (typeof (id as WebviewWindowId).windowId === 'number') {\n\t\t\tconst { windowId } = (id as WebviewWindowId);\n\t\t\tconst window = this.windowsMainService.getWindowById(windowId);\n\t\t\tif (!window?.win) {\n\t\t\t\tthrow new Error(`Invalid windowId: ${windowId}`);\n\t\t\t}\n\t\t\tcontents = window.win.webContents;\n\t\t} else {\n\t\t\tconst { webContentsId } = (id as WebviewWebContentsId);\n\t\t\tcontents = webContents.fromId(webContentsId);\n\t\t\tif (!contents) {\n\t\t\t\tthrow new Error(`Invalid webContentsId: ${webContentsId}`);\n\t\t\t}\n\t\t}\n\n\t\tif (!contents.isDestroyed()) {\n\t\t\tcontents.setIgnoreMenuShortcuts(enabled);\n\t\t}\n\t}\n\n\tpublic async findInFrame(windowId: WebviewWindowId, frameName: string, text: string, options: { findNext?: boolean; forward?: boolean }): Promise<void> {\n\t\tconst initialFrame = this.getFrameByName(windowId, frameName);\n\n\t\ttype WebFrameMainWithFindSupport = WebFrameMain & {\n\t\t\tfindInFrame?(text: string, findOptions: FindInFrameOptions): void;\n\t\t\ton(event: 'found-in-frame', listener: Function): WebFrameMain;\n\t\t\tremoveListener(event: 'found-in-frame', listener: Function): WebFrameMain;\n\t\t};\n\t\tconst frame = initialFrame as unknown as WebFrameMainWithFindSupport;\n\t\tif (typeof frame.findInFrame === 'function') {\n\t\t\tframe.findInFrame(text, {\n\t\t\t\tfindNext: options.findNext,\n\t\t\t\tforward: options.forward,\n\t\t\t});\n\t\t\tconst foundInFrameHandler = (_: unknown, result: FoundInFrameResult) => {\n\t\t\t\tif (result.finalUpdate) {\n\t\t\t\t\tthis._onFoundInFrame.fire(result);\n\t\t\t\t\tframe.removeListener('found-in-frame', foundInFrameHandler);\n\t\t\t\t}\n\t\t\t};\n\t\t\tframe.on('found-in-frame', foundInFrameHandler);\n\t\t}\n\t}\n\n\tpublic async stopFindInFrame(windowId: WebviewWindowId, frameName: string, options: { keepSelection?: boolean }): Promise<void> {\n\t\tconst initialFrame = this.getFrameByName(windowId, frameName);\n\n\t\ttype WebFrameMainWithFindSupport = WebFrameMain & {\n\t\t\tstopFindInFrame?(stopOption: 'keepSelection' | 'clearSelection'): void;\n\t\t};\n\n\t\tconst frame = initialFrame as unknown as WebFrameMainWithFindSupport;\n\t\tif (typeof frame.stopFindInFrame === 'function') {\n\t\t\tframe.stopFindInFrame(options.keepSelection ? 'keepSelection' : 'clearSelection');\n\t\t}\n\t}\n\n\tprivate getFrameByName(windowId: WebviewWindowId, frameName: string): WebFrameMain {\n\t\tconst window = this.windowsMainService.getWindowById(windowId.windowId);\n\t\tif (!window?.win) {\n\t\t\tthrow new Error(`Invalid windowId: ${windowId}`);\n\t\t}\n\t\tconst frame = window.win.webContents.mainFrame.framesInSubtree.find(frame => {\n\t\t\treturn frame.name === frameName;\n\t\t});\n\t\tif (!frame) {\n\t\t\tthrow new Error(`Unknown frame: ${frameName}`);\n\t\t}\n\t\treturn frame;\n\t}\n}\n"]}