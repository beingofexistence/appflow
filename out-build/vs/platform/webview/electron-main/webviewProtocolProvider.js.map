{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/webview/electron-main/webviewProtocolProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,IAAwB,SAAQ,eAAG;iBAEhC,MAAC,GAAuB,IAAI,GAAG,CAAC;YAC9C,CAAC,aAAa,EAAE,YAAY,CAAC;YAC7B,CAAC,YAAY,EAAE,WAAW,CAAC;YAC3B,CAAC,oBAAoB,EAAE,mBAAmB,CAAC;SAC3C,CAAC,CAAC;QAEH;YACC,KAAK,EAAE,CAAC;YAER,iDAAiD;YACjD,MAAM,cAAc,GAAG,IAAI,CAAC,CAAC,CAAoB,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5D,mBAAQ,CAAC,oBAAoB,CAAC,iBAAO,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;QACtE,CAAC;QAEO,CAAC,CACR,OAAiC,EACjC,QAAgE;YAEhE,IAAI;gBACH,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACnC,MAAM,KAAK,GAAG,IAAI,CAAoB,CAAC,CAAqB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC1E,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC9B,MAAM,oBAAoB,GAAoB,4CAA4C,KAAK,EAAE,CAAC;oBAClG,MAAM,GAAG,GAAG,aAAG,CAAQ,SAAS,CAAC,oBAAoB,CAAC,CAAC;oBACvD,OAAO,QAAQ,CAAC;wBACf,IAAI,EAAE,GAAG,CAAC,MAAM;wBAChB,OAAO,EAAE;4BACR,GAAG,aAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,GAAG,CAAC;4BACvC,8BAA8B,EAAE,cAAc;yBAC9C;qBACD,CAAC,CAAC;iBACH;qBAAM;oBACN,OAAO,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,yFAAyF,EAAE,CAAC,CAAC;iBAC1H;aACD;YAAC,MAAM;gBACP,OAAO;aACP;YACD,OAAO,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,kFAAkF,EAAE,CAAC,CAAC;QACnH,CAAC;;IAxCF,oBAyCC","file":"webviewProtocolProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { protocol } from 'electron';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { AppResourcePath, COI, FileAccess, Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\n\n\nexport class WebviewProtocolProvider extends Disposable {\n\n\tprivate static validWebviewFilePaths = new Map([\n\t\t['/index.html', 'index.html'],\n\t\t['/fake.html', 'fake.html'],\n\t\t['/service-worker.js', 'service-worker.js'],\n\t]);\n\n\tconstructor() {\n\t\tsuper();\n\n\t\t// Register the protocol for loading webview html\n\t\tconst webviewHandler = this.handleWebviewRequest.bind(this);\n\t\tprotocol.registerFileProtocol(Schemas.vscodeWebview, webviewHandler);\n\t}\n\n\tprivate handleWebviewRequest(\n\t\trequest: Electron.ProtocolRequest,\n\t\tcallback: (response: string | Electron.ProtocolResponse) => void\n\t) {\n\t\ttry {\n\t\t\tconst uri = URI.parse(request.url);\n\t\t\tconst entry = WebviewProtocolProvider.validWebviewFilePaths.get(uri.path);\n\t\t\tif (typeof entry === 'string') {\n\t\t\t\tconst relativeResourcePath: AppResourcePath = `vs/workbench/contrib/webview/browser/pre/${entry}`;\n\t\t\t\tconst url = FileAccess.asFileUri(relativeResourcePath);\n\t\t\t\treturn callback({\n\t\t\t\t\tpath: url.fsPath,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t...COI.getHeadersFromQuery(request.url),\n\t\t\t\t\t\t'Cross-Origin-Resource-Policy': 'cross-origin'\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn callback({ error: -10 /* ACCESS_DENIED - https://cs.chromium.org/chromium/src/net/base/net_error_list.h?l=32 */ });\n\t\t\t}\n\t\t} catch {\n\t\t\t// noop\n\t\t}\n\t\treturn callback({ error: -2 /* FAILED - https://cs.chromium.org/chromium/src/net/base/net_error_list.h?l=32 */ });\n\t}\n}\n"]}