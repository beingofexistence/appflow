/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/nls", "vs/platform/contextkey/common/contextkey"], function (require, exports, nls_1, contextkey_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StorageCloseWithConflicts = exports.ctxMergeResultUri = exports.ctxMergeBaseUri = exports.ctxMergeEditorShowNonConflictingChanges = exports.ctxMergeEditorShowBaseAtTop = exports.ctxMergeEditorShowBase = exports.ctxMergeEditorLayout = exports.ctxIsMergeResultEditor = exports.ctxIsMergeEditor = void 0;
    exports.ctxIsMergeEditor = new contextkey_1.RawContextKey('isMergeEditor', false, { type: 'boolean', description: (0, nls_1.localize)('is', 'The editor is a merge editor') });
    exports.ctxIsMergeResultEditor = new contextkey_1.RawContextKey('isMergeResultEditor', false, { type: 'boolean', description: (0, nls_1.localize)('isr', 'The editor is a the result editor of a merge editor.') });
    exports.ctxMergeEditorLayout = new contextkey_1.RawContextKey('mergeEditorLayout', 'mixed', { type: 'string', description: (0, nls_1.localize)('editorLayout', 'The layout mode of a merge editor') });
    exports.ctxMergeEditorShowBase = new contextkey_1.RawContextKey('mergeEditorShowBase', false, { type: 'boolean', description: (0, nls_1.localize)('showBase', 'If the merge editor shows the base version') });
    exports.ctxMergeEditorShowBaseAtTop = new contextkey_1.RawContextKey('mergeEditorShowBaseAtTop', false, { type: 'boolean', description: (0, nls_1.localize)('showBaseAtTop', 'If base should be shown at the top') });
    exports.ctxMergeEditorShowNonConflictingChanges = new contextkey_1.RawContextKey('mergeEditorShowNonConflictingChanges', false, { type: 'boolean', description: (0, nls_1.localize)('showNonConflictingChanges', 'If the merge editor shows non-conflicting changes') });
    exports.ctxMergeBaseUri = new contextkey_1.RawContextKey('mergeEditorBaseUri', '', { type: 'string', description: (0, nls_1.localize)('baseUri', 'The uri of the baser of a merge editor') });
    exports.ctxMergeResultUri = new contextkey_1.RawContextKey('mergeEditorResultUri', '', { type: 'string', description: (0, nls_1.localize)('resultUri', 'The uri of the result of a merge editor') });
    exports.StorageCloseWithConflicts = 'mergeEditorCloseWithConflicts';
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VFZGl0b3IuanMiLCJzb3VyY2VSb290IjoiZmlsZTovLy93b3Jrc3BhY2UvYXBwZmxvdy9zcmMvIiwic291cmNlcyI6WyJ2cy93b3JrYmVuY2gvY29udHJpYi9tZXJnZUVkaXRvci9jb21tb24vbWVyZ2VFZGl0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztnR0FHZ0c7Ozs7O0lBT25GLFFBQUEsZ0JBQWdCLEdBQUcsSUFBSSwwQkFBYSxDQUFVLGVBQWUsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFBLGNBQVEsRUFBQyxJQUFJLEVBQUUsOEJBQThCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEosUUFBQSxzQkFBc0IsR0FBRyxJQUFJLDBCQUFhLENBQVUscUJBQXFCLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsSUFBQSxjQUFRLEVBQUMsS0FBSyxFQUFFLHNEQUFzRCxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdMLFFBQUEsb0JBQW9CLEdBQUcsSUFBSSwwQkFBYSxDQUF3QixtQkFBbUIsRUFBRSxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxJQUFBLGNBQVEsRUFBQyxjQUFjLEVBQUUsbUNBQW1DLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUwsUUFBQSxzQkFBc0IsR0FBRyxJQUFJLDBCQUFhLENBQVUscUJBQXFCLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsSUFBQSxjQUFRLEVBQUMsVUFBVSxFQUFFLDRDQUE0QyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hMLFFBQUEsMkJBQTJCLEdBQUcsSUFBSSwwQkFBYSxDQUFVLDBCQUEwQixFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLElBQUEsY0FBUSxFQUFDLGVBQWUsRUFBRSxvQ0FBb0MsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvTCxRQUFBLHVDQUF1QyxHQUFHLElBQUksMEJBQWEsQ0FBVSxzQ0FBc0MsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFBLGNBQVEsRUFBQywyQkFBMkIsRUFBRSxtREFBbUQsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsUCxRQUFBLGVBQWUsR0FBRyxJQUFJLDBCQUFhLENBQVMsb0JBQW9CLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsSUFBQSxjQUFRLEVBQUMsU0FBUyxFQUFFLHdDQUF3QyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RLLFFBQUEsaUJBQWlCLEdBQUcsSUFBSSwwQkFBYSxDQUFTLHNCQUFzQixFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLElBQUEsY0FBUSxFQUFDLFdBQVcsRUFBRSx5Q0FBeUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQVc3SyxRQUFBLHlCQUF5QixHQUFHLCtCQUErQixDQUFDIn0=