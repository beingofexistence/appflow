/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/nls", "vs/platform/instantiation/common/instantiation", "vs/platform/contextkey/common/contextkey"], function (require, exports, nls, instantiation_1, contextkey_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ITaskService = exports.TaskExecutionSupportedContext = exports.ServerlessWebContext = exports.ProcessExecutionSupportedContext = exports.TaskCommandsRegistered = exports.ShellExecutionSupportedContext = exports.CustomExecutionSupportedContext = void 0;
    exports.CustomExecutionSupportedContext = new contextkey_1.RawContextKey('customExecutionSupported', false, nls.localize('tasks.customExecutionSupported', "Whether CustomExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution."));
    exports.ShellExecutionSupportedContext = new contextkey_1.RawContextKey('shellExecutionSupported', false, nls.localize('tasks.shellExecutionSupported', "Whether ShellExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution."));
    exports.TaskCommandsRegistered = new contextkey_1.RawContextKey('taskCommandsRegistered', false, nls.localize('tasks.taskCommandsRegistered', "Whether the task commands have been registered yet"));
    exports.ProcessExecutionSupportedContext = new contextkey_1.RawContextKey('processExecutionSupported', false, nls.localize('tasks.processExecutionSupported', "Whether ProcessExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution."));
    exports.ServerlessWebContext = new contextkey_1.RawContextKey('serverlessWebContext', false, nls.localize('tasks.serverlessWebContext', "True when in the web with no remote authority."));
    exports.TaskExecutionSupportedContext = contextkey_1.ContextKeyExpr.or(contextkey_1.ContextKeyExpr.and(exports.ShellExecutionSupportedContext, exports.ProcessExecutionSupportedContext), exports.CustomExecutionSupportedContext);
    exports.ITaskService = (0, instantiation_1.createDecorator)('taskService');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFza1NlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiZmlsZTovLy93b3Jrc3BhY2UvYXBwZmxvdy9zcmMvIiwic291cmNlcyI6WyJ2cy93b3JrYmVuY2gvY29udHJpYi90YXNrcy9jb21tb24vdGFza1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztnR0FHZ0c7Ozs7O0lBZ0JuRixRQUFBLCtCQUErQixHQUFHLElBQUksMEJBQWEsQ0FBVSwwQkFBMEIsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxzSEFBc0gsQ0FBQyxDQUFDLENBQUM7SUFDeFEsUUFBQSw4QkFBOEIsR0FBRyxJQUFJLDBCQUFhLENBQVUseUJBQXlCLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsK0JBQStCLEVBQUUscUhBQXFILENBQUMsQ0FBQyxDQUFDO0lBQ3BRLFFBQUEsc0JBQXNCLEdBQUcsSUFBSSwwQkFBYSxDQUFVLHdCQUF3QixFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLDhCQUE4QixFQUFFLG9EQUFvRCxDQUFDLENBQUMsQ0FBQztJQUN6TCxRQUFBLGdDQUFnQyxHQUFHLElBQUksMEJBQWEsQ0FBVSwyQkFBMkIsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxpQ0FBaUMsRUFBRSx1SEFBdUgsQ0FBQyxDQUFDLENBQUM7SUFDNVEsUUFBQSxvQkFBb0IsR0FBRyxJQUFJLDBCQUFhLENBQVUsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsNEJBQTRCLEVBQUUsZ0RBQWdELENBQUMsQ0FBQyxDQUFDO0lBQy9LLFFBQUEsNkJBQTZCLEdBQUcsMkJBQWMsQ0FBQyxFQUFFLENBQUMsMkJBQWMsQ0FBQyxHQUFHLENBQUMsc0NBQThCLEVBQUUsd0NBQWdDLENBQUMsRUFBRSx1Q0FBK0IsQ0FBQyxDQUFDO0lBRXpLLFFBQUEsWUFBWSxHQUFHLElBQUEsK0JBQWUsRUFBZSxhQUFhLENBQUMsQ0FBQyJ9