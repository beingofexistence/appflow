/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/nls", "vs/platform/contextkey/common/contextkey"], function (require, exports, nls_1, contextkey_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CONTEXT_PROVIDER_EXISTS = exports.CONTEXT_IN_CHAT_LIST = exports.CONTEXT_IN_CHAT_SESSION = exports.CONTEXT_IN_CHAT_INPUT = exports.CONTEXT_CHAT_INPUT_HAS_TEXT = exports.CONTEXT_REQUEST = exports.CONTEXT_RESPONSE = exports.CONTEXT_CHAT_REQUEST_IN_PROGRESS = exports.CONTEXT_RESPONSE_FILTERED = exports.CONTEXT_RESPONSE_VOTE = exports.CONTEXT_RESPONSE_HAS_PROVIDER_ID = void 0;
    exports.CONTEXT_RESPONSE_HAS_PROVIDER_ID = new contextkey_1.RawContextKey('chatSessionResponseHasProviderId', false, { type: 'boolean', description: (0, nls_1.localize)('interactiveSessionResponseHasProviderId', "True when the provider has assigned an id to this response.") });
    exports.CONTEXT_RESPONSE_VOTE = new contextkey_1.RawContextKey('chatSessionResponseVote', '', { type: 'string', description: (0, nls_1.localize)('interactiveSessionResponseVote', "When the response has been voted up, is set to 'up'. When voted down, is set to 'down'. Otherwise an empty string.") });
    exports.CONTEXT_RESPONSE_FILTERED = new contextkey_1.RawContextKey('chatSessionResponseFiltered', false, { type: 'boolean', description: (0, nls_1.localize)('chatResponseFiltered', "True when the chat response was filtered out by the server.") });
    exports.CONTEXT_CHAT_REQUEST_IN_PROGRESS = new contextkey_1.RawContextKey('chatSessionRequestInProgress', false, { type: 'boolean', description: (0, nls_1.localize)('interactiveSessionRequestInProgress', "True when the current request is still in progress.") });
    exports.CONTEXT_RESPONSE = new contextkey_1.RawContextKey('chatResponse', false, { type: 'boolean', description: (0, nls_1.localize)('chatResponse', "The chat item is a response.") });
    exports.CONTEXT_REQUEST = new contextkey_1.RawContextKey('chatRequest', false, { type: 'boolean', description: (0, nls_1.localize)('chatRequest', "The chat item is a request") });
    exports.CONTEXT_CHAT_INPUT_HAS_TEXT = new contextkey_1.RawContextKey('chatInputHasText', false, { type: 'boolean', description: (0, nls_1.localize)('interactiveInputHasText', "True when the chat input has text.") });
    exports.CONTEXT_IN_CHAT_INPUT = new contextkey_1.RawContextKey('inChatInput', false, { type: 'boolean', description: (0, nls_1.localize)('inInteractiveInput', "True when focus is in the chat input, false otherwise.") });
    exports.CONTEXT_IN_CHAT_SESSION = new contextkey_1.RawContextKey('inChat', false, { type: 'boolean', description: (0, nls_1.localize)('inChat', "True when focus is in the chat widget, false otherwise.") });
    exports.CONTEXT_IN_CHAT_LIST = new contextkey_1.RawContextKey('chatListFocused', false, { type: 'boolean', description: (0, nls_1.localize)('chatListFocused', "True when a row of the chat list is focused, but not when focus is on a different element inside the chat row.") });
    exports.CONTEXT_PROVIDER_EXISTS = new contextkey_1.RawContextKey('hasChatProvider', false, { type: 'boolean', description: (0, nls_1.localize)('hasChatProvider', "True when some chat provider has been registered.") });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdENvbnRleHRLZXlzLmpzIiwic291cmNlUm9vdCI6ImZpbGU6Ly8vd29ya3NwYWNlL2FwcGZsb3cvc3JjLyIsInNvdXJjZXMiOlsidnMvd29ya2JlbmNoL2NvbnRyaWIvY2hhdC9jb21tb24vY2hhdENvbnRleHRLZXlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Z0dBR2dHOzs7OztJQUtuRixRQUFBLGdDQUFnQyxHQUFHLElBQUksMEJBQWEsQ0FBVSxrQ0FBa0MsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFBLGNBQVEsRUFBQyx5Q0FBeUMsRUFBRSw2REFBNkQsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvUCxRQUFBLHFCQUFxQixHQUFHLElBQUksMEJBQWEsQ0FBUyx5QkFBeUIsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxJQUFBLGNBQVEsRUFBQyxnQ0FBZ0MsRUFBRSxvSEFBb0gsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwUixRQUFBLHlCQUF5QixHQUFHLElBQUksMEJBQWEsQ0FBVSw2QkFBNkIsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFBLGNBQVEsRUFBQyxzQkFBc0IsRUFBRSw2REFBNkQsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoTyxRQUFBLGdDQUFnQyxHQUFHLElBQUksMEJBQWEsQ0FBVSw4QkFBOEIsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFBLGNBQVEsRUFBQyxxQ0FBcUMsRUFBRSxxREFBcUQsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUvTyxRQUFBLGdCQUFnQixHQUFHLElBQUksMEJBQWEsQ0FBVSxjQUFjLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsSUFBQSxjQUFRLEVBQUMsY0FBYyxFQUFFLDhCQUE4QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pLLFFBQUEsZUFBZSxHQUFHLElBQUksMEJBQWEsQ0FBVSxhQUFhLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsSUFBQSxjQUFRLEVBQUMsYUFBYSxFQUFFLDRCQUE0QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTVKLFFBQUEsMkJBQTJCLEdBQUcsSUFBSSwwQkFBYSxDQUFVLGtCQUFrQixFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLElBQUEsY0FBUSxFQUFDLHlCQUF5QixFQUFFLG9DQUFvQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pNLFFBQUEscUJBQXFCLEdBQUcsSUFBSSwwQkFBYSxDQUFVLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFBLGNBQVEsRUFBQyxvQkFBb0IsRUFBRSx3REFBd0QsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyTSxRQUFBLHVCQUF1QixHQUFHLElBQUksMEJBQWEsQ0FBVSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsSUFBQSxjQUFRLEVBQUMsUUFBUSxFQUFFLHlEQUF5RCxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZMLFFBQUEsb0JBQW9CLEdBQUcsSUFBSSwwQkFBYSxDQUFVLGlCQUFpQixFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLElBQUEsY0FBUSxFQUFDLGlCQUFpQixFQUFFLGdIQUFnSCxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTdQLFFBQUEsdUJBQXVCLEdBQUcsSUFBSSwwQkFBYSxDQUFVLGlCQUFpQixFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLElBQUEsY0FBUSxFQUFDLGlCQUFpQixFQUFFLG1EQUFtRCxDQUFDLEVBQUUsQ0FBQyxDQUFDIn0=