/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "assert", "vs/base/test/common/utils", "vs/editor/common/core/offsetRange", "vs/editor/common/model/textModelTokens"], function (require, exports, assert, utils_1, offsetRange_1, textModelTokens_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    suite('RangePriorityQueueImpl', () => {
        (0, utils_1.ensureNoDisposablesAreLeakedInTestSuite)();
        test('addRange', () => {
            const ranges = [];
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(0, 2), ranges);
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(10, 13), ranges);
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(20, 24), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[0, 2)', '[10, 13)', '[20, 24)']));
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(2, 10), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[0, 13)', '[20, 24)']));
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(14, 19), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[0, 13)', '[14, 19)', '[20, 24)']));
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(10, 22), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[0, 24)']));
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(-1, 29), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[-1, 29)']));
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(-10, -5), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[-10, -5)', '[-1, 29)']));
        });
        test('addRangeAndResize', () => {
            const queue = new textModelTokens_1.RangePriorityQueueImpl();
            queue.addRange(new offsetRange_1.OffsetRange(0, 20));
            queue.addRange(new offsetRange_1.OffsetRange(100, 120));
            queue.addRange(new offsetRange_1.OffsetRange(200, 220));
            // disjoint
            queue.addRangeAndResize(new offsetRange_1.OffsetRange(25, 27), 0);
            assert.deepStrictEqual(queue.getRanges().map(r => r.toString()), (['[0, 20)', '[98, 118)', '[198, 218)']));
            queue.addRangeAndResize(new offsetRange_1.OffsetRange(19, 20), 0);
            assert.deepStrictEqual(queue.getRanges().map(r => r.toString()), (['[0, 19)', '[97, 117)', '[197, 217)']));
            queue.addRangeAndResize(new offsetRange_1.OffsetRange(19, 97), 0);
            assert.deepStrictEqual(queue.getRanges().map(r => r.toString()), (['[0, 39)', '[119, 139)']));
            queue.addRangeAndResize(new offsetRange_1.OffsetRange(-1000, 1000), 0);
            assert.deepStrictEqual(queue.getRanges().map(r => r.toString()), ([]));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dE1vZGVsVG9rZW5zLnRlc3QuanMiLCJzb3VyY2VSb290IjoiZmlsZTovLy93b3Jrc3BhY2UvYXBwZmxvdy9zcmMvIiwic291cmNlcyI6WyJ2cy9lZGl0b3IvdGVzdC9jb21tb24vbW9kZWwvdGV4dE1vZGVsVG9rZW5zLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztnR0FHZ0c7Ozs7SUFPaEcsS0FBSyxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtRQUVwQyxJQUFBLCtDQUF1QyxHQUFFLENBQUM7UUFFMUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7WUFDckIsTUFBTSxNQUFNLEdBQWtCLEVBQUUsQ0FBQztZQUVqQyx5QkFBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLHlCQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3BELHlCQUFXLENBQUMsUUFBUSxDQUFDLElBQUkseUJBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdEQseUJBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSx5QkFBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUV0RCxNQUFNLENBQUMsZUFBZSxDQUNyQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQzdCLENBQUMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQ3BDLENBQUM7WUFFRix5QkFBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLHlCQUFXLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRXJELE1BQU0sQ0FBQyxlQUFlLENBQ3JCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxF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